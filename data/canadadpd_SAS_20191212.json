{"idx":"ProjectCollection-Y3iB6Xce72IV56WA","name":"CANADADPD 20191212","children":[{"idx":"MY454108c6-dc7f-40d2-87cb-6e1d88bc9895","name":"Introduction","custparents":[{"idx":"ProjectCollection-Y3iB6Xce72IV56WA"}],"children":[{"idx":"MY9e4ff0b1-76f6-4561-b79a-ec6326ec56cd","name":"What can it do","custparents":[{"idx":"MY454108c6-dc7f-40d2-87cb-6e1d88bc9895"}]},{"idx":"MY1c876574-3ab8-4d1d-9a49-bb3e04e4a91a","name":"Where are the programs","custparents":[{"idx":"MY454108c6-dc7f-40d2-87cb-6e1d88bc9895"}]},{"idx":"MYfa072137-c29d-43cd-a97c-19ac4de1b86a","name":"How to use it","custparents":[{"idx":"MY454108c6-dc7f-40d2-87cb-6e1d88bc9895"}]}]},{"idx":"MY6918dcc6-08a1-4c6e-8f2b-c366d6146b3f","name":"Main Programs","custparents":[{"idx":"ProjectCollection-Y3iB6Xce72IV56WA"},{"idx":"ProjectCollection-Y3iB6Xce72IV56WA"}],"children":[{"idx":"CodeTask-c4B16FWf4AyuEhHo","name":"GetDad","NodeDescription":"///t<br/>///s<br/>/*macro to determine the path of the current sas program*/<br/>%macro getThisPath&#59<br/>&nbsp&nbsp&nbsp&nbsp%global currentPath&#59<br/>&nbsp&nbsp&nbsp&nbsp%local thisprogramNamePath thisprogramName thisprogramPath thisprojectNamePath thisprojectName thisProjectPath&#59<br/>&nbsp&nbsp&nbsp&nbsp/*If running SAS enhance editor:<br/>&nbsp&nbsp&nbsp&nbsphttp://support.sas.com/kb/24/301.html<br/>&nbsp&nbsp&nbsp&nbsp*/<br/>&nbsp&nbsp&nbsp&nbsp/*a) Get the current SAS program's name and fullpath path<br/>&nbsp&nbsp&nbsp&nbspe.g.,  C:\\Users\\Z70\\Desktop\\test.sas<br/>&nbsp&nbsp&nbsp&nbsp*/<br/>&nbsp&nbsp&nbsp&nbsp%let thisprogramNamePath =  %sysget(SAS_EXECFILEPath)&#59<br/>&nbsp&nbsp&nbsp&nbsp/*b) Get the current SAS program's name<br/>&nbsp&nbsp&nbsp&nbspe.g.,  test.sas*/<br/>&nbsp&nbsp&nbsp&nbsp%let thisprogramName =  %sysget(SAS_EXECFILEName)&#59<br/>&nbsp&nbsp&nbsp&nbsp/*c) using a) substracting b) to have the path of the current sas program<br/>&nbsp&nbsp&nbsp&nbspe.g., C:\\Users\\Z70\\Desktop\\*/<br/>&nbsp&nbsp&nbsp&nbsp%let thisprogramPath = %substr(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&thisprogramNamePath, 1, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%eval(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%length(&thisprogramNamePath)-%length(&thisprogramName)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/>&nbsp&nbsp&nbsp&nbsp/**/<br/>&nbsp&nbsp&nbsp&nbsp/*%put >>> &thisprogramNameFullPath&#59*/<br/>&nbsp&nbsp&nbsp&nbsp/*%put >>> &thisprogramName&#59*/<br/>&nbsp&nbsp&nbsp&nbsp/*%put >>> &thisprogramPath&#59*/<br/><br/>&nbsp&nbsp&nbsp&nbsp/*alternatively, if running in sas EG:*/<br/>&nbsp&nbsp&nbsp&nbsp%let thisprojectNamePath = %sysfunc(dequote(&_clientprojectPath))&#59<br/>&nbsp&nbsp&nbsp&nbsp%let thisprojectName = %sysfunc(dequote(&_clientprojectName))&#59<br/>&nbsp&nbsp&nbsp&nbsp%let thisProjectPath = %substr(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&thisprojectNamePath, 1, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%eval(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%length(&thisprojectNamePath)-%length(&thisprojectName)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*%put >>> &thisprojectNamePath&#59*/<br/>&nbsp&nbsp&nbsp&nbsp/*%put >>> &thisprojectName&#59*/<br/>&nbsp&nbsp&nbsp&nbsp/*%put >>> &thisProjectPath&#59*/<br/><br/>&nbsp&nbsp&nbsp&nbsp%if %length(&thisprogramPath)=0 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let currentPath = &thisProjectPath&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp%else %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let currentPath = &thisprogramPath&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%if %substr(&currentPath, %length(&currentPath), 1) =\\ %then %let currentPath=%substr(&currentPath, 1, %eval(%length(&currentPath)-1))&#59<br/><br/>%mend getThisPath&#59<br/><br/>%global localProjectPath localZipsPath localDataBasePath zipnames_surfix NameList_filesInAZip URL&#59<br/><br/>/*Get the path of the current SAS program*/<br/>%getThisPath&#59<br/>/*set values of global variables*/<br/>%let localProjectPath=&currentPath&#59<br/>%let localZipsPath = &localProjectPath.\\zips&#59<br/>%let localDatabasePath = &localProjectPath.\\database&#59<br/>%let zipnames_surfix = _ _ia _ap _dr&#59<br/>%let NameList_filesInAZip = vet ther status schedule route pharm package ingred form drug comp&#59<br/>%let URL=https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/&zipname..zip&#59<br/><br/>/*load the supporint macros*/<br/>%include \"&localProjectPath.\\supporting.sas\"&#59<br/><br/>/*prepare an empty dataset to hold error records*/<br/>data missingDrugCode&#59<br/>&nbsp&nbsp&nbsp&nbsplength name_file $100. surfix_zipname $3.&#59<br/>&nbsp&nbsp&nbsp&nbspdelete&#59<br/>run&#59<br/><br/>/*1. make input terms of all variables*/<br/>%MakeInputTermsOfAllFiles&#59<br/>/*2. download the zip files*/<br/>%downloadPDPFiles&#59<br/>/*3. import data from txt files in zips*/<br/>%importDataFromAllZips&#59<br/>/*4. Link all the data sets and make the final database: DAD.sas7bdat*/<br/>%LinkAllZips&#59<br/>/*5. report the error rows when reading txt files into data sets*/<br/>Title \"Rows that were ignored when reading txt files into data sets\"&#59<br/>proc print data=missingDrugCode&#59<br/>run&#59<br/>title&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp<br/>s///<br/>t///","custparents":[{"idx":"CodeTask-jw38MmsFadpxzvHY"},{"idx":"MY6918dcc6-08a1-4c6e-8f2b-c366d6146b3f"}]},{"idx":"CodeTask-jw38MmsFadpxzvHY","name":"supporting macros","NodeDescription":"///t<br/>///s<br/>/*Supporting macros*/<br/><br/>/*make input terms of all files*/<br/>%macro MakeInputTermsOfAllFiles (debug=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local  i target name_fileinAZip debug NAMELIST2_FILESINAZIP&#59<br/>&nbsp&nbsp&nbsp&nbsp%let target=inputTerms&#59<br/><br/>&nbsp&nbsp&nbsp&nbspdata &target&#59 length name_file $100. inputTerms $2000.&#59 delete&#59run&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp%let NAMELIST2_FILESINAZIP = &NAMELIST_FILESINAZIP inactive&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*add inactive into the name list. inactive is unique to the zip allfiles_ia. It is only to be used for creating input terms of all files.*/<br/>&nbsp&nbsp&nbsp&nbsp%put >>>>>>>>>>>>>>>>>> NameList2_filesInAZip = &NameList2_filesInAZip&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 12&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let name_fileinAZip = %scan(&NameList2_filesInAZip, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%put >>>>>>>>>>>>>>>>>> name_fileinAZip = &name_fileinAZip&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%MakeInputTermsOfAFile(name_fileinAZip=&name_fileinAZip, target=MakeInputTermsOfAllFiles_tmp1)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*add the file name and input term into the target file*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata &target&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset &target MakeInputTermsOfAllFiles_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%if &debug ne 1 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc datasets nolist&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete MakeInputTermsOfAllFiles_tmp:&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59quit&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>%mend MakeInputTermsOfAllFiles&#59<br/><br/>%macro LinkAllZips&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local zipname_file_surfix  i pathexists&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*make a folder 'database' if the folder does not exist*/<br/>&nbsp&nbsp&nbsp&nbsp/*&nbsp&nbsp&nbsp&nbspcheck if  the subfolder 'zips exists&nbsp&nbsp&nbsp&nbsp*/<br/>&nbsp&nbsp&nbsp&nbsp%let pathexists = %sysfunc(filename(fileref,&localDatabasePath)) &#59<br/>&nbsp&nbsp&nbsp&nbsp/*if the subfolder 'database' does not exist, create it. */<br/>&nbsp&nbsp&nbsp&nbsp%if &pathexists = 0 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*specify to exit dos command window without typing 'exit' (noxwait)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspspecify to wait and do not run the following sas programs until the x commands are done */<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspoptions noxwait xsync&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspx \"mkdir &localProjectPath.\\database\"&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*return to the default settings on xwait and xsync*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspopitons xwait xsync&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsplibname localt \"&localDatabasePath\"&#59<br/><br/>&nbsp&nbsp&nbsp&nbspdata DAD&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspformat SRC $3. createDate date9.&#59&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59&nbsp&nbsp&nbsp&nbsp<br/><br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 4&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let zipname_file_surfix =%scan(&zipnames_surfix, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if &zipname_file_surfix=_ %then %let zipname_file_surfix =&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%makedrugCodeList(zipname_file_surfix=&zipname_file_surfix)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%linkfilesInAZip(zipname_file_surfix=&zipname_file_surfix)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if %length(&zipname_file_surfix)=0 %then %let zipname_file_surfix = mk&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata LinkAllZips_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset linkedfile&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspSRC = symget('zipname_file_surfix')&#59<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproject=&_clientprojectname&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspprogram=&_clienttasklabel&#59*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreateDate=date()&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata DAD&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset DAD LinkAllZips_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbspproc datasets nolist&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete LinkAllZips_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbspdata localt.DAD&#59 set DAD&#59run&#59<br/><br/>%mend  LinkAllZips&#59<br/>%macro linkfilesInAZip(zipname_file_surfix=)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local  i srcfilename srcfilenameAndsurfix zipname_file_surfix&#59<br/><br/>&nbsp&nbsp&nbsp&nbspdata linkedfile&#59 set drugcodelist&zipname_file_surfix&#59 if drug_code ne ''&#59 run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 11&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilename= %scan(&NameList_filesInAZip, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilenameAndsurfix=&srcfilename.&zipname_file_surfix&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sql&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table linkedfile  as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect *<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom linkedfile t1<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspleft join<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&srcfilenameAndsurfix t2<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspon<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspt1.drug_code = t2.drug_code<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/><br/>&nbsp&nbsp&nbsp&nbsp/*for the zip _ia, there is an additional file called inactive*/<br/>&nbsp&nbsp&nbsp&nbsp%if %lowcase(&zipname_file_surfix) = _ia %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sql&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table linkedfile  as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect *<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom linkedfile t1<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspleft join<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinactive t2<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspon<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspt1.drug_code = t2.drug_code<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbspproc sort data=linkedfile&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspby drug_code last_update_date&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>%mend linkfilesInAZip&#59<br/>%macro makedrugcodelist(zipname_file_surfix=, debug=)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%local  i srcfilename srcfilenameAndsurfix zipname_file_surfix debug&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata makedrugcodelist_tmp1&#59length DRUG_CODE 8. &#59delete&#59run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 11&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilename= %scan(&NameList_filesInAZip, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilenameAndsurfix=&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata makedrugcodelist_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset makedrugcodelist_tmp1 &srcfilenameAndsurfix(keep=drug_code)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sort data=makedrugcodelist_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspby DRUG_CODE&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sql&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table drugcodelist&zipname_file_surfix as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect distinct drug_code<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom makedrugcodelist_tmp1<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*for the zip _ia, there is an additional file called inactive*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if %lowcase(&zipname_file_surfix) =_ia %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata makedrugcodelist_tmp3&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset drugcodelist&zipname_file_surfix inactive&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sql&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table drugcodelist&zipname_file_surfix as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect distinct drug_code<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom makedrugcodelist_tmp3<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if &debug ne 1 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc datasets nolist&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete makedrugcodelist_tmp:&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59quit&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*check if all drug_code can be found in the file 'drug'. Not really!*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%compAB(a=drug, b=drugcodelist&zipname_file_surfix, target=test, vars=drug_code)&#59&nbsp&nbsp&nbsp&nbsp*/<br/>%mend makedrugcodelist&#59<br/>/*a macro to extract txt files from zips and save as sas datasets*/<br/>%macro importADataFile (srcfilename=, zipname_file_surfix=)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local zipname srctxtname targetsetname inputterms srcfilename zipname_file_surfix inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp%let zipname=allfiles&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp%let srctxtname=&srcfilename&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp/*inactive is a special case*/<br/>&nbsp&nbsp&nbsp&nbsp%if &srcfilename=inactive %then %let srctxtname=inactive&#59<br/>&nbsp&nbsp&nbsp&nbsp%let targetsetname=&srctxtname&#59<br/><br/><br/>&nbsp&nbsp&nbsp&nbsp/*1. let SAS know that the source is a zip file which contains files and folders. */<br/>&nbsp&nbsp&nbsp&nbsp/*specify the zip file*/<br/>&nbsp&nbsp&nbsp&nbspfilename thezip zip \"&localZipsPath.\\&zipname..zip\"&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*a) copy the member file into work directory */<br/>&nbsp&nbsp&nbsp&nbspfilename thetxt \"%sysfunc(getoption(work))/importdata_tmp.txt\" &#59<br/>&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp  &nbsp&nbsp&nbsp&nbspinfile  thezip(&srctxtname..txt) &#59<br/>&nbsp&nbsp&nbsp&nbsp  &nbsp&nbsp&nbsp&nbspfile thetxt&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinput&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspput _infile_&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*b) get the input format*/<br/>&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset INPUTTERMS&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif lowcase(strip(name_file)) = lowcase(strip(symget('srcfilename')))&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcall symput('inputterms', inputterms)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcall symput('inputvartypes', inputvartypes)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif strip(inputFormat) ne '' then call symput('inputFormat', inputFormat)&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%put >>> inputterms=&inputterms&#59<br/>&nbsp&nbsp&nbsp&nbsp%put >>> inputvartypes=&inputvartypes&#59<br/>&nbsp&nbsp&nbsp&nbsp%put >>> inputFormat=&inputFormat&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*c) input data into the table*/<br/>&nbsp&nbsp&nbsp&nbspdata &targetsetname missingdrugcode_&targetsetname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinfile thetxt dsd missover&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinput &inputterms &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if %length(&inputFormat) ne 0 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspformat &inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif drug_code = . then output missingdrugcode_&targetsetname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspelse output  &targetsetname&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp%let inputterms=&#59%let inputvartypes=&#59 %let inputFormat=&#59<br/><br/>%mend importADataFile&#59<br/>%macro importDataInAZip( zipname_file_surfix=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local zipname_file  zipname_cols srcfilename srcfilenameAndsurfix  zipname_file_surfix i&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i =1 %to 11&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilename= %scan(&NameList_filesInAZip, &i)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%put >>> srcfilename= &srcfilename&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%importADataFile(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilename=&srcfilename, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=&zipname_file_surfix <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata missingDrugCode_&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset missingDrugCode_&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspname_file=symget('srcfilename')&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsurfix_zipname=symget('zipname_file_surfix')&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspkeep drug_code name_file surfix_zipname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata missingDrugCode&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset missingDrugCode missingDrugCode_&srcfilename.&zipname_file_surfix&#59&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*an additional for inactive.txt*/<br/>&nbsp&nbsp&nbsp&nbsp%if %lowcase(&zipname_file_surfix)=_ia %then %do&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%importADataFile(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilename=inactive, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=_ia <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata missingDrugCode_&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset missingDrugCode_&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspname_file='inactive'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsurfix_zipname=symget('zipname_file_surfix')&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspkeep drug_code name_file surfix_zipname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata missingDrugCode&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset missingDrugCode missingDrugCode_&srcfilename.&zipname_file_surfix&#59&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/><br/>%mend importDataInAZip&#59<br/>%macro importDataFromAllZips&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local zipname_file  zipname_cols  List_zipnames  i zipname_file_surfix&#59&nbsp&nbsp&nbsp&nbsp<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 4&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let zipname_file_surfix = %scan(&zipnames_surfix, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if &zipname_file_surfix=_ %then %let zipname_file_surfix =&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%importDataInAZip(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=&zipname_file_surfix<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/>%mend importDataFromAllZips&#59<br/><br/>%macro MakeInputTermsOfAFile (name_fileinAZip=, target=, debug=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local name_fileinAZip target debug&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*to split the var names, var type, and var length*/<br/>&nbsp&nbsp&nbsp&nbspdata MakeInputTermsOfAFile_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset &name_fileinAZip.Col_raw&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif index(type, '(') > 0 then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsptype1=scan(type, 1, \"(\")&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvarLen =tranwrd(scan(type, 2, \"(\"), \")\", \"\")&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspelse type1 = type&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplength varType $20. varInFormat $20. inputvar $100. inputVarType $100. inputTerm $100. varoutFormat $100.&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='varchar2') varType='$'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='number') varType=''&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='date') varType=''&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspotherwise varType='wrong'&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif lowcase(type1) ='date' then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvarLen='anydtdte11'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvaroutFormat =strip(name) || ' ' || 'date9.'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvarInFormat = strip(varType) || strip(varLen) || \".\"&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputvar = strip(name)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputVarType=strip(name) || ' ' || varType&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputTerm= strip(name) || ' :' || strip(varinformat)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspkeep inputvar inputVarType inputTerm varoutFormat&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*to concatenate the input terms together into one string, like 'DRUG_CODE 8.DRUG_IDENTIFICATION_NUMBER $29.BRAND_NAME $200.HISTORY_DATE anydtdte11.'*/<br/>&nbsp&nbsp&nbsp&nbspdata &target&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset MakeInputTermsOfAFile_tmp1 end=last&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplength name_file $100. inputVars $2000. inputVarTypes $2000. inputTerms $2000. inputFormat $2000.&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspretain inputVars inputVarTypes inputTerms inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif _n_=1 then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputvars=inputvar&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputVarTypes=inputVarType&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputTerms=inputterm&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputFormat=varoutFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspelse do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputvars = strip(inputvars) || ' ' || inputvar&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputVarTypes = strip(inputVarTypes) || ' ' || inputVarType&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputTerms  = strip(inputTerms) || ' ' || inputterm&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputFormat  = strip(inputFormat) || ' ' || varoutFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif last&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspname_file = symget('name_fileinAZip')&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspkeep name_file inputvars inputVarTypes  inputTerms inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp%if &debug ne 1 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc datasets nolist&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete MakeInputTermsOfAFile_tmp:&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59quit&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>%mend MakeInputTermsOfAFile&#59<br/><br/>%macro downloadPDPFiles&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local ziplist zipname i&#59<br/>&nbsp&nbsp&nbsp&nbsp%let ziplist =allfiles allfiles_ia allfiles_ap allfiles_dr&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*make a folder 'zips' if the folder does not exist*/<br/>&nbsp&nbsp&nbsp&nbsp/*&nbsp&nbsp&nbsp&nbspcheck if  the subfolder 'zips exists&nbsp&nbsp&nbsp&nbsp*/<br/>&nbsp&nbsp&nbsp&nbsp%let zipsexists = %sysfunc(filename(fileref, &localZipsPath)) &#59<br/>/*&nbsp&nbsp&nbsp&nbsp%put zipsexists = &zipsexists&#59*/<br/>&nbsp&nbsp&nbsp&nbsp/*if the subfolder 'zips' does not exist, create it. */<br/>&nbsp&nbsp&nbsp&nbsp%if &zipsexists = 0 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*specify to exit dos command window without typing 'exit' (noxwait)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspspecify to wait and do not run the following sas programs until the x commands are done */<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspoptions noxwait xsync&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspx \"mkdir &localProjectPath.\\zips\"&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*return to default settings on xwait and xsync*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspoptions xwait xsync&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 4&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let zipname = %scan(&ziplist, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%put >>> the current zipname is &zipname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfilename target \"&localZipsPath.\\&zipname..zip\"&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc http  url=\"&URL\"  method=\"get\" out=target&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>%mend downloadPDPFiles&#59<br/><br/>/*Get the path of the current sas program or the current SAS enterprise guide project*/<br/>%macro getThisPath&#59<br/>%global currentPath&#59<br/>%local thisprogramNamePath thisprogramName thisprogramPath thisprojectNamePath thisprojectName thisProjectPath&#59<br/>/*If running SAS enhance editor:<br/>http://support.sas.com/kb/24/301.html<br/>*/<br/>/*a) Get the current SAS program's name and fullpath path<br/>e.g.,  C:\\Users\\Z70\\Desktop\\test.sas<br/>*/<br/>%let thisprogramNamePath =  %sysget(SAS_EXECFILEPath)&#59<br/>/*b) Get the current SAS program's name<br/>e.g.,  test.sas*/<br/>%let thisprogramName =  %sysget(SAS_EXECFILEName)&#59<br/>/*c) using a) substracting b) to have the path of the current sas program<br/>e.g., C:\\Users\\Z70\\Desktop\\*/<br/>%let thisprogramPath = %substr(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&thisprogramNamePath, 1, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%eval(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%length(&thisprogramNamePath)-%length(&thisprogramName)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/>/**/<br/>/*%put >>> &thisprogramNameFullPath&#59*/<br/>/*%put >>> &thisprogramName&#59*/<br/>/*%put >>> &thisprogramPath&#59*/<br/><br/>/*alternatively, if running in sas EG:*/<br/>%let thisprojectNamePath = %sysfunc(dequote(&_clientprojectPath))&#59<br/>%let thisprojectName = %sysfunc(dequote(&_clientprojectName))&#59<br/>%let thisProjectPath = %substr(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&thisprojectNamePath, 1, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%eval(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%length(&thisprojectNamePath)-%length(&thisprojectName)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/><br/>/*%put >>> &thisprojectNamePath&#59*/<br/>/*%put >>> &thisprojectName&#59*/<br/>/*%put >>> &thisProjectPath&#59*/<br/><br/>&nbsp&nbsp&nbsp&nbsp%if %length(&thisprogramPath)=0 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let currentPath = &thisProjectPath&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp%else %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let currentPath = &thisprogramPath&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%if %substr(&currentPath, %length(&currentPath), 1) =\\ %then %let currentPath=%substr(&currentPath, 1, %eval(%length(&currentPath)-1))&#59<br/><br/><br/>%mend getThisPath&#59<br/><br/><br/>/*input var names*/<br/><br/>/*the vars and types are defined according to the page:<br/>https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/drug-product-database/read-file-drug-product-database-data-extract.html<br/>*/<br/>/*<br/>The following vars may exceed the planned length, and the length were redefined<br/><br/>COMPANY_NAME, DESCRIPTOR, PRODUCT_INFORMATION, SUITE_NUMBER, DRUG_IDENTIFICATION_NUMBER, <br/>POST_OFFICE_BOX, UPC, ACCESSION_NUMBER, MFR_CODE, PACKAGE_SIZE<br/>ADDRESS_MAILING_FLAG <br/>ADDRESS_BILLING_FLAG <br/>ADDRESS_NOTIFICATION_FLAG <br/>ADDRESS_OTHER <br/>BASE<br/>CURRENT_STATUS_FLAG<br/>INGREDIENT_SUPPLIED_IND<br/>PEDIATRIC_FLAG<br/>*/<br/><br/>data _null_&#59run&#59<br/><br/>/*https://stats.idre.ucla.edu/sas/faq/how-do-i-read-in-a-character-variable-with-varying-length-in-a-space-delimited-dataset/*/<br/>/*<br/>Max 102<br/>NOTES VARCHAR2(2000)<br/>max 261<br/>INGREDIENT_F VARCHAR2(400)<br/>max 191<br/>INGREDIENT VARCHAR2(240)<br/>max 20<br/>DOSAGE_UNIT_F VARCHAR2(80)<br/>max 1<br/>STRENGTH_TYPE_F VARCHAR2(80)<br/>max 9<br/>DOSAGE_UNIT VARCHAR2(40)<br/>max 1<br/>STRENGTH_TYPE VARCHAR2(40)<br/>max 12<br/>STRENGTH_UNIT VARCHAR2(40)<br/>max 1<br/>BASE VARCHAR2(1)<br/>max 1<br/>INGREDIENT_SUPPLIED_IND VARCHAR2(1)<br/>*/<br/>data ingredCol_raw&#59<br/>/* length name $100. type $100.&#59*/<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>ACTIVE_INGREDIENT_CODE NUMBER(6)<br/>INGREDIENT VARCHAR2(200)<br/>INGREDIENT_SUPPLIED_IND VARCHAR2(2)<br/>STRENGTH VARCHAR2(20)<br/>STRENGTH_UNIT VARCHAR2(20)<br/>STRENGTH_TYPE VARCHAR2(1)<br/>DOSAGE_VALUE VARCHAR2(20)<br/>BASE VARCHAR2(2)<br/>DOSAGE_UNIT VARCHAR2(10)<br/>NOTES VARCHAR2(110)<br/>INGREDIENT_F VARCHAR2(270)<br/>STRENGTH_UNIT_F VARCHAR2(80)<br/>STRENGTH_TYPE_F VARCHAR2(1)<br/>DOSAGE_UNIT_F VARCHAR2(20)<br/>&#59<br/><br/>/*<br/>Max=21<br/>COUNTRY_F VARCHAR2(100)<br/>Max=23<br/>PROVINCE_F VARCHAR2(100)<br/>max=80<br/>COMPANY_NAME VARCHAR2(80)<br/>max 36<br/>CITY_NAME VARCHAR2(60)<br/>max 9<br/>COMPANY_TYPE VARCHAR2(10)<br/>max 18<br/>COUNTRY VARCHAR2(40)<br/>max 27<br/>PROVINCE VARCHAR2(40)<br/>max 20<br/>SUITE_NUMBER VARCHAR2(20)<br/>max 15<br/>POST_OFFICE_BOX VARCHAR2(15)<br/>max 5<br/>MFR_CODE VARCHAR2(5)<br/>max 1<br/>ADDRESS_MAILING_FLAG VARCHAR2(1)<br/>max 1<br/>ADDRESS_BILLING_FLAG VARCHAR2(1)<br/>max 1<br/>ADDRESS_NOTIFICATION_FLAG VARCHAR2(1)<br/>max 1<br/>ADDRESS_OTHER VARCHAR2(1)<br/>*/<br/>data compCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>MFR_CODE VARCHAR2(10)<br/>COMPANY_CODE NUMBER(6)<br/>COMPANY_NAME VARCHAR2(100)<br/>COMPANY_TYPE VARCHAR2(40)<br/>ADDRESS_MAILING_FLAG VARCHAR2(2)<br/>ADDRESS_BILLING_FLAG VARCHAR2(2)<br/>ADDRESS_NOTIFICATION_FLAG VARCHAR2(2)<br/>ADDRESS_OTHER VARCHAR2(2)<br/>SUITE_NUMBER VARCHAR2(40)<br/>STREET_NAME VARCHAR2(80)<br/>CITY_NAME VARCHAR2(40)<br/>PROVINCE VARCHAR2(30)<br/>COUNTRY VARCHAR2(20)<br/>POSTAL_CODE VARCHAR2(20)<br/>POST_OFFICE_BOX VARCHAR2(20)<br/>PROVINCE_F VARCHAR2(30)<br/>COUNTRY_F VARCHAR2(30)<br/>&#59<br/><br/>/*<br/>max 118<br/>BRAND_NAME_F VARCHAR2(300)<br/><br/>*/<br/><br/>/*<br/>max 150<br/>DESCRIPTOR VARCHAR2(150)<br/>max 134<br/>DESCRIPTOR_F VARCHAR2(200)<br/>max 20<br/>CLASS_F VARCHAR2(80)<br/>max 50<br/>PRODUCT_CATEGORIZATION VARCHAR2(80)<br/>max 19<br/>CLASS VARCHAR2(40)<br/>max 29<br/>DRUG_IDENTIFICATION_NUMBER VARCHAR2(29)<br/>max 10<br/>AI_GROUP_NO VARCHAR2(10)<br/>max 5<br/>ACCESSION_NUMBER VARCHAR2(5)<br/>max 1<br/>PEDIATRIC_FLAG VARCHAR2(1)<br/>*/<br/>data drugCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>PRODUCT_CATEGORIZATION VARCHAR2(50)<br/>CLASS VARCHAR2(20)<br/>DRUG_IDENTIFICATION_NUMBER VARCHAR2(40)<br/>BRAND_NAME VARCHAR2(200)<br/>DESCRIPTOR VARCHAR2(200)<br/>PEDIATRIC_FLAG VARCHAR2(2)<br/>ACCESSION_NUMBER VARCHAR2(10)<br/>NUMBER_OF_AIS VARCHAR2(10)<br/>LAST_UPDATE_DATE DATE<br/>AI_GROUP_NO VARCHAR2(20)<br/>CLASS_F VARCHAR2(20)<br/>BRAND_NAME_F VARCHAR2(120)<br/>DESCRIPTOR_F VARCHAR2(140)<br/>&#59<br/><br/>/*<br/>Max 37<br/>STATUS_F VARCHAR2(80)<br/>Max 1<br/>CURRENT_STATUS_FLAG VARCHAR2(1)<br/>*/<br/><br/>data statusCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>CURRENT_STATUS_FLAG VARCHAR2(2)<br/>STATUS VARCHAR2(40)<br/>HISTORY_DATE DATE<br/>STATUS_F VARCHAR2(40)<br/>LOT_NUMBER VARCHAR2(50)<br/>EXPIRATION_DATE DATE<br/>&#59<br/><br/>/*<br/>Max 51<br/>PHARMACEUTICAL_FORM_F VARCHAR2(80)<br/>Max 40<br/>PHARMACEUTICAL_FORM VARCHAR2(40)<br/>*/<br/>data formCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>PHARM_FORM_CODE NUMBER(7)<br/>PHARMACEUTICAL_FORM VARCHAR2(60)<br/>PHARMACEUTICAL_FORM_F VARCHAR2(60)<br/>&#59<br/><br/>/*<br/>Max 1<br/>PACKAGE_SIZE_UNIT_F VARCHAR2(80)<br/>Max 1<br/>PACKAGE_TYPE_F VARCHAR2(80)<br/>Max 80<br/>PRODUCT_INFORMATION VARCHAR2(80)<br/>max 12<br/>PACKAGE_SIZE_UNIT VARCHAR2(40)<br/>max 21<br/>PACKAGE_TYPE VARCHAR2(40)<br/>max 12<br/>UPC VARCHAR2(12)<br/>max 5<br/>PACKAGE_SIZE VARCHAR2(5)<br/>*/<br/>data packageCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>UPC VARCHAR2(20)<br/>PACKAGE_SIZE_UNIT VARCHAR2(20)<br/>PACKAGE_TYPE VARCHAR2(25)<br/>PACKAGE_SIZE VARCHAR2(10)<br/>PRODUCT_INFORMATION VARCHAR2(100)<br/>PACKAGE_SIZE_UNIT_F VARCHAR2(1)<br/>PACKAGE_TYPE_F VARCHAR2(1)<br/>&#59<br/><br/>/*<br/>max 6<br/>PHARMACEUTICAL_STD VARCHAR2(40)<br/>*/<br/>data pharmCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>PHARMACEUTICAL_STD VARCHAR2(10)<br/>&#59<br/><br/><br/>/*<br/>max=61<br/>ROUTE_OF_ADMINISTRATION_F VARCHAR2(80)<br/>*/<br/>data routeCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>ROUTE_OF_ADMINISTRATION_CODE NUMBER(6)<br/>ROUTE_OF_ADMINISTRATION VARCHAR2(40)<br/>ROUTE_OF_ADMINISTRATION_F VARCHAR2(65)<br/>&#59<br/><br/>/*<br/>max 26<br/>SCHEDULE_F VARCHAR2(160)<br/>max 24<br/>SCHEDULE VARCHAR2(40)<br/>*/<br/>data scheduleCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>SCHEDULE VARCHAR2(30)<br/>SCHEDULE_F VARCHAR2(30)<br/>&#59<br/><br/>/*<br/>max=78<br/>TC_ATC VARCHAR2(120)<br/>max=1<br/>TC_ATC_F VARCHAR2(240)<br/>max=55<br/>TC_AHFS_F VARCHAR2(160)<br/>max 8<br/>TC_ATC_NUMBER VARCHAR2(8)<br/>*/<br/>data therCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>TC_ATC_NUMBER VARCHAR2(10)<br/>TC_ATC VARCHAR2(80)<br/>TC_AHFS_NUMBER VARCHAR2(20)<br/>TC_AHFS VARCHAR2(80)<br/>TC_ATC_F VARCHAR2(1)<br/>TC_AHFS_F VARCHAR2(60)<br/>&#59<br/><br/>/*<br/>max=42<br/>VET_SPECIES_F VARCHAR2(160)<br/>max 44<br/>VET_SPECIES VARCHAR2(80)<br/>max 30<br/>VET_SUB_SPECIES VARCHAR2(80)<br/>*/<br/><br/>data vetCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>VET_SPECIES VARCHAR2(50)<br/>VET_SUB_SPECIES VARCHAR2(40)<br/>VET_SPECIES_F VARCHAR2(50)<br/>&#59<br/>data inactiveCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>DRUG_IDENTIFICATION_NUMBER VARCHAR2(29)<br/>BRAND_NAME VARCHAR2(200)<br/>HISTORY_DATE DATE<br/>&#59<br/><br/>s///<br/>t///","children":[],"custparents":[{"idx":"CodeTask-c4B16FWf4AyuEhHo"},{"idx":"MY6918dcc6-08a1-4c6e-8f2b-c366d6146b3f"}]}]},{"idx":"CodeTask-X6YDm8OOkcS7yZkO","name":"substeps","NodeDescription":"///t<br/>///s<br/>/*details*/<br/>s///<br/>t///","children":[{"idx":"CodeTask-Mt7duGaw1H5VnpS2","name":"Get Path","NodeDescription":"///t<br/>///s<br/>/*Get the path of the current sas program or the current SAS enterprise guide project*/<br/>%macro getThisPath&#59<br/>%global currentPath&#59<br/>%local thisprogramNamePath thisprogramName thisprogramPath thisprojectNamePath thisprojectName thisProjectPath&#59<br/>/*If running SAS enhance editor:<br/>http://support.sas.com/kb/24/301.html<br/>*/<br/>/*a) Get the current SAS program's name and fullpath path<br/>e.g.,  C:\\Users\\Z70\\Desktop\\test.sas<br/>*/<br/>%let thisprogramNamePath =  %sysget(SAS_EXECFILEPath)&#59<br/>/*b) Get the current SAS program's name<br/>e.g.,  test.sas*/<br/>%let thisprogramName =  %sysget(SAS_EXECFILEName)&#59<br/>/*c) using a) substracting b) to have the path of the current sas program<br/>e.g., C:\\Users\\Z70\\Desktop\\*/<br/>%let thisprogramPath = %substr(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&thisprogramNamePath, 1, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%eval(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%length(&thisprogramNamePath)-%length(&thisprogramName)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/>/**/<br/>/*%put >>> &thisprogramNameFullPath&#59*/<br/>/*%put >>> &thisprogramName&#59*/<br/>/*%put >>> &thisprogramPath&#59*/<br/><br/>/*alternatively, if running in sas EG:*/<br/>%let thisprojectNamePath = %sysfunc(dequote(&_clientprojectPath))&#59<br/>%let thisprojectName = %sysfunc(dequote(&_clientprojectName))&#59<br/>%let thisProjectPath = %substr(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&thisprojectNamePath, 1, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%eval(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%length(&thisprojectNamePath)-%length(&thisprojectName)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/><br/>/*%put >>> &thisprojectNamePath&#59*/<br/>/*%put >>> &thisprojectName&#59*/<br/>/*%put >>> &thisProjectPath&#59*/<br/><br/>&nbsp&nbsp&nbsp&nbsp%if %length(&thisprogramPath)=0 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let currentPath = &thisProjectPath&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp%else %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let currentPath = &thisprogramPath&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>%mend getThisPath&#59<br/><br/>s///<br/>t///","children":[],"custparents":[{"idx":"CodeTask-X6YDm8OOkcS7yZkO"}]},{"idx":"CodeTask-I2D66MU3eqQqfaY9","name":"InputVarsTypes","NodeDescription":"///t<br/>///s<br/>/*input var names*/<br/><br/>/*the vars and types are defined according to the page:<br/>https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/drug-product-database/read-file-drug-product-database-data-extract.html<br/>*/<br/>/*<br/>The following vars may exceed the planned length, and the length were redefined<br/><br/>COMPANY_NAME, DESCRIPTOR, PRODUCT_INFORMATION, SUITE_NUMBER, DRUG_IDENTIFICATION_NUMBER, <br/>POST_OFFICE_BOX, UPC, ACCESSION_NUMBER, MFR_CODE, PACKAGE_SIZE<br/>ADDRESS_MAILING_FLAG <br/>ADDRESS_BILLING_FLAG <br/>ADDRESS_NOTIFICATION_FLAG <br/>ADDRESS_OTHER <br/>BASE<br/>CURRENT_STATUS_FLAG<br/>INGREDIENT_SUPPLIED_IND<br/>PEDIATRIC_FLAG<br/>*/<br/><br/>data _null_&#59run&#59<br/><br/>/*https://stats.idre.ucla.edu/sas/faq/how-do-i-read-in-a-character-variable-with-varying-length-in-a-space-delimited-dataset/*/<br/>/*<br/>Max 102<br/>NOTES VARCHAR2(2000)<br/>max 261<br/>INGREDIENT_F VARCHAR2(400)<br/>max 191<br/>INGREDIENT VARCHAR2(240)<br/>max 20<br/>DOSAGE_UNIT_F VARCHAR2(80)<br/>max 1<br/>STRENGTH_TYPE_F VARCHAR2(80)<br/>max 9<br/>DOSAGE_UNIT VARCHAR2(40)<br/>max 1<br/>STRENGTH_TYPE VARCHAR2(40)<br/>max 12<br/>STRENGTH_UNIT VARCHAR2(40)<br/>max 1<br/>BASE VARCHAR2(1)<br/>max 1<br/>INGREDIENT_SUPPLIED_IND VARCHAR2(1)<br/>*/<br/>data ingredCol_raw&#59<br/>/* length name $100. type $100.&#59*/<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>ACTIVE_INGREDIENT_CODE NUMBER(6)<br/>INGREDIENT VARCHAR2(200)<br/>INGREDIENT_SUPPLIED_IND VARCHAR2(2)<br/>STRENGTH VARCHAR2(20)<br/>STRENGTH_UNIT VARCHAR2(20)<br/>STRENGTH_TYPE VARCHAR2(1)<br/>DOSAGE_VALUE VARCHAR2(20)<br/>BASE VARCHAR2(2)<br/>DOSAGE_UNIT VARCHAR2(10)<br/>NOTES VARCHAR2(110)<br/>INGREDIENT_F VARCHAR2(270)<br/>STRENGTH_UNIT_F VARCHAR2(80)<br/>STRENGTH_TYPE_F VARCHAR2(1)<br/>DOSAGE_UNIT_F VARCHAR2(20)<br/>&#59<br/><br/>/*<br/>Max=21<br/>COUNTRY_F VARCHAR2(100)<br/>Max=23<br/>PROVINCE_F VARCHAR2(100)<br/>max=80<br/>COMPANY_NAME VARCHAR2(80)<br/>max 36<br/>CITY_NAME VARCHAR2(60)<br/>max 9<br/>COMPANY_TYPE VARCHAR2(10)<br/>max 18<br/>COUNTRY VARCHAR2(40)<br/>max 27<br/>PROVINCE VARCHAR2(40)<br/>max 20<br/>SUITE_NUMBER VARCHAR2(20)<br/>max 15<br/>POST_OFFICE_BOX VARCHAR2(15)<br/>max 5<br/>MFR_CODE VARCHAR2(5)<br/>max 1<br/>ADDRESS_MAILING_FLAG VARCHAR2(1)<br/>max 1<br/>ADDRESS_BILLING_FLAG VARCHAR2(1)<br/>max 1<br/>ADDRESS_NOTIFICATION_FLAG VARCHAR2(1)<br/>max 1<br/>ADDRESS_OTHER VARCHAR2(1)<br/>*/<br/>data compCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>MFR_CODE VARCHAR2(10)<br/>COMPANY_CODE NUMBER(6)<br/>COMPANY_NAME VARCHAR2(100)<br/>COMPANY_TYPE VARCHAR2(40)<br/>ADDRESS_MAILING_FLAG VARCHAR2(2)<br/>ADDRESS_BILLING_FLAG VARCHAR2(2)<br/>ADDRESS_NOTIFICATION_FLAG VARCHAR2(2)<br/>ADDRESS_OTHER VARCHAR2(2)<br/>SUITE_NUMBER VARCHAR2(40)<br/>STREET_NAME VARCHAR2(80)<br/>CITY_NAME VARCHAR2(40)<br/>PROVINCE VARCHAR2(30)<br/>COUNTRY VARCHAR2(20)<br/>POSTAL_CODE VARCHAR2(20)<br/>POST_OFFICE_BOX VARCHAR2(20)<br/>PROVINCE_F VARCHAR2(30)<br/>COUNTRY_F VARCHAR2(30)<br/>&#59<br/><br/>/*<br/>max 118<br/>BRAND_NAME_F VARCHAR2(300)<br/><br/>*/<br/><br/>/*<br/>max 150<br/>DESCRIPTOR VARCHAR2(150)<br/>max 134<br/>DESCRIPTOR_F VARCHAR2(200)<br/>max 20<br/>CLASS_F VARCHAR2(80)<br/>max 50<br/>PRODUCT_CATEGORIZATION VARCHAR2(80)<br/>max 19<br/>CLASS VARCHAR2(40)<br/>max 29<br/>DRUG_IDENTIFICATION_NUMBER VARCHAR2(29)<br/>max 10<br/>AI_GROUP_NO VARCHAR2(10)<br/>max 5<br/>ACCESSION_NUMBER VARCHAR2(5)<br/>max 1<br/>PEDIATRIC_FLAG VARCHAR2(1)<br/>*/<br/>data drugCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>PRODUCT_CATEGORIZATION VARCHAR2(50)<br/>CLASS VARCHAR2(20)<br/>DRUG_IDENTIFICATION_NUMBER VARCHAR2(40)<br/>BRAND_NAME VARCHAR2(200)<br/>DESCRIPTOR VARCHAR2(200)<br/>PEDIATRIC_FLAG VARCHAR2(2)<br/>ACCESSION_NUMBER VARCHAR2(10)<br/>NUMBER_OF_AIS VARCHAR2(10)<br/>LAST_UPDATE_DATE DATE<br/>AI_GROUP_NO VARCHAR2(20)<br/>CLASS_F VARCHAR2(20)<br/>BRAND_NAME_F VARCHAR2(120)<br/>DESCRIPTOR_F VARCHAR2(140)<br/>&#59<br/><br/>/*<br/>Max 37<br/>STATUS_F VARCHAR2(80)<br/>Max 1<br/>CURRENT_STATUS_FLAG VARCHAR2(1)<br/>*/<br/><br/>data statusCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>CURRENT_STATUS_FLAG VARCHAR2(2)<br/>STATUS VARCHAR2(40)<br/>HISTORY_DATE DATE<br/>STATUS_F VARCHAR2(40)<br/>LOT_NUMBER VARCHAR2(50)<br/>EXPIRATION_DATE DATE<br/>&#59<br/><br/>/*<br/>Max 51<br/>PHARMACEUTICAL_FORM_F VARCHAR2(80)<br/>Max 40<br/>PHARMACEUTICAL_FORM VARCHAR2(40)<br/>*/<br/>data formCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>PHARM_FORM_CODE NUMBER(7)<br/>PHARMACEUTICAL_FORM VARCHAR2(60)<br/>PHARMACEUTICAL_FORM_F VARCHAR2(60)<br/>&#59<br/><br/>/*<br/>Max 1<br/>PACKAGE_SIZE_UNIT_F VARCHAR2(80)<br/>Max 1<br/>PACKAGE_TYPE_F VARCHAR2(80)<br/>Max 80<br/>PRODUCT_INFORMATION VARCHAR2(80)<br/>max 12<br/>PACKAGE_SIZE_UNIT VARCHAR2(40)<br/>max 21<br/>PACKAGE_TYPE VARCHAR2(40)<br/>max 12<br/>UPC VARCHAR2(12)<br/>max 5<br/>PACKAGE_SIZE VARCHAR2(5)<br/>*/<br/>data packageCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>UPC VARCHAR2(20)<br/>PACKAGE_SIZE_UNIT VARCHAR2(20)<br/>PACKAGE_TYPE VARCHAR2(25)<br/>PACKAGE_SIZE VARCHAR2(10)<br/>PRODUCT_INFORMATION VARCHAR2(100)<br/>PACKAGE_SIZE_UNIT_F VARCHAR2(1)<br/>PACKAGE_TYPE_F VARCHAR2(1)<br/>&#59<br/><br/>/*<br/>max 6<br/>PHARMACEUTICAL_STD VARCHAR2(40)<br/>*/<br/>data pharmCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>PHARMACEUTICAL_STD VARCHAR2(10)<br/>&#59<br/><br/><br/>/*<br/>max=61<br/>ROUTE_OF_ADMINISTRATION_F VARCHAR2(80)<br/>*/<br/>data routeCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>ROUTE_OF_ADMINISTRATION_CODE NUMBER(6)<br/>ROUTE_OF_ADMINISTRATION VARCHAR2(40)<br/>ROUTE_OF_ADMINISTRATION_F VARCHAR2(65)<br/>&#59<br/><br/>/*<br/>max 26<br/>SCHEDULE_F VARCHAR2(160)<br/>max 24<br/>SCHEDULE VARCHAR2(40)<br/>*/<br/>data scheduleCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>SCHEDULE VARCHAR2(30)<br/>SCHEDULE_F VARCHAR2(30)<br/>&#59<br/><br/>/*<br/>max=78<br/>TC_ATC VARCHAR2(120)<br/>max=1<br/>TC_ATC_F VARCHAR2(240)<br/>max=55<br/>TC_AHFS_F VARCHAR2(160)<br/>max 8<br/>TC_ATC_NUMBER VARCHAR2(8)<br/>*/<br/>data therCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>TC_ATC_NUMBER VARCHAR2(10)<br/>TC_ATC VARCHAR2(80)<br/>TC_AHFS_NUMBER VARCHAR2(20)<br/>TC_AHFS VARCHAR2(80)<br/>TC_ATC_F VARCHAR2(1)<br/>TC_AHFS_F VARCHAR2(60)<br/>&#59<br/><br/>/*<br/>max=42<br/>VET_SPECIES_F VARCHAR2(160)<br/>max 44<br/>VET_SPECIES VARCHAR2(80)<br/>max 30<br/>VET_SUB_SPECIES VARCHAR2(80)<br/>*/<br/><br/>data vetCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>VET_SPECIES VARCHAR2(50)<br/>VET_SUB_SPECIES VARCHAR2(40)<br/>VET_SPECIES_F VARCHAR2(50)<br/>&#59<br/>data inactiveCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>DRUG_IDENTIFICATION_NUMBER VARCHAR2(29)<br/>BRAND_NAME VARCHAR2(200)<br/>HISTORY_DATE DATE<br/>&#59<br/><br/><br/><br/><br/><br/>s///<br/>t///","children":[{"idx":"CodeTask-X36awYE565uHSHZC","name":"Make input terms","NodeDescription":"///t<br/>///s<br/>/*make input terms of all files*/<br/><br/>data _null_&#59run&#59<br/><br/>/*make input terms of all files*/<br/>%macro MakeInputTermsOfAllFiles (debug=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local NameList2_filesInAZip i target name_fileinAZip debug&#59<br/>&nbsp&nbsp&nbsp&nbsp%let target=inputTerms&#59<br/><br/>&nbsp&nbsp&nbsp&nbspdata &target&#59 length name_file $100. inputTerms $2000.&#59 delete&#59run&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp/*add inactive into the name list. inactive is unique to the zip allfiles_ia. It is only to be used for creating input terms of all files.*/<br/>&nbsp&nbsp&nbsp&nbsp%let NameList2_filesInAZip = &NameList_filesInAZip inactive&#59<br/>&nbsp&nbsp&nbsp&nbsp%put >>>>>>>>>>>>>>>>>> NameList2_filesInAZip = &NameList2_filesInAZip&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 12&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let name_fileinAZip = %scan(&NameList2_filesInAZip, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%put >>>>>>>>>>>>>>>>>> name_fileinAZip = &name_fileinAZip&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%MakeInputTermsOfAFile(name_fileinAZip=&name_fileinAZip, target=MakeInputTermsOfAllFiles_tmp1)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*add the file name and input term into the target file*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata &target&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset &target MakeInputTermsOfAllFiles_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%if &debug ne 1 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc datasets nolist&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete MakeInputTermsOfAllFiles_tmp:&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59quit&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>%mend MakeInputTermsOfAllFiles&#59<br/>%MakeInputTermsOfAllFiles&#59<br/><br/><br/>s///<br/>t///","children":[{"idx":"CodeTask-YlAbuUlT2qggjvtb","name":"Demo make input terms","NodeDescription":"///t<br/>///s<br/>/*demo make input terms like <br/> like 'DRUG_CODE 8.DRUG_IDENTIFICATION_NUMBER $29.BRAND_NAME $200.HISTORY_DATE anydtdte11.'<br/>*/<br/><br/>data inactiveCol_raw&#59<br/> input name :$100. type :$100.&#59<br/> cards&#59<br/>DRUG_CODE NUMBER(8)<br/>DRUG_IDENTIFICATION_NUMBER VARCHAR2(29)<br/>BRAND_NAME VARCHAR2(200)<br/>HISTORY_DATE DATE<br/>&#59<br/>run&#59<br/><br/>/*to split the var names, var type, and var length*/<br/>data _tmp1&#59<br/>&nbsp&nbsp&nbsp&nbspset inactiveCol_raw&#59<br/>&nbsp&nbsp&nbsp&nbspif index(type, '(') > 0 then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsptype1=scan(type, 1, \"(\")&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvarLen =tranwrd(scan(type, 2, \"(\"), \")\", \"\")&#59<br/>&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbspelse type1 = type&#59<br/>&nbsp&nbsp&nbsp&nbsplength varType $20. varInFormat $20. inputvar $100. inputVarType $100. inputTerm $100. varoutFormat $100.&#59<br/>&nbsp&nbsp&nbsp&nbspselect &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='varchar2') varType='$'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='number') varType=''&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='date') varType=''&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspotherwise varType='wrong'&#59 <br/>&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbspif lowcase(type1) ='date' then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvarLen='anydtdte11'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvaroutFormat =strip(name) || ' ' || 'date9.'&#59<br/>&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbspvarInFormat = strip(varType) || strip(varLen) || \".\"&#59<br/>&nbsp&nbsp&nbsp&nbspinputvar = strip(name)&#59<br/>&nbsp&nbsp&nbsp&nbspinputVarType=strip(name) || ' ' || varType&#59<br/>&nbsp&nbsp&nbsp&nbspinputTerm= strip(name) || ' :' || strip(varinformat)&#59<br/>&nbsp&nbsp&nbsp&nbspkeep inputvar inputVarType inputTerm varoutFormat&#59<br/>run&#59<br/><br/>/*to concatenate the input terms together into one string, like 'DRUG_CODE 8.DRUG_IDENTIFICATION_NUMBER $29.BRAND_NAME $200.HISTORY_DATE anydtdte11.'*/<br/>data _tmp2&#59<br/>&nbsp&nbsp&nbsp&nbspset _tmp1 end=last&#59<br/>&nbsp&nbsp&nbsp&nbsplength inputVars $2000. inputVarTypes $2000. inputTerms $2000. inputFormat $2000.&#59<br/>&nbsp&nbsp&nbsp&nbspretain inputVars inputVarTypes inputTerms inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbspif _n_=1 then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputvars=inputvar&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputVarTypes=inputVarType&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputTerms=inputterm&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputFormat=varoutFormat&#59<br/>&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbspelse do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputvars = strip(inputvars) || ' ' || inputvar&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputVarTypes = strip(inputVarTypes) || ' ' || inputVarType&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputTerms  = strip(inputTerms) || ' ' || inputterm&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputFormat  = strip(inputFormat) || ' ' || varoutFormat&#59<br/>&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbspif last&#59<br/>&nbsp&nbsp&nbsp&nbspkeep inputvars inputVarTypes  inputTerms inputFormat&#59<br/>run&#59<br/><br/>/*The macro to make input terms for a given file*/<br/>%macro MakeInputTermsOfAFile (name_fileinAZip=, target=, debug=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local name_fileinAZip target debug&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*to split the var names, var type, and var length*/<br/>&nbsp&nbsp&nbsp&nbspdata MakeInputTermsOfAFile_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset &name_fileinAZip.Col_raw&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif index(type, '(') > 0 then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsptype1=scan(type, 1, \"(\")&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvarLen =tranwrd(scan(type, 2, \"(\"), \")\", \"\")&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspelse type1 = type&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplength varType $20. varInFormat $20. inputvar $100. inputVarType $100. inputTerm $100. varoutFormat $100.&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='varchar2') varType='$'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='number') varType=''&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspwhen (lowcase(type1) ='date') varType=''&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspotherwise varType='wrong'&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif lowcase(type1) ='date' then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvarLen='anydtdte11'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvaroutFormat =strip(name) || ' ' || 'date9.'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspvarInFormat = strip(varType) || strip(varLen) || \".\"&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputvar = strip(name)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputVarType=strip(name) || ' ' || varType&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputTerm= strip(name) || ' :' || strip(varinformat)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspkeep inputvar inputVarType inputTerm varoutFormat&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*to concatenate the input terms together into one string, like 'DRUG_CODE 8.DRUG_IDENTIFICATION_NUMBER $29.BRAND_NAME $200.HISTORY_DATE anydtdte11.'*/<br/>&nbsp&nbsp&nbsp&nbspdata &target&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset MakeInputTermsOfAFile_tmp1 end=last&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplength name_file $100. inputVars $2000. inputVarTypes $2000. inputTerms $2000. inputFormat $2000.&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspretain inputVars inputVarTypes inputTerms inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif _n_=1 then do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputvars=inputvar&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputVarTypes=inputVarType&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputTerms=inputterm&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputFormat=varoutFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspelse do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputvars = strip(inputvars) || ' ' || inputvar&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputVarTypes = strip(inputVarTypes) || ' ' || inputVarType&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputTerms  = strip(inputTerms) || ' ' || inputterm&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinputFormat  = strip(inputFormat) || ' ' || varoutFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspend&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif last&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspname_file = symget('name_fileinAZip')&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspkeep name_file inputvars inputVarTypes  inputTerms inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp%if &debug ne 1 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc datasets nolist&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete MakeInputTermsOfAFile_tmp:&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59quit&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>%mend MakeInputTermsOfAFile&#59<br/>%MakeInputTermsOfAFile(name_fileinAZip=inactive, target=_tmp1)&#59<br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-X36awYE565uHSHZC"}]}],"custparents":[{"idx":"CodeTask-I2D66MU3eqQqfaY9"}]}],"custparents":[{"idx":"CodeTask-Mt7duGaw1H5VnpS2"},{"idx":"CodeTask-X6YDm8OOkcS7yZkO"}]},{"idx":"CodeTask-oh1OMtioF5ewm6BE","name":"1. Download zip file","NodeDescription":"///t<br/>///s<br/>/*Download zip files<br/>the zip files can be downloaded from here:<br/>https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/drug-product-database/what-data-extract-drug-product-database.html<br/><br/>Description of the files can be found here<br/>https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/drug-product-database/read-file-drug-product-database-data-extract.html<br/><br/>The column names of each file can be found here:<br/>https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/drug-product-database/read-file-drug-product-database-data-extract.html<br/>However, the column names are in the webpage as tables and lists. A zip file of the col names has been prepared at:<br/>http://epicanada.x10host.com/epi/downloads/dpdfilecolnames_20191206.zip<br/>*/<br/><br/>%macro downloadPDPFiles(localDataPath=)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local url localDataPath ziplist zipname i&#59<br/>&nbsp&nbsp&nbsp&nbsp%let ziplist =allfiles allfiles_ia allfiles_ap allfiles_dr&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 4&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let zipname = %scan(&ziplist, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%put >>> the current zipname is &zipname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let URL=https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/&zipname..zip&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfilename target \"&localDataPath.\\&zipname..zip\"&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc http  url=\"&URL\"  method=\"get\" out=target&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*download the zip file containing variable names of each data file*/<br/>/*&nbsp&nbsp&nbsp&nbsp%let zipname = dpdfilecolnames_20191206&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp%let URL=http://epicanada.x10host.com/epi/downloads/dpdfilecolnames_20191206.zip&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspfilename target \"&localDataPath.\\&zipname..zip\"&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspproc http  url=\"&URL\"  method=\"get\" out=target&#59 */<br/>/*&nbsp&nbsp&nbsp&nbsprun&#59*/<br/><br/>%mend downloadPDPFiles&#59<br/>%downloadPDPFiles(localDataPath=F:\\Personal\\Dropbox\\Project\\Canada DPD\\SASProject\\Data)&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/><br/>s///<br/>t///","children":[{"idx":"CodeTask-iCn74gMbafLZtnco","name":"Demo. Download a zip","NodeDescription":"///t<br/>///s<br/>/*1. download files*/<br/><br/>/*The DPD files are at<br/>https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/drug.zip<br/>*/<br/><br/>/*Define the target path, the URL, and the target file name*/<br/>%let localDataPath=F:\\Personal\\Dropbox\\Project\\Canada DPD\\SASProject\\Data&#59<br/>%let URL=https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/drug.zip&#59<br/>filename target \"&localDataPath.\\drug.zip\"&#59<br/><br/>/*download and save the file*/<br/>/*https://blogs.sas.com/content/sgf/2018/11/01/proc-http-download-data/ */<br/>proc http  url=\"&URL\"  method=\"get\" out=target&#59 run&#59<br/><br/><br/>%let URL=https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/allfiles.zip&#59<br/>filename target \"&localDataPath.\\allfiles.zip\"&#59<br/>proc http  url=\"&URL\"  method=\"get\" out=target&#59 run&#59<br/><br/><br/><br/><br/><br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-oh1OMtioF5ewm6BE"}]}],"custparents":[{"idx":"CodeTask-X36awYE565uHSHZC"},{"idx":"CodeTask-X6YDm8OOkcS7yZkO"}]},{"idx":"CodeTask-rEdldcGeB1lJRYpL","name":"2. Import Data files","NodeDescription":"///t<br/>///s<br/>/*Import data from all 4 zipfiles*/<br/><br/>Data _null_&#59run&#59<br/><br/>%macro importDataFromAllZips(localDataPath=)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local localDataPath zipname_file  zipname_cols  List_zipnames zipnames_surfix i zipname_file_surfix&#59&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp%let zipnames_surfix = _ _ia _ap _dr&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 4&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let zipname_file_surfix = %scan(&zipnames_surfix, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if &zipname_file_surfix=_ %then %let zipname_file_surfix =&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%importDataInAZip(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=&zipname_file_surfix<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/>%mend importDataFromAllZips&#59<br/><br/>%importDataFromAllZips (localDataPath=&localDataPath)&#59<br/><br/><br/>s///<br/>t///","children":[{"idx":"CodeTask-fMql4j9Pf1A8lp1h","name":"Demo Import files from a zip","NodeDescription":"///t<br/>///s<br/>/*import all data files in a zip*/<br/><br/>Data _null_&#59run&#59<br/><br/>/*&nbsp&nbsp&nbsp&nbsp%let localDataPath=F:\\Personal\\Dropbox\\Project\\Canada DPD\\SASProject\\Data&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp%let zipname_file=allfiles&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp%let zipname_cols=dpdfilecolnames_20191206&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp%let srcfilename=drug&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp%let targetsetname=drug&#59*/<br/><br/>%macro importDataInAZip(localDataPath=, zipname_file_surfix=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local localDataPath zipname_file  zipname_cols srcfilename srcfilenameAndsurfix NameList_filesInAZip zipname_file_surfix i&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%let NameList_filesInAZip = vet ther status schedule route pharm package ingred form drug comp&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i =1 %to 11&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilename= %scan(&NameList_filesInAZip, &i)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%put >>> srcfilename= &srcfilename&#59<br/>/**/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%MakeADataSet(*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, */<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilename=&srcfilename,*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=&zipname_file_surfix*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%importADataFile(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilename=&srcfilename, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=&zipname_file_surfix <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata missingDrugCode_&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset missingDrugCode_&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspname_file=symget('srcfilename')&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsurfix_zipname=symget('zipname_file_surfix')&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspkeep drug_code name_file surfix_zipname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata missingDrugCode&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset missingDrugCode missingDrugCode_&srcfilename.&zipname_file_surfix&#59&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*an additional for inactive.txt*/<br/>&nbsp&nbsp&nbsp&nbsp%if %lowcase(&zipname_file_surfix)=_ia %then %do&#59<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%MakeADataSet(*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, */<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilename=inactive,*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=_ia*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%importADataFile(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilename=inactive, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=_ia <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata missingDrugCode_&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset missingDrugCode_&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspname_file='inactive'&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsurfix_zipname=symget('zipname_file_surfix')&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspkeep drug_code name_file surfix_zipname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata missingDrugCode&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset missingDrugCode missingDrugCode_&srcfilename.&zipname_file_surfix&#59&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/><br/>%mend importDataInAZip&#59<br/>%importDataInAZip(<br/>&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, <br/>&nbsp&nbsp&nbsp&nbspzipname_file_surfix=<br/>)&#59<br/><br/>s///<br/>t///","children":[{"idx":"CodeTask-yBkCi8eFNg8VFTgk","name":"Demo Macro to  Import a data file","NodeDescription":"///t<br/>///s<br/>/*A macro to import a data file */<br/><br/><br/><br/>%macro MakeADataSet(localDataPath=, srcfilename=, zipname_file_surfix=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local localDataPath zipname_file  zipname_cols srcfilename srcfilenameAndsurfix zipname_file_surfix&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*import the data file*/<br/>&nbsp&nbsp&nbsp&nbsp%importADataFile(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilename=&srcfilename, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file_surfix=&zipname_file_surfix <br/>&nbsp&nbsp&nbsp&nbsp)&#59<br/><br/><br/>%mend MakeADataSet&#59<br/>%MakeADataSet(<br/>&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, <br/>&nbsp&nbsp&nbsp&nbspsrcfilename=drug,<br/>&nbsp&nbsp&nbsp&nbspzipname_file_surfix=<br/>)&#59<br/><br/>/*%MakeADataSet(*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplocalDataPath=F:\\Personal\\Dropbox\\Project\\Canada DPD\\SASProject\\Data, */<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_file=allfiles_ia,*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspzipname_cols=&zipname_cols,*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilename=inactive,*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspsrcfilenameAndsurfix=inactive*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp)&#59*/<br/>s///<br/>t///","children":[{"idx":"CodeTask-Ji4G34f6LA6cm6je","name":"Demo1_ImportTxtFileFromZipOld Enconding not used","NodeDescription":"///t<br/>///s<br/>/*<br/>Note: the encoding method is an old approach, and is not used !!!<br/>read from zip file<br/>https://blogs.sas.com/content/sasdummy/2015/05/11/using-filename-zip-to-unzip-and-read-data-files-in-sas/<br/>https://documentation.sas.com/?docsetId=lestmtsglobal&docsetTarget=n1dn0f61yfyzton1l2ngsa1clllr.htm&docsetVersion=9.4&locale=en<br/>most useful is the following:<br/>https://blogs.sas.com/content/sasdummy/2014/01/29/using-filename-zip/<br/>*/<br/>%let localDataPath=F:\\Personal\\Dropbox\\Project\\Canada DPD\\SASProject\\Data&#59<br/>/*1. let SAS know that the source is a zip file which contains files and folders. */<br/>/*specify the zip file*/<br/>filename thezip zip \"&localDataPath.\\allfiles.zip\"&#59<br/><br/>/*Now SAS knows that the nickname 'thezip' refers to the file 'drug.zip', which contains files and folders. <br/>&nbsp&nbsp&nbsp&nbspThese files and folders are called 'members'. e.g., drug.zip contains a file 'drug.txt'. Hence drug.txt is a member of drug.zip<br/>&nbsp&nbsp&nbsp&nbspThe members can be directly cited as <nickname>(<member name>). i.e., in this case, thezip(drug.txt)<br/>&nbsp&nbsp&nbsp&nbspTo input data from this member, there are two ways:<br/>&nbsp&nbsp&nbsp&nbsp1) using customized method:<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata drug&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinfile thezip(drug.txt) dsd missover lRecl=32760 firstobs=1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinput id $6. ...&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspThe problem is that: a)you have to know the # of vars to input, and you have to know the var types.<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspThis is not flexible when read multiple files from a zip, and these multiple files have different # of columns, and data types<br/>&nbsp&nbsp&nbsp&nbsp2) using proc import to input data automatically<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspThis is attractive. However, by far, SAS is stupid enough not ready to allow Proc Import read files from zip directly!<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspThe trick is to:<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspa) copy the member file (as a new file) into the work directory (not as a SAS data set, but as what it is), name the copied file,<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspand give the copied file a nickname. e.g., in the above case,<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspload the file drug.txt into work directory, name it as 'copyof_drug.txt' and give it a nick name 'thetxt'<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfilename thetxt \"%sysfunc(getoption(work))/copyof_drug.txt\" &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  infile  thezip(drug.txt) recfm=n&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  file thetxt&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  input&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  put _infile_&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspb) use PROC IMPORT to input data from the copied file which has the nickname 'thetxt'<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc import out=drug<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdatafile= thetxt<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdbms=dlm   <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreplace&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelimiter=',' &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspgetnames=no&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdatarow=1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>*/<br/><br/>/*a) copy the member file into work directory */<br/>filename thetxt \"%sysfunc(getoption(work))/copyof_drug.txt\" &#59<br/>data _null_&#59<br/>  infile  thezip(drug.txt) recfm=n&#59<br/>  file thetxt&#59<br/>  input&#59<br/>  put _infile_&#59<br/>run&#59<br/><br/>/*b) import the file as a dataset*/<br/>proc import out=drug<br/>&nbsp&nbsp&nbsp&nbspdatafile= thetxt<br/>&nbsp&nbsp&nbsp&nbspdbms=csv   <br/>&nbsp&nbsp&nbsp&nbspreplace&#59<br/>&nbsp&nbsp&nbsp&nbspgetnames=no&#59<br/>&nbsp&nbsp&nbsp&nbspdatarow=1&#59<br/>run&#59<br/>/*proc import out=drug*/<br/>/*&nbsp&nbsp&nbsp&nbspdatafile= thetxt*/<br/>/*&nbsp&nbsp&nbsp&nbspdbms=dlm   */<br/>/*&nbsp&nbsp&nbsp&nbspreplace&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspdelimiter=',' &#59*/<br/>/*&nbsp&nbsp&nbsp&nbspgetnames=no&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspdatarow=1&#59*/<br/>/*run&#59*/<br/><br/>/*It is so awkward. Well done, SAS! */<br/><br/>/*a macro to extract txt files from zips and save as sas datasets*/<br/>%macro importADataFile_old(localDataPath=, zipname=, srctxtname=, targetsetname= )&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local localDataPath zipname srctxtname targetsetname&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*1. let SAS know that the source is a zip file which contains files and folders. */<br/>&nbsp&nbsp&nbsp&nbsp/*specify the zip file*/<br/>&nbsp&nbsp&nbsp&nbspfilename thezip zip \"&localDataPath.\\&zipname..zip\"&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*a) copy the member file into work directory */<br/>&nbsp&nbsp&nbsp&nbspfilename thetxt \"%sysfunc(getoption(work))/importdata_tmp.txt\" &#59<br/>&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp  infile  thezip(&srctxtname..txt) &#59<br/>&nbsp&nbsp&nbsp&nbsp  /*the form.txt contains illegal chars, has to use special encoding to keep going. see the demo encoding problems*/<br/>&nbsp&nbsp&nbsp&nbsp%if %lowcase(&srctxtname) = form or %lowcase(&srctxtname) = comp %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfile thetxt encoding='whebrew'&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp%else %do&#59<br/>&nbsp&nbsp&nbsp&nbsp  &nbsp&nbsp&nbsp&nbspfile thetxt encoding='whebrew'&#59<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp  input&#59<br/>&nbsp&nbsp&nbsp&nbsp  put _infile_&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*b) import the file as a dataset*/<br/>/*&nbsp&nbsp&nbsp&nbspproc import out=&targetsetname*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdatafile= thetxt*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdbms=dlm   */<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreplace&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelimiter=',' &#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspgetnames=no&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdatarow=1&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsprun&#59*/<br/>&nbsp&nbsp&nbsp&nbspproc import out=&targetsetname<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdatafile= thetxt<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdbms=csv   <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreplace&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspgetnames=no&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdatarow=1&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/>%mend importADataFile_old&#59<br/><br/>/*%importADataFile(*/<br/>/*&nbsp&nbsp&nbsp&nbsplocalDataPath=F:\\Personal\\Dropbox\\Project\\Canada DPD\\SASProject\\Data, */<br/>/*&nbsp&nbsp&nbsp&nbspzipname=allfiles, */<br/>/*&nbsp&nbsp&nbsp&nbspsrctxtname=drug, */<br/>/*&nbsp&nbsp&nbsp&nbsptargetsetname=drug */<br/>/*)&#59*/<br/><br/><br/><br/><br/><br/><br/><br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-yBkCi8eFNg8VFTgk"}]},{"idx":"CodeTask-rjun85181GrCcH5f","name":"Demo_ImportTxtFileFromZip - Copy","NodeDescription":"///t<br/>///s<br/>/*Rename the auto var names created by proc import with the real names*/<br/><br/>/*get the real variable names from the colname file, add a column to hold the autonames. That way, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspthe data set Colnames serves as a map of autonames, and real names*/<br/>data _null_&#59<br/>&nbsp&nbsp&nbsp&nbspcall execute(<br/>&nbsp&nbsp&nbsp&nbsp\"data autonames&#59<br/>&nbsp&nbsp&nbsp&nbspset autonames&#59<br/>&nbsp&nbsp&nbsp&nbspautoname='VAR'||strip(_n_)&#59<br/>&nbsp&nbsp&nbsp&nbsprename var1=RealName&#59<br/>&nbsp&nbsp&nbsp&nbspif var = '' then delete&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp\"&nbsp&nbsp&nbsp&nbsp)&#59<br/>run&#59<br/><br/>/*the following is the same*/<br/>/*data autonames&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspset header&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspautoname='VAR'||strip(_n_)&#59*/<br/>/*&nbsp&nbsp&nbsp&nbsprename var1=RealName&#59*/<br/>/*run&#59*/<br/><br/>/*https://communities.sas.com/t5/SAS-Programming/Rename-all-variables-at-once/td-p/533814*/<br/>/*in the imported set, rename the autonames with the real names from the col name files*/<br/>data _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp set autonames end=last&#59<br/>&nbsp&nbsp&nbsp&nbsp if _n_=1 then call execute('proc datasets library=work nolist nodetails&#59modify drug &#59 rename ')&#59<br/>&nbsp&nbsp&nbsp&nbsp call execute(cats(autoname,'=',RealName))&#59<br/>&nbsp&nbsp&nbsp&nbspif last then call execute('&#59quit&#59')&#59<br/>run&#59<br/><br/>proc print data=drug (obs=10)&#59<br/>run&#59<br/><br/>%macro AssignVarNames(data_colnames=, data_thefile=)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local data_colnames data_thefile&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp/*get the real variable names from the colname file, add a column to hold the autonames. That way, <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspthe data set Colnames serves as a map of autonames, and real names*/<br/>&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcall execute(<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\"data &data_colnames&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset &data_colnames&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspautoname='VAR'||strip(_n_)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprename var1=RealName&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif var1='' then delete&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\"&nbsp&nbsp&nbsp&nbsp)&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp set &data_colnames end=last&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp if _n_=1 then call execute(\"proc datasets library=work nolist nodetails&#59modify &data_thefile &#59 rename \")&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp call execute(cats(autoname,'=',RealName))&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif last then call execute('&#59run&#59quit&#59')&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>%mend AssignVarNames&#59<br/><br/>%AssignVarNames(data_colnames=cols_tmp, data_thefile=data_tmp)&#59<br/><br/>proc print data=data_tmp(obs=10)&#59run&#59<br/><br/><br/><br/><br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-yBkCi8eFNg8VFTgk"}]},{"idx":"CodeTask-eI6Dy1N76kA47hQl","name":"Encoding problem","NodeDescription":"///t<br/>///s<br/><br/>/*In allfiles.zip, the file form.txt gives trouble when import. The forth column was screwed up and contains illegal characters that are not in utf-8 <br/>&nbsp&nbsp&nbsp&nbspcode collection. Consequently, it reports error when transfering the txt file into a dataset. The SAS program was halted, nothing produced.<br/>&nbsp&nbsp&nbsp&nbspTo solve it, when writing the txt file in the work dir, use  the statement ( file thetxt encoding='whebrew'&#59 ) or <br/>&nbsp&nbsp&nbsp&nbspThis will force to write the source txt to a file with hebrew encoding. <br/>&nbsp&nbsp&nbsp&nbspSuch a file can be read into a dataset with utf-8 coding, those illegal chars skipped.<br/>&nbsp&nbsp&nbsp&nbspWell, it is a make shift, as values in the 4th column are not in French anymore. That column should be discarded.&nbsp&nbsp&nbsp&nbsp<br/>*/<br/><br/>filename thezip zip \"&localDataPath.\\allfiles.zip\"&#59<br/>filename thetxt \"%sysfunc(getoption(work))/copyof_drug.txt\"  &#59<br/><br/>/*the following part also works. but the result values in col4 is awkward*/<br/>/*data _null_&#59*/<br/>/*  infile  thezip(form.txt) recfm=n &#59*/<br/>/*  file thetxt encoding='ms-950'&#59*/<br/>/*  input&#59*/<br/>/*  put _infile_&#59*/<br/>/*run&#59*/<br/>/*data form&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspinfile thetxt delimiter = ',' MISSOVER DSD lrecl=99000 encoding='wlatin2'&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspformat var1 $7. var2 $5. Var3 $25. Var4 $29.&#59*/<br/>/*&nbsp&nbsp&nbsp&nbspinput var1 $ var2 $ var3 $ var4 $&#59*/<br/>/*run&#59*/<br/><br/>/*https://support.sas.com/documentation/onlinedoc/dfdmstudio/2.5/dmpdmsug/Content/dfU_Encodings_SAS.html<br/>&nbsp&nbsp&nbsp&nbspwhen write the file, try whebrew or wgreek  (file thetxt encoding='whebrew'&#59 file thetxt encoding='wgreek' )<br/>*/<br/>data _null_&#59<br/>  infile  thezip(form.txt) recfm=n &#59<br/>  file thetxt encoding='whebrew'&#59 <br/>  input&#59<br/>  put _infile_&#59<br/>run&#59<br/><br/>proc import out=drug<br/>&nbsp&nbsp&nbsp&nbspdatafile= thetxt<br/>&nbsp&nbsp&nbsp&nbspdbms=dlm   <br/>&nbsp&nbsp&nbsp&nbspreplace&#59<br/>&nbsp&nbsp&nbsp&nbspdelimiter=',' &#59<br/>&nbsp&nbsp&nbsp&nbspgetnames=no&#59<br/>&nbsp&nbsp&nbsp&nbspdatarow=1&#59<br/>run&#59<br/><br/><br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-yBkCi8eFNg8VFTgk"}]},{"idx":"CodeTask-kigREePK2bXrsbh5","name":"Encoding 2 better solution","NodeDescription":"///t<br/>///s<br/>data _null_&#59run&#59<br/><br/>filename thezip zip \"&localDataPath.\\allfiles.zip\"&#59<br/>filename thetxt \"%sysfunc(getoption(work))/copyof_drug.txt\" &#59<br/><br/><br/>/*Perl expression<br/>https://documentation.sas.com/?docsetId=lefunctionsref&docsetTarget=p1vz3ljudbd756n19502acxazevk.htm&docsetVersion=9.4&locale=en#n0cw1uzj8e88vpn10ba13g63be9t<br/><br/>&nbsp&nbsp&nbsp&nbspSome of the characters are messed up. So the idea is to read the lines, clean the lines by replacing illegal chars with @<br/>&nbsp&nbsp&nbsp&nbspand write the cleaned line into the file 'thetxt'. <br/>*/<br/>data xx1&#59<br/>  infile  thezip(drug.txt) &#59<br/>  file thetxt &#59<br/>  input&#59<br/>&nbsp&nbsp&nbsp&nbspa = prxchange('s/[\\x80-\\xFF]/@/', -1, _infile_)&#59<br/>  put a&#59<br/>run&#59<br/><br/>/*b) import the file as a dataset*/<br/>proc import out=drug<br/>&nbsp&nbsp&nbsp&nbspdatafile= thetxt<br/>&nbsp&nbsp&nbsp&nbspdbms=dlm   <br/>&nbsp&nbsp&nbsp&nbspreplace&#59<br/>&nbsp&nbsp&nbsp&nbspdelimiter=','&#59<br/>&nbsp&nbsp&nbsp&nbspgetnames=no&#59<br/>&nbsp&nbsp&nbsp&nbspdatarow=1&#59<br/>run&#59<br/><br/>%print(data=drug)&#59<br/>%distinct(data=drug, target=test4, vars=var1)&#59<br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-yBkCi8eFNg8VFTgk"}]}],"custparents":[{"idx":"CodeTask-fMql4j9Pf1A8lp1h"}]},{"idx":"CodeTask-S9vxTt2hTDhufTxN","name":"Demo2_ImportTxtFileFromZip keep ASCII0-127","NodeDescription":"///t<br/>///s<br/>/*read from zip file<br/>https://blogs.sas.com/content/sasdummy/2015/05/11/using-filename-zip-to-unzip-and-read-data-files-in-sas/<br/>https://documentation.sas.com/?docsetId=lestmtsglobal&docsetTarget=n1dn0f61yfyzton1l2ngsa1clllr.htm&docsetVersion=9.4&locale=en<br/>most useful is the following:<br/>https://blogs.sas.com/content/sasdummy/2014/01/29/using-filename-zip/<br/>*/<br/>/*%let localDataPath=F:\\Personal\\Dropbox\\Project\\Canada DPD\\SASProject\\Data&#59*/<br/>/*1. let SAS know that the source is a zip file which contains files and folders. */<br/>/*specify the zip file*/<br/>filename thezip zip \"&localDataPath.\\allfiles.zip\"&#59<br/><br/>/*Now SAS knows that the nickname 'thezip' refers to the file 'drug.zip', which contains files and folders. <br/>&nbsp&nbsp&nbsp&nbspThese files and folders are called 'members'. e.g., drug.zip contains a file 'drug.txt'. Hence drug.txt is a member of drug.zip<br/>&nbsp&nbsp&nbsp&nbspThe members can be directly cited as <nickname>(<member name>). i.e., in this case, thezip(drug.txt)<br/>&nbsp&nbsp&nbsp&nbspTo input data from this member, there are two ways:<br/>&nbsp&nbsp&nbsp&nbsp1) using customized method:<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata drug&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinfile thezip(drug.txt) dsd missover lRecl=32760 firstobs=1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinput id $6. ...&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspThe problem is that: a)you have to know the # of vars to input, and you have to know the var types.<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspThis is not flexible when read multiple files from a zip, and these multiple files have different # of columns, and data types<br/>&nbsp&nbsp&nbsp&nbsp2) using proc import to input data automatically<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspThis is attractive. However, by far, SAS is stupid enough not ready to allow Proc Import read files from zip directly!<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspThe trick is to:<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspa) copy the member file (as a new file) into the work directory (not as a SAS data set, but as what it is), name the copied file,<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspand give the copied file a nickname. e.g., in the above case,<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspload the file drug.txt into work directory, name it as 'copyof_drug.txt' and give it a nick name 'thetxt'<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfilename thetxt \"%sysfunc(getoption(work))/copyof_drug.txt\" &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  infile  thezip(drug.txt) recfm=n&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  file thetxt&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  input&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  put _infile_&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspb) use PROC IMPORT to input data from the copied file which has the nickname 'thetxt'<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc import out=drug<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdatafile= thetxt<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdbms=dlm   <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreplace&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelimiter=',' &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspgetnames=no&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdatarow=1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>*/<br/><br/>/*a) copy the member file into work directory <br/>&nbsp&nbsp&nbsp&nbspThe original data contians French letters, which in some cases causing encoding error using proc import.<br/>&nbsp&nbsp&nbsp&nbsphowever, using infile - input is ok! <br/>*/<br/>filename thetxt \"%sysfunc(getoption(work))/copyof_form.txt\" &#59<br/>data _null_&#59<br/>  &nbsp&nbsp&nbsp&nbspinfile  thezip(vet.txt)&#59<br/>  &nbsp&nbsp&nbsp&nbspfile thetxt&#59<br/>&nbsp&nbsp&nbsp&nbspinput&#59<br/>&nbsp&nbsp&nbsp&nbspput _infile_&#59<br/>run&#59<br/><br/>/*b) get the input format*/<br/>data INPUTTERMS_vet&#59<br/>&nbsp&nbsp&nbsp&nbspset INPUTTERMS&#59<br/>&nbsp&nbsp&nbsp&nbspif lowcase(strip(name_file)) = 'vet'&#59<br/>&nbsp&nbsp&nbsp&nbspcall symput('inputterms', inputterms)&#59<br/>&nbsp&nbsp&nbsp&nbspcall symput('inputvartypes', inputvartypes)&#59<br/>run&#59<br/><br/>%put >>> inputterms = &inputterms&#59<br/>%put >>> inputvartypes = &inputvartypes&#59<br/><br/><br/>/*c) input data into the table*/<br/>data vet error&#59<br/>&nbsp&nbsp&nbsp&nbspinfile thetxt dsd missover&#59<br/>&nbsp&nbsp&nbsp&nbspinput &inputterms&#59<br/>&nbsp&nbsp&nbsp&nbspif drug_code=. then output error&#59<br/>&nbsp&nbsp&nbsp&nbspelse output vet&#59<br/>run&#59<br/><br/><br/>/*a macro to extract txt files from zips and save as sas datasets*/<br/>%macro importADataFile (localDataPath=, srcfilename=, zipname_file_surfix=)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local localDataPath zipname srctxtname targetsetname inputterms srcfilename zipname_file_surfix inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp%let zipname=allfiles&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp%let srctxtname=&srcfilename&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp/*inactive is a special case*/<br/>&nbsp&nbsp&nbsp&nbsp%if &srcfilename=inactive %then %let srctxtname=inactive&#59<br/>&nbsp&nbsp&nbsp&nbsp%let targetsetname=&srctxtname&#59<br/><br/><br/>&nbsp&nbsp&nbsp&nbsp/*1. let SAS know that the source is a zip file which contains files and folders. */<br/>&nbsp&nbsp&nbsp&nbsp/*specify the zip file*/<br/>&nbsp&nbsp&nbsp&nbspfilename thezip zip \"&localDataPath.\\&zipname..zip\"&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*a) copy the member file into work directory */<br/>&nbsp&nbsp&nbsp&nbspfilename thetxt \"%sysfunc(getoption(work))/importdata_tmp.txt\" &#59<br/>&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp  &nbsp&nbsp&nbsp&nbspinfile  thezip(&srctxtname..txt) &#59<br/>&nbsp&nbsp&nbsp&nbsp  &nbsp&nbsp&nbsp&nbspfile thetxt&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinput&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspput _infile_&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*b) get the input format*/<br/>&nbsp&nbsp&nbsp&nbspdata _null_&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset INPUTTERMS&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif lowcase(strip(name_file)) = lowcase(strip(symget('srcfilename')))&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcall symput('inputterms', inputterms)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcall symput('inputvartypes', inputvartypes)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif strip(inputFormat) ne '' then call symput('inputFormat', inputFormat)&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%put >>> inputterms=&inputterms&#59<br/>&nbsp&nbsp&nbsp&nbsp%put >>> inputvartypes=&inputvartypes&#59<br/>&nbsp&nbsp&nbsp&nbsp%put >>> inputFormat=&inputFormat&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp/*c) input data into the table*/<br/>&nbsp&nbsp&nbsp&nbspdata &targetsetname missingdrugcode_&targetsetname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinfile thetxt dsd missover&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinput &inputterms &#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if %length(&inputFormat) ne 0 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspformat &inputFormat&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspif drug_code = . then output missingdrugcode_&targetsetname&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspelse output  &targetsetname&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp%let inputterms=&#59%let inputvartypes=&#59 %let inputFormat=&#59<br/><br/>%mend importADataFile&#59<br/><br/>%importADataFile(<br/>&nbsp&nbsp&nbsp&nbsplocalDataPath=&localDataPath, <br/>&nbsp&nbsp&nbsp&nbspsrcfilename=vet, <br/>&nbsp&nbsp&nbsp&nbspzipname_file_surfix= <br/>)&#59<br/><br/><br/><br/><br/><br/><br/><br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-fMql4j9Pf1A8lp1h"}]}],"custparents":[{"idx":"CodeTask-rEdldcGeB1lJRYpL"}]}],"custparents":[{"idx":"CodeTask-oh1OMtioF5ewm6BE"},{"idx":"CodeTask-X6YDm8OOkcS7yZkO"}]},{"idx":"CodeTask-dAV2j9HnmQNvh1Kf","name":"3.Merge data","NodeDescription":"///t<br/>///s<br/>/*Link the databases*/<br/><br/>/*to have all drug codes ever appeared in any of the data file. Presumably, all drug codes should appear in the data drug, but who knows!*/<br/>Data _null_&#59run&#59<br/><br/>%LinkAllZips(localDataPath=&localDataPath)<br/><br/><br/><br/><br/><br/><br/><br/>s///<br/>t///","children":[{"idx":"CodeTask-vyCEOtMgyCG4n5ym","name":"Demo get all drug_cods","NodeDescription":"///t<br/>///s<br/>/*Link the databases*/<br/><br/>/*to have all drug codes ever appeared in any of the data file. Presumably, all drug codes should appear in the data drug, but who knows!*/<br/>%let zipname_file_surfix=&#59<br/><br/>%macro makedrugcodelist(zipname_file_surfix=, debug=)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%local NameList_filesInAZip i srcfilename srcfilenameAndsurfix zipname_file_surfix debug&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata makedrugcodelist_tmp1&#59length DRUG_CODE 8. &#59delete&#59run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let NameList_filesInAZip = vet ther status schedule route pharm package ingred form drug comp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 11&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilename= %scan(&NameList_filesInAZip, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilenameAndsurfix=&srcfilename.&zipname_file_surfix&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata makedrugcodelist_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset makedrugcodelist_tmp1 &srcfilenameAndsurfix(keep=drug_code)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sort data=makedrugcodelist_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspby DRUG_CODE&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sql&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table drugcodelist&zipname_file_surfix as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect distinct drug_code<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom makedrugcodelist_tmp1<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*for the zip _ia, there is an additional file called inactive*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if %lowcase(&zipname_file_surfix) =_ia %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata makedrugcodelist_tmp3&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset drugcodelist&zipname_file_surfix inactive&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sql&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table drugcodelist&zipname_file_surfix as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect distinct drug_code<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom makedrugcodelist_tmp3<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if &debug ne 1 %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc datasets&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete makedrugcodelist_tmp:&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59quit&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*check if all drug_code can be found in the file 'drug'. Not really!*/<br/>/*&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%compAB(a=drug, b=drugcodelist&zipname_file_surfix, target=test, vars=drug_code)&#59&nbsp&nbsp&nbsp&nbsp*/<br/>%mend makedrugcodelist&#59<br/>%makedrugcodelist(zipname_file_surfix=&zipname_file_surfix, debug=1)&#59<br/><br/><br/><br/><br/><br/><br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-dAV2j9HnmQNvh1Kf"}]},{"idx":"CodeTask-3CoTKTUYoRWzfpp2","name":"Demo linkAllFiles of a Zip","NodeDescription":"///t<br/>///s<br/>/*Link the databases*/<br/><br/>/*to have all drug codes ever appeared in any of the data file. Presumably, all drug codes should appear in the data drug, but who knows!*/<br/><br/><br/>%macro linkfilesInAZip(zipname_file_surfix=)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%local NameList_filesInAZip i srcfilename srcfilenameAndsurfix zipname_file_surfix&#59<br/><br/>&nbsp&nbsp&nbsp&nbspdata linkedfile&#59 set drugcodelist&zipname_file_surfix&#59 if drug_code ne ''&#59 run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%let NameList_filesInAZip = vet ther status schedule route pharm package ingred form drug comp&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 11&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilename= %scan(&NameList_filesInAZip, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let srcfilenameAndsurfix=&srcfilename.&zipname_file_surfix&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sql&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table linkedfile  as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect *<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom linkedfile t1<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspleft join<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&srcfilenameAndsurfix t2<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspon<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspt1.drug_code = t2.drug_code<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/>&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp/*for the zip _ia, there is an additional file called inactive*/<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%if %lowcase(&zipname_file_surfix) = _ia %then %do&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sql&#59 <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table linkedfile  as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect *<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom linkedfile t1<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspleft join<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspinactive t2<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspon<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspt1.drug_code = t2.drug_code<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc sort data=linkedfile&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspby drug_code last_update_date&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>%mend linkfilesInAZip&#59<br/>/*%linkfilesInAZip(zipname_file_surfix=)&#59*/<br/><br/><br/><br/><br/><br/><br/><br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-dAV2j9HnmQNvh1Kf"}]},{"idx":"CodeTask-lo7WJf4bfLMhE1Ol","name":"CheckVar Length","NodeDescription":"///t<br/>///s<br/>/*Check the length of vars. Make sure that the planned length of each is not too long, not too short*/<br/><br/>libname c \"c:\\users\\z70\\desktop\"&#59<br/><br/>Proc datasets lib=c&#59<br/>&nbsp&nbsp&nbsp&nbspcontents data=dad&#59<br/>run&#59<br/><br/>%macro maxLenvar(var=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local var&#59<br/>&nbsp&nbsp&nbsp&nbspdata maxLenvar_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset c.dad (keep=&var )&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplen=length(&var)&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbspproc sql&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspcreate table maxLenvar as<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspselect <br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspmax(len) as var_max<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspfrom maxLenvar_tmp1<br/>&nbsp&nbsp&nbsp&nbsp&#59<br/>&nbsp&nbsp&nbsp&nbspquit&#59run&#59<br/><br/>&nbsp&nbsp&nbsp&nbspproc datasets nolist&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete maxLenvar_tmp1&#59<br/>&nbsp&nbsp&nbsp&nbsprun&#59quit&#59<br/><br/>%mend maxLenvar&#59<br/><br/><br/>%macro maxLenVarBatch(vars=, lens=)&#59<br/>&nbsp&nbsp&nbsp&nbsp%local vars lens var len i&#59<br/><br/>&nbsp&nbsp&nbsp&nbspdata maxLenvars&#59 length var $100. len 8. var_max 8.&#59delete&#59run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%do i = 1 %to 80&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let var=%scan(&vars, &i)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%let len=%scan(&lens, &i)&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%put >>> var=&var&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%put >>> len =&len&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp%maxLenvar(var=&var)&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata maxlenvar&#59set maxlenvar&#59 var=symget('var')&#59 len = &len&#59 run&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdata maxLenvars&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspset maxLenvars maxLenvar&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspproc datasets nolist&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspdelete maxlenvar&#59<br/>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsprun&#59<br/><br/>&nbsp&nbsp&nbsp&nbsp%end&#59<br/><br/>%mend&#59<br/>%maxLenVarBatch(<br/>vars=<br/>ACCESSION_NUMBER<br/>ACTIVE_INGREDIENT_CODE<br/>ADDRESS_BILLING_FLAG<br/>ADDRESS_MAILING_FLAG<br/>ADDRESS_NOTIFICATION_FLAG<br/>ADDRESS_OTHER<br/>AI_GROUP_NO<br/>BASE<br/>BRAND_NAME<br/>BRAND_NAME_F<br/>CITY_NAME<br/>CLASS<br/>CLASS_F<br/>COMPANY_CODE<br/>COMPANY_NAME<br/>COMPANY_TYPE<br/>COUNTRY<br/>COUNTRY_F<br/>CURRENT_STATUS_FLAG<br/>DESCRIPTOR<br/>DESCRIPTOR_F<br/>DOSAGE_UNIT<br/>DOSAGE_UNIT_F<br/>DOSAGE_VALUE<br/>DRUG_CODE<br/>DRUG_IDENTIFICATION_NUMBER<br/>EXPIRATION_DATE<br/>HISTORY_DATE<br/>INGREDIENT<br/>INGREDIENT_F<br/>INGREDIENT_SUPPLIED_IND<br/>LAST_UPDATE_DATE<br/>LOT_NUMBER<br/>MFR_CODE<br/>NOTES<br/>NUMBER_OF_AIS<br/>PACKAGE_SIZE<br/>PACKAGE_SIZE_UNIT<br/>PACKAGE_SIZE_UNIT_F<br/>PACKAGE_TYPE<br/>PACKAGE_TYPE_F<br/>PEDIATRIC_FLAG<br/>PHARMACEUTICAL_FORM<br/>PHARMACEUTICAL_FORM_F<br/>PHARMACEUTICAL_STD<br/>PHARM_FORM_CODE<br/>POSTAL_CODE<br/>POST_OFFICE_BOX<br/>PRODUCT_CATEGORIZATION<br/>PRODUCT_INFORMATION<br/>PROVINCE<br/>PROVINCE_F<br/>ROUTE_OF_ADMINISTRATION<br/>ROUTE_OF_ADMINISTRATION_CODE<br/>ROUTE_OF_ADMINISTRATION_F<br/>SCHEDULE<br/>SCHEDULE_F<br/>SRC<br/>STATUS<br/>STATUS_F<br/>STREET_NAME<br/>STRENGTH<br/>STRENGTH_TYPE<br/>STRENGTH_TYPE_F<br/>STRENGTH_UNIT<br/>STRENGTH_UNIT_F<br/>SUITE_NUMBER<br/>TC_AHFS<br/>TC_AHFS_F<br/>TC_AHFS_NUMBER<br/>TC_ATC<br/>TC_ATC_F<br/>TC_ATC_NUMBER<br/>UPC<br/>VET_SPECIES<br/>VET_SPECIES_F<br/>VET_SUB_SPECIES<br/>createDate<br/>program<br/>project,<br/><br/>lens=<br/>10<br/>8<br/>2<br/>2<br/>2<br/>2<br/>20<br/>2<br/>200<br/>120<br/>40<br/>20<br/>20<br/>8<br/>100<br/>40<br/>20<br/>30<br/>2<br/>200<br/>140<br/>10<br/>20<br/>20<br/>8<br/>40<br/>8<br/>8<br/>200<br/>270<br/>2<br/>8<br/>50<br/>10<br/>110<br/>10<br/>10<br/>20<br/>1<br/>25<br/>1<br/>2<br/>60<br/>60<br/>10<br/>8<br/>20<br/>20<br/>50<br/>100<br/>30<br/>30<br/>40<br/>8<br/>65<br/>30<br/>30<br/>3<br/>40<br/>40<br/>80<br/>20<br/>1<br/>1<br/>20<br/>80<br/>40<br/>80<br/>60<br/>20<br/>80<br/>1<br/>10<br/>20<br/>50<br/>50<br/>40<br/>8<br/>12<br/>22<br/>)<br/><br/><br/>s///<br/>t///","custparents":[{"idx":"CodeTask-dAV2j9HnmQNvh1Kf"}]}],"custparents":[{"idx":"CodeTask-rEdldcGeB1lJRYpL"},{"idx":"CodeTask-X6YDm8OOkcS7yZkO"}]}],"custparents":[{"idx":"ProjectCollection-Y3iB6Xce72IV56WA"},{"idx":"ProjectCollection-Y3iB6Xce72IV56WA"}]},{"idx":"MYbff59f3a-6218-4848-b2a1-1d3af1daae7b","name":"Where are the files","custparents":[{"idx":"ProjectCollection-Y3iB6Xce72IV56WA"}],"NodeDescription":"<p>///t</p><p>F:\\Personal\\Dropbox\\Project\\Canada DPD\\RProject</p><p>t///</p>"},{"idx":"MYe29e2792-7b2a-40df-b70e-729da5def82d","name":"Download files","custparents":[{"idx":"ProjectCollection-Y3iB6Xce72IV56WA"}],"NodeDescription":"<p>///t</p><p>download a file</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># download and unzip thezipfiles without saving to local</div><div class=\"ql-code-block\">#name_thezip &lt;- \"F:/Personal/Dropbox/Project/Canada DPD/SASProject/Data/allfiles.zip\"</div><div class=\"ql-code-block\">name_thezip &lt;- \"https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/allfiles.zip\"</div><div class=\"ql-code-block\">name_thetxt &lt;- \"form.txt\"</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">#https://rpubs.com/otienodominic/398952</div><div class=\"ql-code-block\">#create a tmp file</div><div class=\"ql-code-block\">tmpzip &lt;- tempfile()</div><div class=\"ql-code-block\">download.file(name_thezip, tmpzip)</div></div><p><br></p><p>read a file from the zip and turn it into a dataframe</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">name_thetxt &lt;- \"form.txt\"</div><div class=\"ql-code-block\">data &lt;- read.table(unz(tmpzip, name_thetxt),  header=F, quote=\"\\\"\", sep=\",\")</div></div><p><br></p><p>order data by the first variable, and rename the variable names with a collection</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">#https://stackoverflow.com/questions/12460938/r-reading-in-a-zip-data-file-without-unzipping-it</div><div class=\"ql-code-block\">#data &lt;- read.table(unz(name_thezip, name_thetxt), nrows=10, header=F, quote=\"\\\"\", sep=\",\")</div><div class=\"ql-code-block\">#order by v1</div><div class=\"ql-code-block\">data &lt;- data[order(data$V1)]</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">#rename the colnames</div><div class=\"ql-code-block\">varnames_drug &lt;- c(\"DRUG_CODE\", \"FORM_CODE\", \"PHARMACEUTICAL_FORM\", \"PHARMACEUTICAL_FORM_F\")</div><div class=\"ql-code-block\">colnames(data) &lt;- varnames_drug</div><div class=\"ql-code-block\">head(data)</div></div><p><br></p><p>t///</p>"}]}