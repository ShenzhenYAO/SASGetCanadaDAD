[{"idx":"d59d62d3-5521-4283-9f76-c3775099d327","name":"CanadaDPD R 20200106","children":[{"idx":"MYf09501cf-8679-4e33-96f3-4d344ee3705f","name":"Settings","custparents":[{"idx":"d59d62d3-5521-4283-9f76-c3775099d327"}],"NodeDescription":"<p>///t</p><p>F:\\Personal\\Dropbox\\Project\\Canada DPD\\RProject\\main.r</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">    # remove all objects from the memory</div><div class=\"ql-code-block\" data-language=\"plain\">    rm(list=ls())</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # Prevent the default behavior of R that, in dataframe, converting charactor values into factors</div><div class=\"ql-code-block\" data-language=\"plain\">    options(stringsAsFactors = FALSE)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # loading self-developped r functions</div><div class=\"ql-code-block\" data-language=\"plain\">    source('tools.r')</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # load a package to deal with JSON objects </div><div class=\"ql-code-block\" data-language=\"plain\">    # do not use the package 'rjson'. It cannot handle dfs with nested lists</div><div class=\"ql-code-block\" data-language=\"plain\">    library('jsonlite')</div><div class=\"ql-code-block\" data-language=\"plain\">    # load a package to save and extract files from zips</div><div class=\"ql-code-block\" data-language=\"plain\">    # install.packages('zip')</div><div class=\"ql-code-block\" data-language=\"plain\">    library('zip')</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    #initializae the dpd.list</div><div class=\"ql-code-block\" data-language=\"plain\">    dpd.list &lt;- list()</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # define name_thezip</div><div class=\"ql-code-block\" data-language=\"plain\">    indexcolname &lt;- 'DRUG_CODE'</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # define the names of the zip files</div><div class=\"ql-code-block\" data-language=\"plain\">    zipnames &lt;- c('allfiles.zip', 'allfiles_ap.zip', 'allfiles_dr.zip','allfiles_ia.zip')</div><div class=\"ql-code-block\" data-language=\"plain\">    </div></div><p>t///</p>","children":[{"idx":"MY478eed30-913c-44d0-80b6-33a441dc3abf","name":"Add files into the final dpd json","custparents":[{"idx":"MYf09501cf-8679-4e33-96f3-4d344ee3705f"}],"children":[{"idx":"MY231e7ce0-236c-487d-b3ef-bd8437a549de","name":"Add dpd.json into a zip file","custparents":[{"idx":"MY478eed30-913c-44d0-80b6-33a441dc3abf"},{"idx":"MY478eed30-913c-44d0-80b6-33a441dc3abf"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">zipfile &lt;- 'data/dpdjson.zip'</div><div class=\"ql-code-block\">    files &lt;- 'data/dpd.json'</div><div class=\"ql-code-block\">    # https://cran.r-project.org/web/packages/zip/zip.pdf</div><div class=\"ql-code-block\">    zip(zipfile, files )</div></div><p><br></p><p>t///</p>"},{"idx":"MY795ab5eb-a0e7-4558-adf0-f42c7ee5da4b","name":"substeps","custparents":[{"idx":"MY478eed30-913c-44d0-80b6-33a441dc3abf"}],"children":[{"idx":"MYea533509-4fe4-4456-888d-8b490ec0f90d","name":"zip2dfjson_dpd_my() get a local dpd.json","custparents":[{"idx":"MYcfc1d675-4557-42aa-b4fe-494fcf08a5c1"},{"idx":"MY55182c52-062b-4571-a63d-81660650f2df"},{"idx":"MY4b28b50f-a08a-496e-bfde-a821ee4103a1"},{"idx":"MY795ab5eb-a0e7-4558-adf0-f42c7ee5da4b"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">#unzip all tables, merge as a big zip, and save as a json</div><div class=\"ql-code-block\" data-language=\"plain\">zip2dfjson_dpd_my &lt;- function( name_thezip, dpd.df, indexcolname) {</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">print('start zip2dfjson_dpd_my ===============================')</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">#make a surfix like '_', or '_ap', etc.</div><div class=\"ql-code-block\" data-language=\"plain\">thezipsurfix &lt;- sub('\\\\.zip$', '', name_thezip)</div><div class=\"ql-code-block\" data-language=\"plain\">thezipsurfix &lt;- sub('allfiles', '', thezipsurfix)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># download the zip file</div><div class=\"ql-code-block\" data-language=\"plain\">tmpzip &lt;- downloadzip(name_thezip)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># make a dataframe with tablename, varname, and vartype of all tables</div><div class=\"ql-code-block\" data-language=\"plain\">tables.df &lt;- maketableinfo_dpd_my()</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># get unique table names</div><div class=\"ql-code-block\" data-language=\"plain\"># get a vector of all values in the column 'table' as a vector</div><div class=\"ql-code-block\" data-language=\"plain\">tablenames.vector &lt;- tables.df[,'table']</div><div class=\"ql-code-block\" data-language=\"plain\"># from above, get the unique values</div><div class=\"ql-code-block\" data-language=\"plain\">uniquetablenames.vector = unique(tablenames.vector)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># drop the tablename 'inactive' if the data zip is not for inactive drugs</div><div class=\"ql-code-block\" data-language=\"plain\">if (name_thezip != 'allfiles_ia.zip') {</div><div class=\"ql-code-block\" data-language=\"plain\">uniquetablenames.list &lt;-lapply(uniquetablenames.vector, function(x){x[!x == \"inactive\"]})</div><div class=\"ql-code-block\" data-language=\"plain\">#Note: lapply() results in a list, need to convert it back to a vector</div><div class=\"ql-code-block\" data-language=\"plain\">uniquetablenames.vector = unlist(uniquetablenames.list)</div><div class=\"ql-code-block\" data-language=\"plain\"># uniquetablenames.vector</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">filecount &lt;- 0</div><div class=\"ql-code-block\" data-language=\"plain\"># loop for each table name, import data into dfs named by the tablename (e.g.,thedata_drug.df )</div><div class=\"ql-code-block\" data-language=\"plain\">for (thetablename in uniquetablenames.vector) {</div><div class=\"ql-code-block\" data-language=\"plain\"># print(thetablename)</div><div class=\"ql-code-block\" data-language=\"plain\">filecount= filecount + 1</div><div class=\"ql-code-block\" data-language=\"plain\">#unzip the table, convert to a df, and merge it into a big df</div><div class=\"ql-code-block\" data-language=\"plain\">mergedtmp.df &lt;- addfile2df_dpd_my(</div><div class=\"ql-code-block\" data-language=\"plain\">tables.df,</div><div class=\"ql-code-block\" data-language=\"plain\">thetablename,</div><div class=\"ql-code-block\" data-language=\"plain\">thezipsurfix,</div><div class=\"ql-code-block\" data-language=\"plain\">tmpzip,</div><div class=\"ql-code-block\" data-language=\"plain\">indexcolname,</div><div class=\"ql-code-block\" data-language=\"plain\">filecount,</div><div class=\"ql-code-block\" data-language=\"plain\">mergedtmp.df</div><div class=\"ql-code-block\" data-language=\"plain\">)</div><div class=\"ql-code-block\" data-language=\"plain\">} #end for</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># after all files are merged, make a list with the zipfile name, and the mergedtmp.df</div><div class=\"ql-code-block\" data-language=\"plain\">tmp.df &lt;- list(zipname = name_thezip, data = mergedtmp.df)</div><div class=\"ql-code-block\" data-language=\"plain\">dpd.df &lt;- rbind(dpd.df, tmp.df)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># View(dpd.df)</div><div class=\"ql-code-block\" data-language=\"plain\">saveAsTxt_my(dpd.df, 'data/dpd.json')</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">return (dpd.df)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">} # end founction</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY441c5868-2096-4b01-92fa-ccb0879957a9","name":"substeps","custparents":[{"idx":"MYea533509-4fe4-4456-888d-8b490ec0f90d"}],"children":[{"idx":"MYd71d007a-cbf1-4fce-896c-326031c535ca","name":"Determine the surfix of the zip file like '_ap'","custparents":[{"idx":"MY441c5868-2096-4b01-92fa-ccb0879957a9"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">#make a surfix like '_', or '_ap', etc.</div><div class=\"ql-code-block\">    thezipsurfix &lt;- sub('\\\\.zip$', '', name_thezip)</div><div class=\"ql-code-block\">    thezipsurfix &lt;- sub('allfiles', '', thezipsurfix)</div></div><p>t///</p>","children":[{"idx":"MY09cbbd93-c599-4ec9-a250-a969755f50c8","name":"run downloadzip() to download the zip file","custparents":[{"idx":"MYd71d007a-cbf1-4fce-896c-326031c535ca"}],"children":[{"idx":"MY15194db3-9357-4c45-8fc9-460fb0fd3796","name":"run maketableinfo_dpd_my() to get file names, vars","custparents":[{"idx":"MY09cbbd93-c599-4ec9-a250-a969755f50c8"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># make a dataframe with tablename, varname, and vartype of all tables</div><div class=\"ql-code-block\" data-language=\"plain\">tables.df &lt;- maketableinfo_dpd_my()</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYd465c5cc-7f42-41fe-b2f4-69d3c84d025e","name":"Get unique file names as a vector","custparents":[{"idx":"MY15194db3-9357-4c45-8fc9-460fb0fd3796"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># get unique table names</div><div class=\"ql-code-block\" data-language=\"plain\"># get a vector of all values in the column 'table' as a vector</div><div class=\"ql-code-block\" data-language=\"plain\">tablenames.vector &lt;- tables.df[,'table']</div><div class=\"ql-code-block\" data-language=\"plain\"># from above, get the unique values</div><div class=\"ql-code-block\" data-language=\"plain\">uniquetablenames.vector = unique(tablenames.vector)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># drop the tablename 'inactive' if the data zip is not for inactive drugs</div><div class=\"ql-code-block\" data-language=\"plain\">if (name_thezip != 'allfiles_ia.zip') {</div><div class=\"ql-code-block\" data-language=\"plain\">uniquetablenames.list &lt;-lapply(uniquetablenames.vector, function(x){x[!x == \"inactive\"]})</div><div class=\"ql-code-block\" data-language=\"plain\">#Note: lapply() results in a list, need to convert it back to a vector</div><div class=\"ql-code-block\" data-language=\"plain\">uniquetablenames.vector = unlist(uniquetablenames.list)</div><div class=\"ql-code-block\" data-language=\"plain\"># uniquetablenames.vector</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYd7f01ef3-734e-4dd4-b1e5-83d1e5258c2e","name":"loop for each file","custparents":[{"idx":"MYd465c5cc-7f42-41fe-b2f4-69d3c84d025e"}],"children":[{"idx":"MY4e8f2418-a9a5-4402-ac52-ec8d1c629236","name":"append the df into dpd.list","custparents":[{"idx":"MYd7f01ef3-734e-4dd4-b1e5-83d1e5258c2e"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # after all files are merged, make a list with the zipfile name, and the mergedtmp.df</div><div class=\"ql-code-block\">    tmp.list &lt;- list(zipname = name_thezip, data = mergedtmp.df)</div><div class=\"ql-code-block\">    dpd.list &lt;- rbind(dpd.list, tmp.list)</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYa6834b23-4502-4ed5-982c-e6f80346c0cc","name":"save dpd.list as a local json file","custparents":[{"idx":"MY4e8f2418-a9a5-4402-ac52-ec8d1c629236"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># View(dpd.list)</div><div class=\"ql-code-block\" data-language=\"plain\">saveAsTxt_my(dpd.list, 'data/dpd.json')</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY8c239157-f87b-4dbc-9e81-9c6db597bac7","name":"return dpd.list","custparents":[{"idx":"MYa6834b23-4502-4ed5-982c-e6f80346c0cc"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">return (dpd.list)</div></div><p><br></p><p>t///</p>"},{"idx":"MYdfde0d52-3ea5-44ad-9127-decef53b7409","name":"substeps","custparents":[{"idx":"MYa6834b23-4502-4ed5-982c-e6f80346c0cc"}],"NodeDescription":"<p>///t</p><p>t///</p>","children":[{"idx":"MY9be2bcba-b81e-4a1c-9d81-3b18fd542fc0","name":"run saveAsTxt_my()","custparents":[{"idx":"MYdfde0d52-3ea5-44ad-9127-decef53b7409"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># convert the source df into a JSON and save as a local txt file</div><div class=\"ql-code-block\" data-language=\"plain\">saveAsTxt_my &lt;- function (srcdataobj, targetfilenamestr) {</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">print('start saveAsTxt_my ===============================')</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">#Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div><div class=\"ql-code-block\" data-language=\"plain\">tmp.df &lt;- srcdataobj</div><div class=\"ql-code-block\" data-language=\"plain\">#change all NULL to NA (NULL is inside a list, NA is blank). This is required before using the library jsonlite</div><div class=\"ql-code-block\" data-language=\"plain\">#https://stackoverflow.com/questions/40379021/function-to-change-blanks-to-na</div><div class=\"ql-code-block\" data-language=\"plain\">tmp.df[tmp.df == 'NULL'] &lt;- NA</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># df to JSON (package=jsonlite)</div><div class=\"ql-code-block\" data-language=\"plain\">tmp.JSON &lt;- toJSON(tmp.df, null='null')</div><div class=\"ql-code-block\" data-language=\"plain\"># tmp.JSON</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">#write the json obj to a local file</div><div class=\"ql-code-block\" data-language=\"plain\"># Wrong. write_json is incorrect. Do not use it.</div><div class=\"ql-code-block\" data-language=\"plain\">#write_json(vet.JSON, 'test.json')</div><div class=\"ql-code-block\" data-language=\"plain\"># the correct way is directly write as a txt file!</div><div class=\"ql-code-block\" data-language=\"plain\"># write/save to a local file (as a text file)</div><div class=\"ql-code-block\" data-language=\"plain\">fileConn&lt;- file(targetfilenamestr)</div><div class=\"ql-code-block\" data-language=\"plain\">writeLines(tmp.JSON, fileConn)</div><div class=\"ql-code-block\" data-language=\"plain\">close(fileConn)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p><br></p><p>t///</p>","children":[],"_substeps":{"idx":"MY6b7c5e0e-0bea-4f90-b238-7619eb3d6cd6","name":"substeps","custparents":[{"idx":"MY9be2bcba-b81e-4a1c-9d81-3b18fd542fc0"}],"children":[{"idx":"MYa03c70c4-c6ff-4608-92d2-cc456dbae7be","name":"Change NULL (list) to NA (blank value)","custparents":[{"idx":"MY6b7c5e0e-0bea-4f90-b238-7619eb3d6cd6"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div><div class=\"ql-code-block\">    tmp.df &lt;- srcdataobj</div><div class=\"ql-code-block\">    #change all NULL to NA (NULL is inside a list, NA is blank). This is required before using the library jsonlite</div><div class=\"ql-code-block\">    #https://stackoverflow.com/questions/40379021/function-to-change-blanks-to-na</div><div class=\"ql-code-block\">    tmp.df[tmp.df == 'NULL'] &lt;- NA</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY1ff26293-2b2b-4505-80b9-56eaf72b060d","name":"convert the df to a JSON obj","custparents":[{"idx":"MYa03c70c4-c6ff-4608-92d2-cc456dbae7be"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # df to JSON (package=jsonlite)</div><div class=\"ql-code-block\">    tmp.JSON &lt;- toJSON(tmp.df, null='null')</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYe0a3802d-9447-4002-aa8d-d75506e20aba","name":"Save as a local JSON text file","custparents":[{"idx":"MY1ff26293-2b2b-4505-80b9-56eaf72b060d"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #write the json obj to a local file</div><div class=\"ql-code-block\">    # Wrong. write_json is incorrect. Do not use it.</div><div class=\"ql-code-block\">    #write_json(vet.JSON, 'test.json')</div><div class=\"ql-code-block\">    # the correct way is directly write as a txt file!</div><div class=\"ql-code-block\">    # write/save to a local file (as a text file)</div><div class=\"ql-code-block\">    fileConn&lt;- file(targetfilenamestr)</div><div class=\"ql-code-block\">    writeLines(tmp.JSON, fileConn)</div><div class=\"ql-code-block\">    close(fileConn)</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY5cba2c33-9229-4220-8838-ce654c5153af","name":"Notion","custparents":[{"idx":"MYe0a3802d-9447-4002-aa8d-d75506e20aba"}],"NodeDescription":"<p>///t</p><p>do not use write_json, it'll generate a wired df that is not desired. </p><p>    #write the json obj to a local file</p><p>    # Wrong. write_json is incorrect. Do not use it.</p><p>    #write_json(vet.JSON, 'test.json')</p><p>    # the correct way is directly write as a txt file!</p><p>    # write/save to a local file (as a text file)</p><p>t///</p><p>[to do]</p>"}]}]}]},{"idx":"MY903c2fbd-1d0d-44ab-bec0-7c42df09c7e6","name":"Notion","custparents":[{"idx":"MY6b7c5e0e-0bea-4f90-b238-7619eb3d6cd6"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">#Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div></div><p>t///</p><p>[to do]</p>"}]}}]}]}]}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">filecount &lt;- 0</div><div class=\"ql-code-block\" data-language=\"plain\"># loop for each table name, import data into dfs named by the tablename (e.g.,thedata_drug.df )</div><div class=\"ql-code-block\" data-language=\"plain\">for (thetablename in uniquetablenames.vector) {</div><div class=\"ql-code-block\" data-language=\"plain\"># print(thetablename)</div><div class=\"ql-code-block\" data-language=\"plain\">filecount= filecount + 1</div><div class=\"ql-code-block\" data-language=\"plain\">#unzip the table, convert to a df, and merge it into a big df</div><div class=\"ql-code-block\" data-language=\"plain\">mergedtmp.df &lt;- addfile2df_dpd_my(</div><div class=\"ql-code-block\" data-language=\"plain\">tables.df,</div><div class=\"ql-code-block\" data-language=\"plain\">thetablename,</div><div class=\"ql-code-block\" data-language=\"plain\">thezipsurfix,</div><div class=\"ql-code-block\" data-language=\"plain\">tmpzip,</div><div class=\"ql-code-block\" data-language=\"plain\">indexcolname,</div><div class=\"ql-code-block\" data-language=\"plain\">filecount,</div><div class=\"ql-code-block\" data-language=\"plain\">mergedtmp.df</div><div class=\"ql-code-block\" data-language=\"plain\">)</div><div class=\"ql-code-block\" data-language=\"plain\">} #end for</div></div><p><br></p><p>t///</p>","_substeps":{"idx":"MYc4070dc8-cd56-4ace-9f3f-20b32a1186c0","name":"substeps","custparents":[{"idx":"MYd7f01ef3-734e-4dd4-b1e5-83d1e5258c2e"},{"idx":"MYd7f01ef3-734e-4dd4-b1e5-83d1e5258c2e"}],"children":[{"idx":"MY216545c1-433d-43a1-ac34-38282dfc4f8b","name":"addfile2df_dpd_my() merge data into a big df ","custparents":[{"idx":"MYc4070dc8-cd56-4ace-9f3f-20b32a1186c0"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">filecount &lt;- 0</div><div class=\"ql-code-block\" data-language=\"plain\"># loop for each table name, import data into dfs named by the tablename (e.g.,thedata_drug.df )</div><div class=\"ql-code-block\" data-language=\"plain\">for (thetablename in uniquetablenames.vector) {</div><div class=\"ql-code-block\" data-language=\"plain\"># print(thetablename)</div><div class=\"ql-code-block\" data-language=\"plain\">filecount= filecount + 1</div><div class=\"ql-code-block\" data-language=\"plain\">#unzip the table, convert to a df, and merge it into a big df</div><div class=\"ql-code-block\" data-language=\"plain\">mergedtmp.df &lt;- addfile2df_dpd_my(</div><div class=\"ql-code-block\" data-language=\"plain\">tables.df,</div><div class=\"ql-code-block\" data-language=\"plain\">thetablename,</div><div class=\"ql-code-block\" data-language=\"plain\">thezipsurfix,</div><div class=\"ql-code-block\" data-language=\"plain\">tmpzip,</div><div class=\"ql-code-block\" data-language=\"plain\">indexcolname,</div><div class=\"ql-code-block\" data-language=\"plain\">filecount,</div><div class=\"ql-code-block\" data-language=\"plain\">mergedtmp.df</div><div class=\"ql-code-block\" data-language=\"plain\">)</div><div class=\"ql-code-block\" data-language=\"plain\">} #end for</div></div><p><br></p><p>t///</p>","children":[],"_substeps":{"idx":"MY71061efc-94ca-4904-9ad1-64cf7e755ed7","name":"substeps","custparents":[{"idx":"MY216545c1-433d-43a1-ac34-38282dfc4f8b"}],"children":[{"idx":"MYf7839b56-fa03-41d1-82e2-e7003d9f8458","name":"set the default file count","custparents":[{"idx":"MY71061efc-94ca-4904-9ad1-64cf7e755ed7"}],"children":[{"idx":"MY76e76e90-5b1d-44a7-b7a3-0451ee95c5dd","name":"determine name of the df according to the file name","custparents":[{"idx":"MYf7839b56-fa03-41d1-82e2-e7003d9f8458"}],"children":[{"idx":"MY99e4981c-06d6-4d3a-9dfd-e093fc183fc3","name":"prepare a df to hold file data","custparents":[{"idx":"MY76e76e90-5b1d-44a7-b7a3-0451ee95c5dd"}],"children":[],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # get the data and name into the df named by the string 'datadfnamestr'</div><div class=\"ql-code-block\">    # note: not to save the df to 'datadfnamestr', but to save the df to a df named by the str value of 'datadfnamestr'</div><div class=\"ql-code-block\">    # e.g., datadfnamestr &lt;- 'thedata_drug.df', the assign() saves the data to thedata_drug.df</div><div class=\"ql-code-block\">    assign(datadfnamestr, getDataOfATableInAZip_df(tables.df, thetablename, thezipsurfix, tmpzip))</div><div class=\"ql-code-block\">    # display the head rows of the df thedata_drug.df</div><div class=\"ql-code-block\">    # head(get(datadfnamestr))</div></div><p><br></p><p>t///</p>","_substeps":{"idx":"MY96f990a8-1777-4b0d-ba80-a290a763db64","name":"substeps","custparents":[{"idx":"MY99e4981c-06d6-4d3a-9dfd-e093fc183fc3"}],"children":[{"idx":"MYf34eaefb-12fb-478e-8c29-82f2547bb406","name":"run getDataOf ATableInAZip_df()","custparents":[{"idx":"MY96f990a8-1777-4b0d-ba80-a290a763db64"}],"children":[{"idx":"MY3b3e06d2-28a3-41c2-b1ae-7da43bfbf339","name":"determine the rows of the file df","custparents":[{"idx":"MYf34eaefb-12fb-478e-8c29-82f2547bb406"}],"children":[{"idx":"MY2478bb25-a29a-4fb2-884a-1ac1fa922331","name":"make a file df with drug_code, nest repeated values into lists","custparents":[{"idx":"MY3b3e06d2-28a3-41c2-b1ae-7da43bfbf339"}],"children":[{"idx":"MYf43117bc-886e-4c83-bc47-05f240aff764","name":"Convert the column drug_code from a list type to a vector ","custparents":[{"idx":"MY2478bb25-a29a-4fb2-884a-1ac1fa922331"}],"children":[{"idx":"MY84b85e8a-b6b0-46ce-9c5f-e710e76c0718","name":"rename the tmpdf according to the file name","custparents":[{"idx":"MYf43117bc-886e-4c83-bc47-05f240aff764"}],"children":[{"idx":"MY1447bc49-2cfa-40b1-9c5f-8971b3828dde","name":"save the df as a local JSON file","custparents":[{"idx":"MY84b85e8a-b6b0-46ce-9c5f-e710e76c0718"}],"children":[],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    zipjsonnamestr &lt;- paste0('data/allfiles', thezipsurfix, '.json')</div><div class=\"ql-code-block\">    # save the merged table as a json like 'allfiles_ap.json'    </div><div class=\"ql-code-block\">    saveAsTxt_my(mergedtmp.df, zipjsonnamestr)</div></div><p><br></p><p>t///</p>","_substeps":{"idx":"MYcfcfcec5-9cb8-42fd-814a-41c4bdbbc559","name":"substeps","custparents":[{"idx":"MY1447bc49-2cfa-40b1-9c5f-8971b3828dde"}],"children":[{"idx":"MY36416cc2-fbca-45c8-8814-48550fe37680","name":"run saveAsTxt_my()","custparents":[{"idx":"MYcfcfcec5-9cb8-42fd-814a-41c4bdbbc559"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># convert the source df into a JSON and save as a local txt file</div><div class=\"ql-code-block\">saveAsTxt_my &lt;- function (srcdataobj, targetfilenamestr) {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">print('start saveAsTxt_my ===============================')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">#Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div><div class=\"ql-code-block\">tmp.df &lt;- srcdataobj</div><div class=\"ql-code-block\">#change all NULL to NA (NULL is inside a list, NA is blank). This is required before using the library jsonlite</div><div class=\"ql-code-block\">#https://stackoverflow.com/questions/40379021/function-to-change-blanks-to-na</div><div class=\"ql-code-block\">tmp.df[tmp.df == 'NULL'] &lt;- NA</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"># df to JSON (package=jsonlite)</div><div class=\"ql-code-block\">tmp.JSON &lt;- toJSON(tmp.df, null='null')</div><div class=\"ql-code-block\"># tmp.JSON</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">#write the json obj to a local file</div><div class=\"ql-code-block\"># Wrong. write_json is incorrect. Do not use it.</div><div class=\"ql-code-block\">#write_json(vet.JSON, 'test.json')</div><div class=\"ql-code-block\"># the correct way is directly write as a txt file!</div><div class=\"ql-code-block\"># write/save to a local file (as a text file)</div><div class=\"ql-code-block\">fileConn&lt;- file(targetfilenamestr)</div><div class=\"ql-code-block\">writeLines(tmp.JSON, fileConn)</div><div class=\"ql-code-block\">close(fileConn)</div><div class=\"ql-code-block\">}</div></div><p>t///</p>","children":[],"_substeps":{"idx":"260676d1-d172-4175-9eef-0f73a50e09da","name":"substeps","custparents":[{"idx":"MY36416cc2-fbca-45c8-8814-48550fe37680"}],"children":[{"idx":"69a5fb71-5977-40aa-8920-1fae0166f536","name":"Change NULL (list) to NA (blank value)","custparents":[{"idx":"260676d1-d172-4175-9eef-0f73a50e09da"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div><div class=\"ql-code-block\">    tmp.df &lt;- srcdataobj</div><div class=\"ql-code-block\">    #change all NULL to NA (NULL is inside a list, NA is blank). This is required before using the library jsonlite</div><div class=\"ql-code-block\">    #https://stackoverflow.com/questions/40379021/function-to-change-blanks-to-na</div><div class=\"ql-code-block\">    tmp.df[tmp.df == 'NULL'] &lt;- NA</div></div><p><br></p><p>t///</p>","children":[{"idx":"ef375007-add2-438e-87d3-57b250800cc9","name":"convert the df to a JSON obj","custparents":[{"idx":"69a5fb71-5977-40aa-8920-1fae0166f536"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # df to JSON (package=jsonlite)</div><div class=\"ql-code-block\">    tmp.JSON &lt;- toJSON(tmp.df, null='null')</div></div><p><br></p><p>t///</p>","children":[{"idx":"8c35355c-48b3-4646-8833-c4b8dce126ce","name":"Save as a local JSON text file","custparents":[{"idx":"ef375007-add2-438e-87d3-57b250800cc9"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #write the json obj to a local file</div><div class=\"ql-code-block\">    # Wrong. write_json is incorrect. Do not use it.</div><div class=\"ql-code-block\">    #write_json(vet.JSON, 'test.json')</div><div class=\"ql-code-block\">    # the correct way is directly write as a txt file!</div><div class=\"ql-code-block\">    # write/save to a local file (as a text file)</div><div class=\"ql-code-block\">    fileConn&lt;- file(targetfilenamestr)</div><div class=\"ql-code-block\">    writeLines(tmp.JSON, fileConn)</div><div class=\"ql-code-block\">    close(fileConn)</div></div><p><br></p><p>t///</p>","children":[{"idx":"04c1626b-cf4e-4b9a-90bc-05151b5fe490","name":"Notion","custparents":[{"idx":"8c35355c-48b3-4646-8833-c4b8dce126ce"}],"NodeDescription":"<p>///t</p><p>do not use write_json, it'll generate a wired df that is not desired. </p><p>    #write the json obj to a local file</p><p>    # Wrong. write_json is incorrect. Do not use it.</p><p>    #write_json(vet.JSON, 'test.json')</p><p>    # the correct way is directly write as a txt file!</p><p>    # write/save to a local file (as a text file)</p><p>t///</p><p>[to do]</p>"}]}]}]},{"idx":"f4021b23-3b84-4ce6-84c4-87bc10f6e165","name":"Notion","custparents":[{"idx":"260676d1-d172-4175-9eef-0f73a50e09da"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">#Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div></div><p>t///</p><p>[to do]</p>"}]}}]}},{"idx":"MYa04c5c94-dc7f-4256-8d9d-c0f812d0ad59","name":"merge file dfs","custparents":[{"idx":"MY84b85e8a-b6b0-46ce-9c5f-e710e76c0718"}],"children":[{"idx":"MY4d3a603b-1ec9-4227-a640-763c5f813735","name":"save the merged df as a local JSON file","custparents":[{"idx":"MYa04c5c94-dc7f-4256-8d9d-c0f812d0ad59"}],"children":[],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    zipjsonnamestr &lt;- paste0('data/allfiles', thezipsurfix, '.json')</div><div class=\"ql-code-block\">    # save the merged table as a json like 'allfiles_ap.json'    </div><div class=\"ql-code-block\">    saveAsTxt_my(mergedtmp.df, zipjsonnamestr)</div></div><p><br></p><p>t///</p>","_substeps":{"idx":"MY9dfcefd3-2f73-47e0-9e75-b2a0e01b8e8e","name":"substeps","custparents":[{"idx":"MY4d3a603b-1ec9-4227-a640-763c5f813735"}],"children":[{"idx":"MY782dacac-fd8d-4252-9839-2f635bf5ca07","name":"run saveAsTxt_my()","custparents":[{"idx":"MY9dfcefd3-2f73-47e0-9e75-b2a0e01b8e8e"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># convert the source df into a JSON and save as a local txt file</div><div class=\"ql-code-block\">saveAsTxt_my &lt;- function (srcdataobj, targetfilenamestr) {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">print('start saveAsTxt_my ===============================')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">#Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div><div class=\"ql-code-block\">tmp.df &lt;- srcdataobj</div><div class=\"ql-code-block\">#change all NULL to NA (NULL is inside a list, NA is blank). This is required before using the library jsonlite</div><div class=\"ql-code-block\">#https://stackoverflow.com/questions/40379021/function-to-change-blanks-to-na</div><div class=\"ql-code-block\">tmp.df[tmp.df == 'NULL'] &lt;- NA</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"># df to JSON (package=jsonlite)</div><div class=\"ql-code-block\">tmp.JSON &lt;- toJSON(tmp.df, null='null')</div><div class=\"ql-code-block\"># tmp.JSON</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">#write the json obj to a local file</div><div class=\"ql-code-block\"># Wrong. write_json is incorrect. Do not use it.</div><div class=\"ql-code-block\">#write_json(vet.JSON, 'test.json')</div><div class=\"ql-code-block\"># the correct way is directly write as a txt file!</div><div class=\"ql-code-block\"># write/save to a local file (as a text file)</div><div class=\"ql-code-block\">fileConn&lt;- file(targetfilenamestr)</div><div class=\"ql-code-block\">writeLines(tmp.JSON, fileConn)</div><div class=\"ql-code-block\">close(fileConn)</div><div class=\"ql-code-block\">}</div></div><p>t///</p>","children":[],"_substeps":{"idx":"59de3fe2-af10-41ee-bf22-04e9362d110e","name":"substeps","custparents":[{"idx":"MY782dacac-fd8d-4252-9839-2f635bf5ca07"}],"children":[{"idx":"38a60369-f8de-4973-aeed-e20a8b42ec6b","name":"Change NULL (list) to NA (blank value)","custparents":[{"idx":"59de3fe2-af10-41ee-bf22-04e9362d110e"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div><div class=\"ql-code-block\">    tmp.df &lt;- srcdataobj</div><div class=\"ql-code-block\">    #change all NULL to NA (NULL is inside a list, NA is blank). This is required before using the library jsonlite</div><div class=\"ql-code-block\">    #https://stackoverflow.com/questions/40379021/function-to-change-blanks-to-na</div><div class=\"ql-code-block\">    tmp.df[tmp.df == 'NULL'] &lt;- NA</div></div><p><br></p><p>t///</p>","children":[{"idx":"bcfc5faf-fe62-4d96-b1d8-8d911558b089","name":"convert the df to a JSON obj","custparents":[{"idx":"38a60369-f8de-4973-aeed-e20a8b42ec6b"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # df to JSON (package=jsonlite)</div><div class=\"ql-code-block\">    tmp.JSON &lt;- toJSON(tmp.df, null='null')</div></div><p><br></p><p>t///</p>","children":[{"idx":"8d6759e9-863c-4d76-a3cf-a1f8a516d876","name":"Save as a local JSON text file","custparents":[{"idx":"bcfc5faf-fe62-4d96-b1d8-8d911558b089"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #write the json obj to a local file</div><div class=\"ql-code-block\">    # Wrong. write_json is incorrect. Do not use it.</div><div class=\"ql-code-block\">    #write_json(vet.JSON, 'test.json')</div><div class=\"ql-code-block\">    # the correct way is directly write as a txt file!</div><div class=\"ql-code-block\">    # write/save to a local file (as a text file)</div><div class=\"ql-code-block\">    fileConn&lt;- file(targetfilenamestr)</div><div class=\"ql-code-block\">    writeLines(tmp.JSON, fileConn)</div><div class=\"ql-code-block\">    close(fileConn)</div></div><p><br></p><p>t///</p>","children":[{"idx":"73f5063b-15b0-469f-938b-7fc59afa3613","name":"Notion","custparents":[{"idx":"8d6759e9-863c-4d76-a3cf-a1f8a516d876"}],"NodeDescription":"<p>///t</p><p>do not use write_json, it'll generate a wired df that is not desired. </p><p>    #write the json obj to a local file</p><p>    # Wrong. write_json is incorrect. Do not use it.</p><p>    #write_json(vet.JSON, 'test.json')</p><p>    # the correct way is directly write as a txt file!</p><p>    # write/save to a local file (as a text file)</p><p>t///</p><p>[to do]</p>"}]}]}]},{"idx":"9433aa05-f5f1-45f2-9151-07f0567cd07e","name":"Notion","custparents":[{"idx":"59de3fe2-af10-41ee-bf22-04e9362d110e"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">#Note: the jsonlite fromJSON automatically convert escape chars into utf-8 code. which may cause error...</div></div><p>t///</p><p>[to do]</p>"}]}}]}}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # next is to merge the dataframes by DRUG_CODE</div><div class=\"ql-code-block\">    if (filecount == 1){</div><div class=\"ql-code-block\">        mergedtmp.df &lt;- get(distinctdfstr)</div><div class=\"ql-code-block\">    } else {</div><div class=\"ql-code-block\">        # merge the current df with target.df by the indexcol 'DRUG_CODE'</div><div class=\"ql-code-block\">        mergedtmp.df &lt;- merge(mergedtmp.df, get(distinctdfstr), </div><div class=\"ql-code-block\">        by.x= c(indexcolname), by.y=c(indexcolname), all=TRUE)</div><div class=\"ql-code-block\">    }</div></div><p><br></p><p>t///</p>"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # save the tmp df  to the df named by the parameter</div><div class=\"ql-code-block\">    distinctdfstr &lt;- paste0(thetablename_surfix, '_distinct.df')</div><div class=\"ql-code-block\">    assign(distinctdfstr, thetmpdf)        </div><div class=\"ql-code-block\">    nrows_distinctdf &lt;- nrow(thetmpdf)</div><div class=\"ql-code-block\">    print(paste0('the data frame ',distinctdfstr, ' contains ', nrows_distinctdf, ' rows'))</div></div><p><br></p><p>t///</p>"},{"idx":"MYfdac549e-1778-4abe-a849-db75bed63405","name":"Note","custparents":[{"idx":"MYf43117bc-886e-4c83-bc47-05f240aff764"}],"NodeDescription":"<p>///t</p><p># reduce the DRUG_CODE column from a list to a vector of a single value</p><p># the column DRUG_CODE will be used as the key column to join data frames.</p><p># such key columns cannot have nested lists.</p><p># The following shows how to reduce the column to a single-value vector when using dynamic df names</p><p># need to save the df (named by a parameter 'distinctdfstr') to a tmp df with a fixed name ('thetmpdf')</p><p><br></p><p># unlist the column (indexcolname, e.g. 'DRUG_CODE')</p><p># In the following line, cannot use get(distinctdfstr) on the left to represent the df 'vet_distinct.df' directly)</p><p># e.g., it does not work: get(distinctdfstr) &lt;- unlist(thetmpdf[[indexcolname]])</p><p><br></p><p>t///</p><p>[to do]</p>"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # reduce the DRUG_CODE column from a list to a vector of a single value </div><div class=\"ql-code-block\">    # the column DRUG_CODE will be used as the key column to join data frames.</div><div class=\"ql-code-block\">    # such key columns cannot have nested lists.</div><div class=\"ql-code-block\">    # The following shows how to reduce the column to a single-value vector when using dynamic df names</div><div class=\"ql-code-block\">    # need to save the df (named by a parameter 'distinctdfstr') to a tmp df with a fixed name ('thetmpdf')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # unlist the column (indexcolname, e.g. 'DRUG_CODE')</div><div class=\"ql-code-block\">    # In the following line, cannot use get(distinctdfstr) on the left to represent the df 'vet_distinct.df' directly)</div><div class=\"ql-code-block\">    # e.g., it does not work: get(distinctdfstr) &lt;- unlist(thetmpdf[[indexcolname]])</div><div class=\"ql-code-block\">    thetmpdf[indexcolname] &lt;- unlist(thetmpdf[[indexcolname]])</div></div><p>t///</p>"}],"NodeDescription":"<p>///t</p><p>t///</p><p><br></p>","_substeps":{"idx":"MY2ea00d73-2d78-49e1-ba52-3c887f3701ba","name":"substeps","custparents":[{"idx":"MY2478bb25-a29a-4fb2-884a-1ac1fa922331"},{"idx":"MY2478bb25-a29a-4fb2-884a-1ac1fa922331"}],"children":[{"idx":"MY746c6c93-b09e-48ad-9c2b-87a01426fbda","name":"run makeDataFile()","custparents":[{"idx":"MY2ea00d73-2d78-49e1-ba52-3c887f3701ba"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># make a datafile from the raw data, each row contains a distinct drug_code</div><div class=\"ql-code-block\" data-language=\"plain\"># for the same drug_code, the other variables might have multpile values</div><div class=\"ql-code-block\" data-language=\"plain\"># These values are saved as a list in a row</div><div class=\"ql-code-block\" data-language=\"plain\">makeDataFile &lt;- function(thedf.df, indexcolname) {</div><div class=\"ql-code-block\" data-language=\"plain\">print('start makeDataFile ===============================')</div><div class=\"ql-code-block\" data-language=\"plain\"># thedf.df &lt;- pharm.df</div><div class=\"ql-code-block\" data-language=\"plain\"># head(pharm.df)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># determine the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\"># indexcolname &lt;- 'DRUG_CODE'</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># get the number of columns and names from the df</div><div class=\"ql-code-block\" data-language=\"plain\">colnames.list &lt;- colnames(thedf.df)</div><div class=\"ql-code-block\" data-language=\"plain\"># colnames.list</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># sort by id</div><div class=\"ql-code-block\" data-language=\"plain\">thedf.df &lt;- thedf.df[order(thedf.df[indexcolname]),]</div><div class=\"ql-code-block\" data-language=\"plain\"># reset row numbers</div><div class=\"ql-code-block\" data-language=\"plain\">rownames(thedf.df) &lt;- NULL</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">#prepare the target df with the same colnames as in thedf.df</div><div class=\"ql-code-block\" data-language=\"plain\"># add all distinct index col values</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">target.df &lt;- data.frame(matrix(data=list(), ncol = ncol(thedf.df), nrow = 0))</div><div class=\"ql-code-block\" data-language=\"plain\">colnames(target.df) &lt;- colnames.list</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># get all indexcol values</div><div class=\"ql-code-block\" data-language=\"plain\">indexcolvalues.list &lt;- thedf.df[indexcolname]</div><div class=\"ql-code-block\" data-language=\"plain\">distinctindexcolvalues.list &lt;- unlist(unique(indexcolvalues.list))</div><div class=\"ql-code-block\" data-language=\"plain\">i &lt;- 0</div><div class=\"ql-code-block\" data-language=\"plain\">for (v in distinctindexcolvalues.list) {</div><div class=\"ql-code-block\" data-language=\"plain\">i &lt;- i + 1</div><div class=\"ql-code-block\" data-language=\"plain\">target.df[i, indexcolname] = v</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># for each row in the df, if the id is unchanged, push the value in atc into a vector</div><div class=\"ql-code-block\" data-language=\"plain\">#create tmp vectors to hold values of a col in rows where the indexcolname value is the same</div><div class=\"ql-code-block\" data-language=\"plain\"># create a tmp vector for each col in thedf, except the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># from the colname.list, exclude the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\">targetcolnames.list &lt;- unlist(lapply(colnames.list, function(x){x[!x == indexcolname]}))</div><div class=\"ql-code-block\" data-language=\"plain\"># targetcolnames.list = unlist(lapply(targetcolnames.list, function(x){x[!x == 'atc']}))</div><div class=\"ql-code-block\" data-language=\"plain\"># get the last col 's value</div><div class=\"ql-code-block\" data-language=\"plain\">lastcolname &lt;- targetcolnames.list[length(targetcolnames.list)]</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># for each col in targetcolname.list, create a tmp vector</div><div class=\"ql-code-block\" data-language=\"plain\">for (x in targetcolnames.list){</div><div class=\"ql-code-block\" data-language=\"plain\"># determine the tmpvectorname</div><div class=\"ql-code-block\" data-language=\"plain\">tmpvectorname &lt;- paste0('tmp_', x, '.vector') # like tmp_DIN.vector</div><div class=\"ql-code-block\" data-language=\"plain\"># assign an empty vector to the tmpvectorname</div><div class=\"ql-code-block\" data-language=\"plain\">assign(tmpvectorname, vector() )</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">#create a var to hold the value of the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\">retainedindexcolvalue &lt;-''</div><div class=\"ql-code-block\" data-language=\"plain\">i &lt;- 0</div><div class=\"ql-code-block\" data-language=\"plain\">for (row in (1:nrow(thedf.df))) {</div><div class=\"ql-code-block\" data-language=\"plain\">i &lt;- i + 1</div><div class=\"ql-code-block\" data-language=\"plain\"># get the vlaue of the current index col</div><div class=\"ql-code-block\" data-language=\"plain\">theindexcolvalue &lt;- unlist(thedf.df[row,indexcolname])</div><div class=\"ql-code-block\" data-language=\"plain\"># thecurcoln=1</div><div class=\"ql-code-block\" data-language=\"plain\"># for a given var, get the distinct values of a col of thedf.df</div><div class=\"ql-code-block\" data-language=\"plain\">for (thecurcol in targetcolnames.list) {</div><div class=\"ql-code-block\" data-language=\"plain\">tmpvectorname &lt;- paste0('tmp_', thecurcol, '.vector') # like tmp_DIN.vector</div><div class=\"ql-code-block\" data-language=\"plain\"># make rows of distinct indexcol values</div><div class=\"ql-code-block\" data-language=\"plain\"># e.g., putting all drug_code=2 rows into 1 row.</div><div class=\"ql-code-block\" data-language=\"plain\"># multiple values in other columns are collapsed to a vector</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># get the value of the current col</div><div class=\"ql-code-block\" data-language=\"plain\">thecolvalue &lt;- unlist(thedf.df[row,thecurcol])</div><div class=\"ql-code-block\" data-language=\"plain\"># if the indexcol's value remains unchanged</div><div class=\"ql-code-block\" data-language=\"plain\">if (retainedindexcolvalue == theindexcolvalue){</div><div class=\"ql-code-block\" data-language=\"plain\"># push the value of the current col into the tmp.vector</div><div class=\"ql-code-block\" data-language=\"plain\">if ( ! thecolvalue %in% get(tmpvectorname)){</div><div class=\"ql-code-block\" data-language=\"plain\">assign(tmpvectorname, c(get(tmpvectorname), thecolvalue) )</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">} else {# if the indexcol's value has changed</div><div class=\"ql-code-block\" data-language=\"plain\">if (i &gt; 1 ){</div><div class=\"ql-code-block\" data-language=\"plain\">target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"># update the retained value and the tmp.vector</div><div class=\"ql-code-block\" data-language=\"plain\"># if the current col is the last col in targetcolnames.list,</div><div class=\"ql-code-block\" data-language=\"plain\"># update the retainedindexcolvalue</div><div class=\"ql-code-block\" data-language=\"plain\">if (thecurcol == lastcolname) {</div><div class=\"ql-code-block\" data-language=\"plain\">retainedindexcolvalue &lt;- theindexcolvalue</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">assign(tmpvectorname, c(thecolvalue))</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">#finally, if it is the last row, append the id and the values of the current col again</div><div class=\"ql-code-block\" data-language=\"plain\">if (i == nrow(thedf.df)){</div><div class=\"ql-code-block\" data-language=\"plain\">target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">} # end loop</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">return (target.df)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p><br></p><p>t///</p><p><br></p>","children":[],"_substeps":{"idx":"MY89145975-9fc7-402f-8a98-51f3d8ed0ee3","name":"substeps","custparents":[{"idx":"MY746c6c93-b09e-48ad-9c2b-87a01426fbda"}],"children":[{"idx":"MYd29170b4-cf2d-4843-84fb-23b331599d09","name":"get the column names of the source df","custparents":[{"idx":"MY89145975-9fc7-402f-8a98-51f3d8ed0ee3"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">print('start makeDataFile ===============================')</div><div class=\"ql-code-block\" data-language=\"plain\"># thedf.df &lt;- pharm.df</div><div class=\"ql-code-block\" data-language=\"plain\"># head(pharm.df)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># determine the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\"># indexcolname &lt;- 'DRUG_CODE'</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># get the number of columns and names from the df</div><div class=\"ql-code-block\" data-language=\"plain\">colnames.list &lt;- colnames(thedf.df)</div><div class=\"ql-code-block\" data-language=\"plain\"># colnames.list</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY3aad85b1-65fc-4195-bd13-cbe56971c79f","name":"sort the source df by the index column","custparents":[{"idx":"MYd29170b4-cf2d-4843-84fb-23b331599d09"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># sort by id</div><div class=\"ql-code-block\" data-language=\"plain\">thedf.df &lt;- thedf.df[order(thedf.df[indexcolname]),]</div><div class=\"ql-code-block\" data-language=\"plain\"># reset row numbers</div><div class=\"ql-code-block\" data-language=\"plain\">rownames(thedf.df) &lt;- NULL</div></div><p><br></p><p>t///</p>","children":[{"idx":"34246b34-b27f-4447-93a9-b8b7616a8435","name":"prepare an empty target df","custparents":[{"idx":"MY3aad85b1-65fc-4195-bd13-cbe56971c79f"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">    #prepare the target df (an empty df) with the same colnames as in thedf.df</div><div class=\"ql-code-block\" data-language=\"plain\">    # add all distinct index col values</div><div class=\"ql-code-block\" data-language=\"plain\">    target.df &lt;- data.frame(matrix(data=list(), ncol = ncol(thedf.df), nrow = 0))</div><div class=\"ql-code-block\" data-language=\"plain\">    colnames(target.df) &lt;- colnames.list</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYa186d00b-07e3-4ead-b493-fbefce1ebc93","name":"make a vector of distinct values in the index column","custparents":[{"idx":"34246b34-b27f-4447-93a9-b8b7616a8435"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># get all indexcol values</div><div class=\"ql-code-block\">indexcolvalues.list &lt;- thedf.df[indexcolname]</div><div class=\"ql-code-block\">distinctindexcolvalues.list &lt;- unlist(unique(indexcolvalues.list))</div><div class=\"ql-code-block\">i &lt;- 0</div><div class=\"ql-code-block\">for (v in distinctindexcolvalues.list) {</div><div class=\"ql-code-block\">i &lt;- i + 1</div><div class=\"ql-code-block\">target.df[i, indexcolname] = v</div><div class=\"ql-code-block\">}</div></div><p><br></p><p>t///</p>","children":[{"idx":"57ab9745-7686-49ef-8de5-113193aa9776","name":"Get a vector of column names except the indexcol","custparents":[{"idx":"MYa186d00b-07e3-4ead-b493-fbefce1ebc93"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">    # for each row in the df, if the id is unchanged, push the value in atc into a vector</div><div class=\"ql-code-block\" data-language=\"plain\">    #create tmp vectors to hold values of a col in rows where the indexcolname value is the same</div><div class=\"ql-code-block\" data-language=\"plain\">    # create a tmp vector for each col in thedf, except the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # from the colname.list, exclude the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\">    targetcolnames.vector&lt;- unlist(lapply(colnames.list, function(x){x[!x == indexcolname]}))</div><div class=\"ql-code-block\" data-language=\"plain\">    # targetcolnames.vector = unlist(lapply(targetcolnames.vector, function(x){x[!x == 'atc']}))</div></div><p><br></p><p>t///</p>","children":[{"idx":"4a5dd200-1d93-43ba-8424-5ca06b42d5a1","name":"get the name of the last column","custparents":[{"idx":"57ab9745-7686-49ef-8de5-113193aa9776"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">    # get the last col 's value </div><div class=\"ql-code-block\" data-language=\"plain\">    lastcolname &lt;- targetcolnames.vector[length(targetcolnames.vector)] </div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # for each col in targetcolname.list, create a tmp vector</div><div class=\"ql-code-block\" data-language=\"plain\">    for (x in targetcolnames.vector){</div><div class=\"ql-code-block\" data-language=\"plain\">        # determine the tmpvectorname</div><div class=\"ql-code-block\" data-language=\"plain\">        tmpvectorname &lt;- paste0('tmp_', x, '.vector') # like tmp_DIN.vector</div><div class=\"ql-code-block\" data-language=\"plain\">        # assign an empty vector to the tmpvectorname</div><div class=\"ql-code-block\" data-language=\"plain\">        assign(tmpvectorname, vector() )</div><div class=\"ql-code-block\" data-language=\"plain\">    }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    #create a var to hold the value of the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\">    retainedindexcolvalue &lt;-''</div><div class=\"ql-code-block\" data-language=\"plain\">    i &lt;- 0</div><div class=\"ql-code-block\" data-language=\"plain\">    for (row in (1:nrow(thedf.df))) {</div><div class=\"ql-code-block\" data-language=\"plain\">        i &lt;- i + 1</div><div class=\"ql-code-block\" data-language=\"plain\">        # get the vlaue of the current index col</div><div class=\"ql-code-block\" data-language=\"plain\">        theindexcolvalue &lt;- unlist(thedf.df[row,indexcolname])</div><div class=\"ql-code-block\" data-language=\"plain\">        # thecurcoln=1</div><div class=\"ql-code-block\" data-language=\"plain\">        # for a given var, get the distinct values of a col of thedf.df</div><div class=\"ql-code-block\" data-language=\"plain\">        for (thecurcol in targetcolnames.vector) {</div><div class=\"ql-code-block\" data-language=\"plain\">            tmpvectorname &lt;-  paste0('tmp_', thecurcol, '.vector') # like tmp_DIN.vector</div><div class=\"ql-code-block\" data-language=\"plain\">            # make rows of distinct indexcol values</div><div class=\"ql-code-block\" data-language=\"plain\">            # e.g., putting all drug_code=2 rows into 1 row. </div><div class=\"ql-code-block\" data-language=\"plain\">            # multiple values in other columns are collapsed to a vector </div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            # get the value of the current col</div><div class=\"ql-code-block\" data-language=\"plain\">                thecolvalue &lt;- unlist(thedf.df[row,thecurcol])</div><div class=\"ql-code-block\" data-language=\"plain\">                # if the indexcol's value remains unchanged</div><div class=\"ql-code-block\" data-language=\"plain\">                if (retainedindexcolvalue == theindexcolvalue){</div><div class=\"ql-code-block\" data-language=\"plain\">                    # push the value of the current col into the tmp.vector</div><div class=\"ql-code-block\" data-language=\"plain\">                    if ( ! thecolvalue %in% get(tmpvectorname)){</div><div class=\"ql-code-block\" data-language=\"plain\">                    assign(tmpvectorname, c(get(tmpvectorname), thecolvalue) )   </div><div class=\"ql-code-block\" data-language=\"plain\">                    }</div><div class=\"ql-code-block\" data-language=\"plain\">                } else {# if the indexcol's value has changed</div><div class=\"ql-code-block\" data-language=\"plain\">                        if (i &gt; 1 ){</div><div class=\"ql-code-block\" data-language=\"plain\">                            target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\" data-language=\"plain\">                        }</div><div class=\"ql-code-block\" data-language=\"plain\">                        # update the retained value and the tmp.vector</div><div class=\"ql-code-block\" data-language=\"plain\">                        # if the current col is the last col in targetcolnames.vector, </div><div class=\"ql-code-block\" data-language=\"plain\">                        # update the retainedindexcolvalue</div><div class=\"ql-code-block\" data-language=\"plain\">                        if (thecurcol == lastcolname) {</div><div class=\"ql-code-block\" data-language=\"plain\">                            retainedindexcolvalue &lt;- theindexcolvalue </div><div class=\"ql-code-block\" data-language=\"plain\">                        }           </div><div class=\"ql-code-block\" data-language=\"plain\">                        assign(tmpvectorname, c(thecolvalue))         </div><div class=\"ql-code-block\" data-language=\"plain\">                }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">                #finally, if it is the last row, append the id and the values of the current col again</div><div class=\"ql-code-block\" data-language=\"plain\">                if (i == nrow(thedf.df)){</div><div class=\"ql-code-block\" data-language=\"plain\">                    target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\" data-language=\"plain\">                }</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\">    } # end loop</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    return (target.df)</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY2414f6f3-3f8f-4407-a8f8-58916ee621ad","name":"Create vectors each for a col (except the indexcol)","custparents":[{"idx":"4a5dd200-1d93-43ba-8424-5ca06b42d5a1"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # for each col in targetcolnames.vector, create a tmp vector</div><div class=\"ql-code-block\">    for (x in targetcolnames.vector){</div><div class=\"ql-code-block\">        # determine the tmpvectorname</div><div class=\"ql-code-block\">        tmpvectorname &lt;- paste0('tmp_', x, '.vector') # like tmp_DIN.vector</div><div class=\"ql-code-block\">        # assign an empty vector to the tmpvectorname</div><div class=\"ql-code-block\">        assign(tmpvectorname, vector() )</div><div class=\"ql-code-block\">    }</div></div><p>t///</p>","children":[{"idx":"MY7091fb0c-9c67-4485-af7a-a40dac81372c","name":"Loop for each row in the source df, save data into target df","custparents":[{"idx":"MY2414f6f3-3f8f-4407-a8f8-58916ee621ad"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">#create a var to hold the value of the indexcol</div><div class=\"ql-code-block\" data-language=\"plain\">retainedindexcolvalue &lt;-''</div><div class=\"ql-code-block\" data-language=\"plain\">i &lt;- 0</div><div class=\"ql-code-block\" data-language=\"plain\">for (row in (1:nrow(thedf.df))) {</div><div class=\"ql-code-block\" data-language=\"plain\">i &lt;- i + 1</div><div class=\"ql-code-block\" data-language=\"plain\"># get the vlaue of the current index col</div><div class=\"ql-code-block\" data-language=\"plain\">theindexcolvalue &lt;- unlist(thedf.df[row,indexcolname])</div><div class=\"ql-code-block\" data-language=\"plain\"># thecurcoln=1</div><div class=\"ql-code-block\" data-language=\"plain\"># for a given var, get the distinct values of a col of thedf.df</div><div class=\"ql-code-block\" data-language=\"plain\">for (thecurcol in targetcolnames.vector) {</div><div class=\"ql-code-block\" data-language=\"plain\">tmpvectorname &lt;- paste0('tmp_', thecurcol, '.vector') # like tmp_DIN.vector</div><div class=\"ql-code-block\" data-language=\"plain\"># make rows of distinct indexcol values</div><div class=\"ql-code-block\" data-language=\"plain\"># e.g., putting all drug_code=2 rows into 1 row.</div><div class=\"ql-code-block\" data-language=\"plain\"># multiple values in other columns are collapsed to a vector</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># get the value of the current col</div><div class=\"ql-code-block\" data-language=\"plain\">thecolvalue &lt;- unlist(thedf.df[row,thecurcol])</div><div class=\"ql-code-block\" data-language=\"plain\"># if the indexcol's value remains unchanged</div><div class=\"ql-code-block\" data-language=\"plain\">if (retainedindexcolvalue == theindexcolvalue){</div><div class=\"ql-code-block\" data-language=\"plain\"># push the value of the current col into the tmp.vector</div><div class=\"ql-code-block\" data-language=\"plain\">if ( ! thecolvalue %in% get(tmpvectorname)){</div><div class=\"ql-code-block\" data-language=\"plain\">assign(tmpvectorname, c(get(tmpvectorname), thecolvalue) )</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">} else {# if the indexcol's value has changed</div><div class=\"ql-code-block\" data-language=\"plain\">if (i &gt; 1 ){</div><div class=\"ql-code-block\" data-language=\"plain\">target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"># update the retained value and the tmp.vector</div><div class=\"ql-code-block\" data-language=\"plain\"># if the current col is the last col in targetcolnames.vector,</div><div class=\"ql-code-block\" data-language=\"plain\"># update the retainedindexcolvalue</div><div class=\"ql-code-block\" data-language=\"plain\">if (thecurcol == lastcolname) {</div><div class=\"ql-code-block\" data-language=\"plain\">retainedindexcolvalue &lt;- theindexcolvalue</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">assign(tmpvectorname, c(thecolvalue))</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">#finally, if it is the last row, append the id and the values of the current col again</div><div class=\"ql-code-block\" data-language=\"plain\">if (i == nrow(thedf.df)){</div><div class=\"ql-code-block\" data-language=\"plain\">target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">} # end loop</div></div><p><br></p><p>t///</p>","children":[],"_substeps":{"idx":"MY8f0d762e-d9a4-41a5-80cc-99dba0509426","name":"substeps","custparents":[{"idx":"MY7091fb0c-9c67-4485-af7a-a40dac81372c"}],"children":[{"idx":"MY5ab53c71-efbb-4489-a8a6-62e156c8d01b","name":"get the drug_code","custparents":[{"idx":"MY8f0d762e-d9a4-41a5-80cc-99dba0509426"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">i &lt;- i + 1</div><div class=\"ql-code-block\"># get the vlaue of the current index col</div><div class=\"ql-code-block\">        theindexcolvalue &lt;- unlist(thedf.df[row,indexcolname])</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYc1df0007-7846-4963-96ec-b21ee577ac2a","name":"initialize the retained drug code","custparents":[{"idx":"MY5ab53c71-efbb-4489-a8a6-62e156c8d01b"}],"children":[{"idx":"MY2286757a-a99d-41d4-9c82-f70b1647595b","name":"loop for each col in the row (except the indexcol)","custparents":[{"idx":"MYc1df0007-7846-4963-96ec-b21ee577ac2a"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># for a given var, get the distinct values of a col of thedf.df</div><div class=\"ql-code-block\">        for (thecurcol in targetcolnames.vector) {</div><div class=\"ql-code-block\">            tmpvectorname &lt;-  paste0('tmp_', thecurcol, '.vector') # like tmp_DIN.vector</div><div class=\"ql-code-block\">            # make rows of distinct indexcol values</div><div class=\"ql-code-block\">            # e.g., putting all drug_code=2 rows into 1 row. </div><div class=\"ql-code-block\">            # multiple values in other columns are collapsed to a vector </div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            # get the value of the current col</div><div class=\"ql-code-block\">                thecolvalue &lt;- unlist(thedf.df[row,thecurcol])</div><div class=\"ql-code-block\">                # if the indexcol's value remains unchanged</div><div class=\"ql-code-block\">                if (retainedindexcolvalue == theindexcolvalue){</div><div class=\"ql-code-block\">                    # push the value of the current col into the tmp.vector</div><div class=\"ql-code-block\">                    if ( ! thecolvalue %in% get(tmpvectorname)){</div><div class=\"ql-code-block\">                    assign(tmpvectorname, c(get(tmpvectorname), thecolvalue) )   </div><div class=\"ql-code-block\">                    }</div><div class=\"ql-code-block\">                } else {# if the indexcol's value has changed</div><div class=\"ql-code-block\">                        if (i &gt; 1 ){</div><div class=\"ql-code-block\">                            target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\">                        }</div><div class=\"ql-code-block\">                        # update the retained value and the tmp.vector</div><div class=\"ql-code-block\">                        # if the current col is the last col in targetcolnames.vector, </div><div class=\"ql-code-block\">                        # update the retainedindexcolvalue</div><div class=\"ql-code-block\">                        if (thecurcol == lastcolname) {</div><div class=\"ql-code-block\">                            retainedindexcolvalue &lt;- theindexcolvalue </div><div class=\"ql-code-block\">                        }           </div><div class=\"ql-code-block\">                        assign(tmpvectorname, c(thecolvalue))         </div><div class=\"ql-code-block\">                }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">                #finally, if it is the last row, append the id and the values of the current col again</div><div class=\"ql-code-block\">                if (i == nrow(thedf.df)){</div><div class=\"ql-code-block\">                    target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\">                }</div><div class=\"ql-code-block\">        }</div></div><p><br></p><p>t///</p>","children":[],"_substeps":{"idx":"MY48ec277d-32ba-47f5-ae29-14665e76d5ba","name":"substeps","custparents":[{"idx":"MY2286757a-a99d-41d4-9c82-f70b1647595b"}],"children":[{"idx":"MY7473c363-cbb2-40f5-b5c0-f0dc06cf238c","name":"make a tmp vector to hold distinct values in the current col","custparents":[{"idx":"MY48ec277d-32ba-47f5-ae29-14665e76d5ba"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">#make a tmp vector to hold distinct values in the current col</div><div class=\"ql-code-block\">tmpvectorname &lt;-  paste0('tmp_', thecurcol, '.vector') # like tmp_DIN.vector</div><div class=\"ql-code-block\">            </div></div><p><br></p><p>t///</p>","children":[{"idx":"MY4f3f88d5-9e62-41c5-98fb-f8ad4dc65034","name":"Get the values in the current col","custparents":[{"idx":"MY7473c363-cbb2-40f5-b5c0-f0dc06cf238c"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">            # get the value of the current col</div><div class=\"ql-code-block\">            thecolvalue &lt;- unlist(thedf.df[row,thecurcol])</div></div><p>t///</p>","children":[{"idx":"MY335d3db1-db5b-4533-8242-2de31c1d21d0","name":"for the same drug code, add distinct col values into tmp vector","custparents":[{"idx":"MY4f3f88d5-9e62-41c5-98fb-f8ad4dc65034"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">            # if the indexcol's value remains unchanged</div><div class=\"ql-code-block\">            if (retainedindexcolvalue == theindexcolvalue){</div><div class=\"ql-code-block\">                # push the value of the current col into the tmp.vector</div><div class=\"ql-code-block\">                if ( ! thecolvalue %in% get(tmpvectorname)){</div><div class=\"ql-code-block\">                assign(tmpvectorname, c(get(tmpvectorname), thecolvalue) )   </div><div class=\"ql-code-block\">                }</div></div><p>t///</p>","children":[]},{"idx":"MYe11053a4-a00b-4dff-aa08-d8ad95068ab8","name":"For a new drug code","custparents":[{"idx":"MY4f3f88d5-9e62-41c5-98fb-f8ad4dc65034"}],"children":[{"idx":"MY4d9f00a0-a35f-4a8b-a430-89fe235a8ed6","name":"save the vector of col val of the previous drug code into target","custparents":[{"idx":"MYe11053a4-a00b-4dff-aa08-d8ad95068ab8"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">                    if (i &gt; 1 ){</div><div class=\"ql-code-block\" data-language=\"plain\">                        target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\" data-language=\"plain\">                    }</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYa189567d-e4f6-4d5f-8dfd-564159d8ccf9","name":"update the retained drug code (using the new drug code)","custparents":[{"idx":"MY4d9f00a0-a35f-4a8b-a430-89fe235a8ed6"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">                    # update the retained value and the tmp.vector</div><div class=\"ql-code-block\">                    # if the current col is the last col in targetcolnames.vector, </div><div class=\"ql-code-block\">                    # update the retainedindexcolvalue</div><div class=\"ql-code-block\">                    if (thecurcol == lastcolname) {</div><div class=\"ql-code-block\">                        retainedindexcolvalue &lt;- theindexcolvalue </div><div class=\"ql-code-block\">                    } </div></div><p>t///</p>","children":[{"idx":"MYf75d404f-d676-4e34-a3d8-93a829771f0d","name":" saving the current col value to tmp col vector","custparents":[{"idx":"MYa189567d-e4f6-4d5f-8dfd-564159d8ccf9"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># save the current col value of the current row into the tmp col vector</div><div class=\"ql-code-block\">assign(tmpvectorname, c(thecolvalue)) </div></div><p><br></p><p>t///</p>","children":[{"idx":"MY2c9c6014-ccd9-42db-9769-c7df4e5040b5","name":"append data of the same-drug_code into target.df","custparents":[{"idx":"MY335d3db1-db5b-4533-8242-2de31c1d21d0"},{"idx":"MYf75d404f-d676-4e34-a3d8-93a829771f0d"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">            #finally, if it is the last row, append the id and the values of the current col again</div><div class=\"ql-code-block\">            if (i == nrow(thedf.df)){</div><div class=\"ql-code-block\">                target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\">            }</div></div><p><br></p><p>t///</p>"}]}]}]}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">else {# if the indexcol's value has changed</div><div class=\"ql-code-block\">                    if (i &gt; 1 ){</div><div class=\"ql-code-block\">                        target.df[[target.df[indexcolname] == retainedindexcolvalue, thecurcol]] &lt;- get(tmpvectorname)</div><div class=\"ql-code-block\">                    }</div><div class=\"ql-code-block\">                    # update the retained value and the tmp.vector</div><div class=\"ql-code-block\">                    # if the current col is the last col in targetcolnames.vector, </div><div class=\"ql-code-block\">                    # update the retainedindexcolvalue</div><div class=\"ql-code-block\">                    if (thecurcol == lastcolname) {</div><div class=\"ql-code-block\">                        retainedindexcolvalue &lt;- theindexcolvalue </div><div class=\"ql-code-block\">                    }           </div><div class=\"ql-code-block\">                    assign(tmpvectorname, c(thecolvalue))         </div><div class=\"ql-code-block\">            }</div></div><p>t///</p>"}]}]}]}}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #create a var to hold the value of the indexcol</div><div class=\"ql-code-block\">    retainedindexcolvalue &lt;-''</div></div><p><br></p><p>t///</p>"}]}]}}]}]}]}]}]}]}]}]}}]}}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # get the # rows of the df</div><div class=\"ql-code-block\">    nrows&lt;- nrow(get(datadfnamestr))</div><div class=\"ql-code-block\">    print(paste0('the data frame ',datadfnamestr, ' contains ', nrows, ' rows'))</div></div><p><br></p><p>t///</p>"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># get the data and name into the df named by the string 'datadfnamestr'</div><div class=\"ql-code-block\" data-language=\"plain\"># note: not to save the df to 'datadfnamestr', but to save the df to a df named by the str value of 'datadfnamestr'</div><div class=\"ql-code-block\" data-language=\"plain\"># e.g., datadfnamestr &lt;- 'thedata_drug.df', the assign() saves the data to thedata_drug.df</div><div class=\"ql-code-block\" data-language=\"plain\">assign(datadfnamestr, getDataOfATableInAZip_df(tables.df, thetablename, thezipsurfix, tmpzip))</div></div><p><br></p><p>t///</p>","_substeps":{"idx":"MYadccddac-55f0-4fe6-9fe5-874599c263a6","name":"substeps","custparents":[{"idx":"MYf34eaefb-12fb-478e-8c29-82f2547bb406"},{"idx":"MYf34eaefb-12fb-478e-8c29-82f2547bb406"}],"children":[{"idx":"MY0cbd7d08-221f-4101-8048-c276fc040cda","name":"Determine the name of the file ","custparents":[{"idx":"MYadccddac-55f0-4fe6-9fe5-874599c263a6"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # zipfileobj &lt;- tmpzip</div><div class=\"ql-code-block\">    thetablename_surfix &lt;- paste0(thetablename, thezipsurfix)</div><div class=\"ql-code-block\">    # there is an exception:</div><div class=\"ql-code-block\">    # in allfiles_ia.zip, the file inactive.txt does not have a surfix _ia</div><div class=\"ql-code-block\">    if (thetablename == 'inactive') {</div><div class=\"ql-code-block\">        name_thetxt &lt;- paste0(thetablename, \".txt\")</div><div class=\"ql-code-block\">    } else {</div><div class=\"ql-code-block\">        name_thetxt &lt;- paste0(thetablename_surfix, \".txt\")</div><div class=\"ql-code-block\">    }</div></div><p>t///</p>","children":[{"idx":"MY2d7d6b30-babe-4a87-9a93-fb6c840971d7","name":"Unzip the file from the zip","custparents":[{"idx":"MY0cbd7d08-221f-4101-8048-c276fc040cda"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # unzip the text file</div><div class=\"ql-code-block\">    data.list &lt;- read.table(unz(zipfileobj, name_thetxt),  header=F, quote=\"\\\"\", sep=\",\")</div></div><p>t///</p>","children":[{"idx":"MY5db41cac-0543-4414-8bef-61657d665539","name":"Sort the data by the first column (the drug_code)","custparents":[{"idx":"MY2d7d6b30-babe-4a87-9a93-fb6c840971d7"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #https://stackoverflow.com/questions/12460938/r-reading-in-a-zip-data-file-without-unzipping-it</div><div class=\"ql-code-block\">    #data &lt;- read.table(unz(name_thezip, name_thetxt), nrows=10, header=F, quote=\"\\\"\", sep=\",\")</div><div class=\"ql-code-block\">    #order by v1</div><div class=\"ql-code-block\">    data.list &lt;- data.list[order(data.list$V1),]</div></div><p>t///</p>","children":[{"idx":"MY58505b0e-535d-4c43-8094-1c4e29bc0dd7","name":"assign col names according to the file definition(name, vars)","custparents":[{"idx":"MY5db41cac-0543-4414-8bef-61657d665539"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #rename the cols of data</div><div class=\"ql-code-block\">    # get the varnames of the current table</div><div class=\"ql-code-block\">    # from the tables.df, select varnames where table name matches the current tablename</div><div class=\"ql-code-block\">    thetable.df &lt;- tables.df[which(tables.df$table == thetablename), ]</div><div class=\"ql-code-block\">    # get a vector of varnames</div><div class=\"ql-code-block\">    thevars.vector &lt;- thetable.df[,'varname']</div><div class=\"ql-code-block\">    # rename the data cols according to varnames in the varname vector</div><div class=\"ql-code-block\">    colnames(data.list) &lt;- thevars.vector</div></div><p>t///</p>","children":[{"idx":"MY37cc755b-bf1a-4c5e-b770-f069baeb3564","name":"change the data from a list to a df","custparents":[{"idx":"MY58505b0e-535d-4c43-8094-1c4e29bc0dd7"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # change data into a df</div><div class=\"ql-code-block\">    # Note! turn off the string as factors setting does not work for datalist that has been created as stringasfactors=true</div><div class=\"ql-code-block\">    thedata.df &lt;- data.frame(data.list, stringsAsFactors =FALSE)</div><div class=\"ql-code-block\">    # reset row index</div><div class=\"ql-code-block\">    rownames(thedata.df) &lt;- NULL</div><div class=\"ql-code-block\">    # head(thedata.df)</div></div><p>t///</p>","children":[{"idx":"MY01bd8eab-d281-48b7-afa5-f614f413ee68","name":"Return the data as a df","custparents":[{"idx":"MY37cc755b-bf1a-4c5e-b770-f069baeb3564"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">return (thedata.df)</div></div><p>t///</p>"}]}]}]}]}]}]}}]}}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># determine name of the df according to the file name</div><div class=\"ql-code-block\" data-language=\"plain\">thetablename_surfix &lt;- paste0(thetablename, thezipsurfix)</div><div class=\"ql-code-block\" data-language=\"plain\"># thetablename_surfix</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">#determine the name of the df</div><div class=\"ql-code-block\" data-language=\"plain\">    datadfnamestr=paste0(thetablename_surfix, '.df')</div></div><p><br></p><p>t///</p>"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # by default,let file count =1</div><div class=\"ql-code-block\">    if (missing(filecount)) {filecount &lt;- 1 }</div></div><p>t///</p>"}]}}]}}]},{"idx":"MY5df60e5f-9e0c-4740-9d12-a8321ec20d8f","name":"substeps","custparents":[{"idx":"MY15194db3-9357-4c45-8fc9-460fb0fd3796"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># a tool to make a df with information of tables (table name, varname, and vartype)</div><div class=\"ql-code-block\">maketableinfo_dpd_my &lt;- function (){</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    print('start maketableinfo_dpd_my ===============================')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # input the raw table info (i.e., input the table name, var name, and var type )</div><div class=\"ql-code-block\">    rawtablestr_vector &lt;- inputrawtableinfo_vector_my()</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    #create an empty vector</div><div class=\"ql-code-block\">    tables_vector &lt;- vector()</div><div class=\"ql-code-block\">    #loop for each element in the vector 'rawtablestr_vector', </div><div class=\"ql-code-block\">    # convert the element (a string containing raw table info) into a vector</div><div class=\"ql-code-block\">    for (x in rawtablestr_vector) {</div><div class=\"ql-code-block\">        therawtableEles_vector &lt;- str2vector_my(x)</div><div class=\"ql-code-block\">        # the eles in therawtableEles_vector include the table name, followed by (varname1, vartype1), (varname2, vartype2)... repeatedly</div><div class=\"ql-code-block\">        #get the table name</div><div class=\"ql-code-block\">        thetablename &lt;- therawtableEles_vector[1]</div><div class=\"ql-code-block\">        #put the rest elements into a separate vector by removing the first element</div><div class=\"ql-code-block\">        varnametypes_vector &lt;- therawtableEles_vector[-1]</div><div class=\"ql-code-block\">        #covert the varnametypes_vector into a matrix of 2 columns (varname, vartype)</div><div class=\"ql-code-block\">        varnametypes_matrix &lt;- matrix(varnametypes_vector, ncol=2, byrow=TRUE)</div><div class=\"ql-code-block\">        # add col names</div><div class=\"ql-code-block\">        colnames(varnametypes_matrix) &lt;- c(\"varname\", 'vartype')</div><div class=\"ql-code-block\">        # split the matrix by column into 2 vectors</div><div class=\"ql-code-block\">        varname_vector= varnametypes_matrix[,1]</div><div class=\"ql-code-block\">        vartype_vector= varnametypes_matrix[,2]</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        # convert the table info into a list with three fields (i.e., table, varname, vartype)</div><div class=\"ql-code-block\">        thetable_list &lt;- list(</div><div class=\"ql-code-block\">            table=thetablename,</div><div class=\"ql-code-block\">            varname = varname_vector,</div><div class=\"ql-code-block\">            vartype = vartype_vector</div><div class=\"ql-code-block\">        )</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        # push the current table into the big vector which contains all tables</div><div class=\"ql-code-block\">        tables_vector = c(tables_vector, thetable_list)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        # Preferred to convert a list to a JSON, not a dataframe (in a dataframe, the values in the col 'table' repeat)</div><div class=\"ql-code-block\">        # covert the list to a JSON</div><div class=\"ql-code-block\">        # thetable_JSON &lt;- toJSON(thetable_list)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        # convert theJSON back to a list</div><div class=\"ql-code-block\">        # thetable_list &lt;- fromJSON(thetable_JSON)</div><div class=\"ql-code-block\">    }# end of loop</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # convert the tables_vector to a list with one field, 'tables'</div><div class=\"ql-code-block\">    tables_list &lt;- list (</div><div class=\"ql-code-block\">        tables = tables_vector</div><div class=\"ql-code-block\">    )</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # covert the tables_list to a JSON</div><div class=\"ql-code-block\">    tables_JSON &lt;- toJSON(tables_list)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # write/save to a local file (as a text file)</div><div class=\"ql-code-block\">    # fileConn&lt;-file(\"tables.json\")</div><div class=\"ql-code-block\">    # writeLines(tables_JSON, fileConn)</div><div class=\"ql-code-block\">    # close(fileConn)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # convert theJSON back to a list</div><div class=\"ql-code-block\">    tables_list &lt;- fromJSON(tables_JSON)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # convert the tables_vector back to a vector</div><div class=\"ql-code-block\">    tables_vector &lt;- (tables_list$tables)</div><div class=\"ql-code-block\">    # tables_vector</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # loop for each table in tables_vector</div><div class=\"ql-code-block\">    i &lt;-0</div><div class=\"ql-code-block\">    # create a blank dataframe</div><div class=\"ql-code-block\">    tables_df &lt;- data.frame(matrix(ncol = 3, nrow = 0))</div><div class=\"ql-code-block\">    colnames(tables_df) &lt;- c('table', 'varname', 'vartype')</div><div class=\"ql-code-block\">    tables_df </div><div class=\"ql-code-block\">    for (x in tables_vector) {</div><div class=\"ql-code-block\">        i=i+1</div><div class=\"ql-code-block\">        # get the table name</div><div class=\"ql-code-block\">        if (i %% 3 == 1) {</div><div class=\"ql-code-block\">            thetablename &lt;- unlist(x)</div><div class=\"ql-code-block\">        } else {</div><div class=\"ql-code-block\">            # get the var name</div><div class=\"ql-code-block\">            if (i %% 3 == 2) {</div><div class=\"ql-code-block\">                    varname_vector &lt;- unlist(x)</div><div class=\"ql-code-block\">                } else {</div><div class=\"ql-code-block\">                    # get the var type</div><div class=\"ql-code-block\">                    vartype_vector &lt;- unlist(x)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">                    # make a list of three cols</div><div class=\"ql-code-block\">                    thetable_list = list(table=thetablename, varname=varname_vector, vartype=vartype_vector)</div><div class=\"ql-code-block\">                    # make a data frame from the list</div><div class=\"ql-code-block\">                    thetable_df=data.frame(thetable_list)</div><div class=\"ql-code-block\">                    # append thetable_df to the big dataframe: tables_df</div><div class=\"ql-code-block\">                    tables_df &lt;- rbind(tables_df, thetable_df)</div><div class=\"ql-code-block\">                } # end else</div><div class=\"ql-code-block\">        } # end if/else</div><div class=\"ql-code-block\">    } # end for loop</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    return (tables_df)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">} # end function make df of tables</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYc1b37947-50e8-4985-bdf3-548d4eeb5be0","name":"inputrawtableinfo _vector_my() to define files (name, vars)","custparents":[{"idx":"MY5df60e5f-9e0c-4740-9d12-a8321ec20d8f"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # input the raw table info (i.e., input the table name, var name, and var type )</div><div class=\"ql-code-block\">    rawtablestr_vector &lt;- inputrawtableinfo_vector_my()</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY87e659bb-2201-40e6-8f78-29cdca32609b","name":"empty vector to hold definition of files (name, vars)","custparents":[{"idx":"MYc1b37947-50e8-4985-bdf3-548d4eeb5be0"}],"children":[{"idx":"MY3273e890-bccc-4afe-ad21-8d103dc170c6","name":"Loop for each string with file name and vars","custparents":[{"idx":"MY87e659bb-2201-40e6-8f78-29cdca32609b"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">for (x in rawtablestr_vector) {</div><div class=\"ql-code-block\">        # convert the string (table name and vars) into a vector</div><div class=\"ql-code-block\">        therawtableEles_vector &lt;- str2vector_my(x)</div><div class=\"ql-code-block\">        # the eles in therawtableEles_vector include the table name, followed by (varname1, vartype1), (varname2, vartype2)... repeatedly</div><div class=\"ql-code-block\">        #get the table name</div><div class=\"ql-code-block\">        thetablename &lt;- therawtableEles_vector[1]</div><div class=\"ql-code-block\">        #put the rest elements into a separate vector by removing the first element</div><div class=\"ql-code-block\">        varnametypes_vector &lt;- therawtableEles_vector[-1]</div><div class=\"ql-code-block\">        #covert the varnametypes_vector into a matrix of 2 columns (varname, vartype)</div><div class=\"ql-code-block\">        varnametypes_matrix &lt;- matrix(varnametypes_vector, ncol=2, byrow=TRUE)</div><div class=\"ql-code-block\">        # add col names</div><div class=\"ql-code-block\">        colnames(varnametypes_matrix) &lt;- c(\"varname\", 'vartype')</div><div class=\"ql-code-block\">        # split the matrix by column into 2 vectors</div><div class=\"ql-code-block\">        varname_vector= varnametypes_matrix[,1]</div><div class=\"ql-code-block\">        vartype_vector= varnametypes_matrix[,2]</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        # convert the table info into a list with three fields (i.e., table, varname, vartype)</div><div class=\"ql-code-block\">        thetable_list &lt;- list(</div><div class=\"ql-code-block\">            table=thetablename,</div><div class=\"ql-code-block\">            varname = varname_vector,</div><div class=\"ql-code-block\">            vartype = vartype_vector</div><div class=\"ql-code-block\">        )</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        # push the current table into the big vector which contains all tables</div><div class=\"ql-code-block\">        tables_vector = c(tables_vector, thetable_list)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        # Preferred to convert a list to a JSON, not a dataframe (in a dataframe, the values in the col 'table' repeat)</div><div class=\"ql-code-block\">        # covert the list to a JSON</div><div class=\"ql-code-block\">        # thetable_JSON &lt;- toJSON(thetable_list)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        # convert theJSON back to a list</div><div class=\"ql-code-block\">        # thetable_list &lt;- fromJSON(thetable_JSON)</div><div class=\"ql-code-block\">    }# end of loop</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYf9d6603a-2f13-42a9-86b9-98276ff67e9f","name":"initial a df for file info","custparents":[{"idx":"MY9d00d191-26ce-481f-b9fa-5fc1321e00b9"},{"idx":"MY3273e890-bccc-4afe-ad21-8d103dc170c6"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # loop for each table in tables_vector</div><div class=\"ql-code-block\">    i &lt;-0</div><div class=\"ql-code-block\">    # create a blank dataframe</div><div class=\"ql-code-block\">    tables_df &lt;- data.frame(matrix(ncol = 3, nrow = 0))</div><div class=\"ql-code-block\">    colnames(tables_df) &lt;- c('table', 'varname', 'vartype')</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY79c88dc2-747c-4441-962e-0d62f7ef59fb","name":"loop for each file in the vector","custparents":[{"idx":"MYf9d6603a-2f13-42a9-86b9-98276ff67e9f"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># tables_df</div><div class=\"ql-code-block\" data-language=\"plain\">for (x in tables_vector) {</div><div class=\"ql-code-block\" data-language=\"plain\">i=i+1</div><div class=\"ql-code-block\" data-language=\"plain\"># get the table name</div><div class=\"ql-code-block\" data-language=\"plain\">if (i %% 3 == 1) {</div><div class=\"ql-code-block\" data-language=\"plain\">thetablename &lt;- unlist(x)</div><div class=\"ql-code-block\" data-language=\"plain\">} else {</div><div class=\"ql-code-block\" data-language=\"plain\"># get the var name</div><div class=\"ql-code-block\" data-language=\"plain\">if (i %% 3 == 2) {</div><div class=\"ql-code-block\" data-language=\"plain\">varname_vector &lt;- unlist(x)</div><div class=\"ql-code-block\" data-language=\"plain\">} else {</div><div class=\"ql-code-block\" data-language=\"plain\"># get the var type</div><div class=\"ql-code-block\" data-language=\"plain\">vartype_vector &lt;- unlist(x)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># make a list of three cols</div><div class=\"ql-code-block\" data-language=\"plain\">thetable_list = list(table=thetablename, varname=varname_vector, vartype=vartype_vector)</div><div class=\"ql-code-block\" data-language=\"plain\"># make a data frame from the list</div><div class=\"ql-code-block\" data-language=\"plain\">thetable_df=data.frame(thetable_list)</div><div class=\"ql-code-block\" data-language=\"plain\"># append thetable_df to the big dataframe: tables_df</div><div class=\"ql-code-block\" data-language=\"plain\">tables_df &lt;- rbind(tables_df, thetable_df)</div><div class=\"ql-code-block\" data-language=\"plain\">} # end else</div><div class=\"ql-code-block\" data-language=\"plain\">} # end if/else</div><div class=\"ql-code-block\" data-language=\"plain\">} # end for loop</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY1b6ed5d4-6f07-4ef9-b396-ed98e7333117","name":"Return the tables_df","custparents":[{"idx":"MY79c88dc2-747c-4441-962e-0d62f7ef59fb"}]}],"_substeps":{"idx":"MY8364401a-f5d4-4b79-9336-a2ec20936a16","name":"substeps","custparents":[{"idx":"MY79c88dc2-747c-4441-962e-0d62f7ef59fb"}],"children":[{"idx":"MY92884e06-a3b6-4f08-a2b1-9b0665866e7c","name":"get the name of the file","custparents":[{"idx":"MY8364401a-f5d4-4b79-9336-a2ec20936a16"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">        # get the table name</div><div class=\"ql-code-block\">        if (i %% 3 == 1) {</div><div class=\"ql-code-block\">            thetablename &lt;- unlist(x)</div><div class=\"ql-code-block\">        } </div></div><p><br></p><p>t///</p>","children":[{"idx":"MYba7d07eb-d5e4-4142-8525-3c4384588d5b","name":"get the var name","custparents":[{"idx":"MY92884e06-a3b6-4f08-a2b1-9b0665866e7c"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">else {</div><div class=\"ql-code-block\">            # get the var name</div><div class=\"ql-code-block\">            if (i %% 3 == 2) {</div><div class=\"ql-code-block\">                    varname_vector &lt;- unlist(x)</div><div class=\"ql-code-block\">                } else</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYeb190189-a01f-4d96-ab3e-119d3f3cc491","name":"get the var type","custparents":[{"idx":"MYba7d07eb-d5e4-4142-8525-3c4384588d5b"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">else {</div><div class=\"ql-code-block\">                    # get the var type</div><div class=\"ql-code-block\">                    vartype_vector &lt;- unlist(x)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">                    # make a list of three cols</div><div class=\"ql-code-block\">                    thetable_list = list(table=thetablename, varname=varname_vector, vartype=vartype_vector)</div><div class=\"ql-code-block\">                    # make a data frame from the list</div><div class=\"ql-code-block\">                    thetable_df=data.frame(thetable_list)</div><div class=\"ql-code-block\">                    # append thetable_df to the big dataframe: tables_df</div><div class=\"ql-code-block\">                    tables_df &lt;- rbind(tables_df, thetable_df)</div><div class=\"ql-code-block\">                } # end else</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY62d16cf4-9337-4b05-8b4f-515147d9f62b","name":"Combine the file name var and var type into a list","custparents":[{"idx":"MYeb190189-a01f-4d96-ab3e-119d3f3cc491"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">                    # make a list of three cols</div><div class=\"ql-code-block\">                    thetable_list = list(table=thetablename, varname=varname_vector, vartype=vartype_vector)</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYaeaf2e25-641e-46c0-b454-f99ee4bca701","name":"convert the list to a df","custparents":[{"idx":"MY62d16cf4-9337-4b05-8b4f-515147d9f62b"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">                    # make a data frame from the list</div><div class=\"ql-code-block\">                    thetable_df=data.frame(thetable_list)</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY44fee2e4-1b13-4f4e-a49d-9d40a3ca4937","name":"Append to the df for all files","custparents":[{"idx":"MYaeaf2e25-641e-46c0-b454-f99ee4bca701"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">                    # append thetable_df to the big dataframe: tables_df</div><div class=\"ql-code-block\">                    tables_df &lt;- rbind(tables_df, thetable_df)</div></div><p><br></p><p>t///</p>"}]}]}]}]}]}]}}]},{"idx":"MY9d00d191-26ce-481f-b9fa-5fc1321e00b9","name":"Optional convert the files vector into a JSON","custparents":[{"idx":"MY3273e890-bccc-4afe-ad21-8d103dc170c6"},{"idx":"MY3273e890-bccc-4afe-ad21-8d103dc170c6"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">    #################################################################</div><div class=\"ql-code-block\" data-language=\"plain\">    # the following 3 steps are for practice</div><div class=\"ql-code-block\" data-language=\"plain\">    </div><div class=\"ql-code-block\" data-language=\"plain\">    # # convert the tables_vector to a list with one field, 'tables'</div><div class=\"ql-code-block\" data-language=\"plain\">    # tables_list &lt;- list (</div><div class=\"ql-code-block\" data-language=\"plain\">    #     tables = tables_vector</div><div class=\"ql-code-block\" data-language=\"plain\">    # )</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # # covert the tables_list to a JSON</div><div class=\"ql-code-block\" data-language=\"plain\">    # tables_JSON &lt;- toJSON(tables_list)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # # write/save to a local file (as a text file)</div><div class=\"ql-code-block\" data-language=\"plain\">    # # fileConn&lt;-file(\"tables.json\")</div><div class=\"ql-code-block\" data-language=\"plain\">    # # writeLines(tables_JSON, fileConn)</div><div class=\"ql-code-block\" data-language=\"plain\">    # # close(fileConn)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # # convert theJSON back to a list</div><div class=\"ql-code-block\" data-language=\"plain\">    # tables_list &lt;- fromJSON(tables_JSON)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    # # convert the tables_vector back to a vector</div><div class=\"ql-code-block\" data-language=\"plain\">    # tables_vector &lt;- (tables_list$tables)</div><div class=\"ql-code-block\" data-language=\"plain\">    # # tables_vector</div><div class=\"ql-code-block\" data-language=\"plain\">    ##################################################################</div></div><p><br></p><p>t///</p>","children":[]}],"_substeps":{"idx":"MY147cde00-e1df-4124-95d3-65adc7213fa8","name":"substeps","custparents":[{"idx":"MY3273e890-bccc-4afe-ad21-8d103dc170c6"}],"children":[{"idx":"MYbe365929-0c14-4ef6-bd27-6c620f78c438","name":"convert string of file info (name, vars) into a vector","custparents":[{"idx":"MY147cde00-e1df-4124-95d3-65adc7213fa8"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># convert the string (table name and vars) into a vector</div><div class=\"ql-code-block\" data-language=\"plain\">therawtableEles_vector &lt;- str2vector_my(x)</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY2fe4066f-0afa-4f1f-ad96-9fd44deef197","name":"get the current file name","custparents":[{"idx":"MYbe365929-0c14-4ef6-bd27-6c620f78c438"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">        # the eles in therawtableEles_vector include the table name, followed by (varname1, vartype1), (varname2, vartype2)... repeatedly</div><div class=\"ql-code-block\">        #get the table name</div><div class=\"ql-code-block\">        thetablename &lt;- therawtableEles_vector[1]</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY5a42117f-3510-45d4-8b66-0415c77d323a","name":"A vector of vars","custparents":[{"idx":"MY2fe4066f-0afa-4f1f-ad96-9fd44deef197"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">        #put the rest elements into a separate vector by removing the first element</div><div class=\"ql-code-block\">        varnametypes_vector &lt;- therawtableEles_vector[-1]</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY4695a28d-8eec-41a3-a0f5-08a957832612","name":"split var names and var types","custparents":[{"idx":"MY5a42117f-3510-45d4-8b66-0415c77d323a"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">#convert the varnametypes_vector into a matrix of 2 columns (varname, vartype)</div><div class=\"ql-code-block\" data-language=\"plain\">varnametypes_matrix &lt;- matrix(varnametypes_vector, ncol=2, byrow=TRUE)</div><div class=\"ql-code-block\" data-language=\"plain\"># add col names</div><div class=\"ql-code-block\" data-language=\"plain\">colnames(varnametypes_matrix) &lt;- c(\"varname\", 'vartype')</div><div class=\"ql-code-block\" data-language=\"plain\">        # split the matrix by column into 2 vectors</div><div class=\"ql-code-block\" data-language=\"plain\">        varname_vector= varnametypes_matrix[,1]</div><div class=\"ql-code-block\" data-language=\"plain\">        vartype_vector= varnametypes_matrix[,2]</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY0155c56b-10e1-4196-b215-6305ea0f28d1","name":"make file name vars and var types into a list","custparents":[{"idx":"MY093c3404-cf1b-441f-8867-05ce6ae4cd24"},{"idx":"MY4695a28d-8eec-41a3-a0f5-08a957832612"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">        # convert the table info into a list with three fields (i.e., table, varname, vartype)</div><div class=\"ql-code-block\">        thetable_list &lt;- list(</div><div class=\"ql-code-block\">            table=thetablename,</div><div class=\"ql-code-block\">            varname = varname_vector,</div><div class=\"ql-code-block\">            vartype = vartype_vector</div><div class=\"ql-code-block\">        )</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY426092b8-84f2-449c-bf7c-0ed1cb7d3da9","name":"Append the list of file info into a vector to hold info of all files","custparents":[{"idx":"MY0155c56b-10e1-4196-b215-6305ea0f28d1"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">        # push the current table into the big vector which contains all tables</div><div class=\"ql-code-block\">        tables_vector = c(tables_vector, thetable_list)</div></div><p><br></p><p>t///</p>"}]}]}]}]}],"_substeps":{"idx":"MY4475417a-e2ee-4c9d-91e7-851691f6e2f1","name":"substeps","custparents":[{"idx":"MYbe365929-0c14-4ef6-bd27-6c620f78c438"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># a function to convert a string into a vector, ignoring empty elements if not specified to keep empty elements</div><div class=\"ql-code-block\">str2vector_my &lt;- function (thestr, dlmt, noempty) {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    print('start str2vector_my ===============================')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # by default, dlmt is blank space, or line breaker</div><div class=\"ql-code-block\">    if (missing(dlmt)) { dlmt &lt;- \"[ \\n]+\" }</div><div class=\"ql-code-block\">    # by default, ignore empty elements</div><div class=\"ql-code-block\">    if (missing(noempty)) { noempty &lt;- 1 }</div><div class=\"ql-code-block\">    # print (noempty)</div><div class=\"ql-code-block\">    # split the str into a vector. Note: the strsplit() results in a list, need to convert it back to a vector</div><div class=\"ql-code-block\">    thevector_list &lt;- strsplit(thestr, split=\"[ \\n]+\");</div><div class=\"ql-code-block\">    thevector &lt;- unlist(thevector_list)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # remove the empty elements</div><div class=\"ql-code-block\">    if (noempty == 1 || tolower(noempty) == 'y' || tolower(noempty) == 'yes' || tolower(noempty) == TRUE ){</div><div class=\"ql-code-block\">        thevector_list &lt;-lapply(thevector, function(x){x[!x == \"\"]})</div><div class=\"ql-code-block\">        #Note: lapply() results in a list, need to convert it back to a vector</div><div class=\"ql-code-block\">        thevector = unlist(thevector_list)</div><div class=\"ql-code-block\">        # print(thevector)</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">    return (thevector)</div><div class=\"ql-code-block\">}</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY6b7bf053-b8b1-4fd6-a69c-eb7b774ba2a5","name":"determine the dlmt","custparents":[{"idx":"MY4475417a-e2ee-4c9d-91e7-851691f6e2f1"}],"children":[{"idx":"MY1559903a-cdee-4b2c-a504-f20c311107f1","name":"determine whether to ignore empty elements","custparents":[{"idx":"MY6b7bf053-b8b1-4fd6-a69c-eb7b774ba2a5"}],"children":[{"idx":"MY66ce7cce-dcbc-4e1c-a146-7bd319553bda","name":"Split the string into a vector by dlmt","custparents":[{"idx":"MY1559903a-cdee-4b2c-a504-f20c311107f1"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # split the str into a vector. Note: the strsplit() results in a list, need to convert it back to a vector</div><div class=\"ql-code-block\">    thevector_list &lt;- strsplit(thestr, split=\"[ \\n]+\");</div><div class=\"ql-code-block\">    thevector &lt;- unlist(thevector_list)</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYa9451c6d-fee1-4864-a6d7-f0bd72ca21af","name":"remove empty elements if required","custparents":[{"idx":"MY66ce7cce-dcbc-4e1c-a146-7bd319553bda"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # remove the empty elements</div><div class=\"ql-code-block\">    if (noempty == 1 || tolower(noempty) == 'y' || tolower(noempty) == 'yes' || tolower(noempty) == TRUE ){</div><div class=\"ql-code-block\">        thevector_list &lt;-lapply(thevector, function(x){x[!x == \"\"]})</div><div class=\"ql-code-block\">        #Note: lapply() results in a list, need to convert it back to a vector</div><div class=\"ql-code-block\">        thevector = unlist(thevector_list)</div><div class=\"ql-code-block\">        # print(thevector)</div><div class=\"ql-code-block\">    }</div></div><p><br></p><p>t///</p>","children":[{"idx":"MYf06139f2-f568-4061-a20f-6f7aae445784","name":"return the file vector","custparents":[{"idx":"MYa9451c6d-fee1-4864-a6d7-f0bd72ca21af"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">return (thevector)</div></div><p><br></p><p>t///</p>"}]}]}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # by default, ignore empty elements</div><div class=\"ql-code-block\">    if (missing(noempty)) { noempty &lt;- 1 }</div></div><p><br></p><p>t///</p>"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # by default, dlmt is blank space, or line breaker</div><div class=\"ql-code-block\">    if (missing(dlmt)) { dlmt &lt;- \"[ \\n]+\" }</div></div><p><br></p><p>t///</p>"}]}}]}}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #create an empty vector</div><div class=\"ql-code-block\">    tables_vector &lt;- vector()</div></div><p><br></p><p>t///</p>"},{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406","name":"substeps","custparents":[{"idx":"MYc1b37947-50e8-4985-bdf3-548d4eeb5be0"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># covert the raw table vars info into a vector</div><div class=\"ql-code-block\" data-language=\"plain\">inputrawtableinfo_vector_my &lt;- function (){</div><div class=\"ql-code-block\" data-language=\"plain\">x &lt;- c(</div><div class=\"ql-code-block\" data-language=\"plain\">\"ingred</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">ACTIVE_INGREDIENT_CODE NUMBER(6)</div><div class=\"ql-code-block\" data-language=\"plain\">INGREDIENT VARCHAR2(200)</div><div class=\"ql-code-block\" data-language=\"plain\">INGREDIENT_SUPPLIED_IND VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">STRENGTH VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">STRENGTH_UNIT VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">STRENGTH_TYPE VARCHAR2(1)</div><div class=\"ql-code-block\" data-language=\"plain\">DOSAGE_VALUE VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">BASE VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">DOSAGE_UNIT VARCHAR2(10)</div><div class=\"ql-code-block\" data-language=\"plain\">NOTES VARCHAR2(110)</div><div class=\"ql-code-block\" data-language=\"plain\">INGREDIENT_F VARCHAR2(270)</div><div class=\"ql-code-block\" data-language=\"plain\">STRENGTH_UNIT_F VARCHAR2(80)</div><div class=\"ql-code-block\" data-language=\"plain\">STRENGTH_TYPE_F VARCHAR2(1)</div><div class=\"ql-code-block\" data-language=\"plain\">DOSAGE_UNIT_F VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"</div><div class=\"ql-code-block\" data-language=\"plain\">comp</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">MFR_CODE VARCHAR2(10)</div><div class=\"ql-code-block\" data-language=\"plain\">COMPANY_CODE NUMBER(6)</div><div class=\"ql-code-block\" data-language=\"plain\">COMPANY_NAME VARCHAR2(100)</div><div class=\"ql-code-block\" data-language=\"plain\">COMPANY_TYPE VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">ADDRESS_MAILING_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">ADDRESS_BILLING_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">ADDRESS_NOTIFICATION_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">ADDRESS_OTHER VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">SUITE_NUMBER VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">STREET_NAME VARCHAR2(80)</div><div class=\"ql-code-block\" data-language=\"plain\">CITY_NAME VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">PROVINCE VARCHAR2(30)</div><div class=\"ql-code-block\" data-language=\"plain\">COUNTRY VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">POSTAL_CODE VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">POST_OFFICE_BOX VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">PROVINCE_F VARCHAR2(30)</div><div class=\"ql-code-block\" data-language=\"plain\">COUNTRY_F VARCHAR2(30)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"drug</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">PRODUCT_CATEGORIZATION VARCHAR2(50)</div><div class=\"ql-code-block\" data-language=\"plain\">CLASS VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_IDENTIFICATION_NUMBER VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">BRAND_NAME VARCHAR2(200)</div><div class=\"ql-code-block\" data-language=\"plain\">DESCRIPTOR VARCHAR2(200)</div><div class=\"ql-code-block\" data-language=\"plain\">PEDIATRIC_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">ACCESSION_NUMBER VARCHAR2(10)</div><div class=\"ql-code-block\" data-language=\"plain\">NUMBER_OF_AIS VARCHAR2(10)</div><div class=\"ql-code-block\" data-language=\"plain\">LAST_UPDATE_DATE DATE</div><div class=\"ql-code-block\" data-language=\"plain\">AI_GROUP_NO VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">CLASS_F VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">BRAND_NAME_F VARCHAR2(120)</div><div class=\"ql-code-block\" data-language=\"plain\">DESCRIPTOR_F VARCHAR2(140)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"</div><div class=\"ql-code-block\" data-language=\"plain\">status</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">CURRENT_STATUS_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">STATUS VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">HISTORY_DATE DATE</div><div class=\"ql-code-block\" data-language=\"plain\">STATUS_F VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">LOT_NUMBER VARCHAR2(50)</div><div class=\"ql-code-block\" data-language=\"plain\">EXPIRATION_DATE DATE</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"</div><div class=\"ql-code-block\" data-language=\"plain\">form</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">PHARM_FORM_CODE NUMBER(7)</div><div class=\"ql-code-block\" data-language=\"plain\">PHARMACEUTICAL_FORM VARCHAR2(60)</div><div class=\"ql-code-block\" data-language=\"plain\">PHARMACEUTICAL_FORM_F VARCHAR2(60)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"</div><div class=\"ql-code-block\" data-language=\"plain\">package</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">UPC VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">PACKAGE_SIZE_UNIT VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">PACKAGE_TYPE VARCHAR2(25)</div><div class=\"ql-code-block\" data-language=\"plain\">PACKAGE_SIZE VARCHAR2(10)</div><div class=\"ql-code-block\" data-language=\"plain\">PRODUCT_INFORMATION VARCHAR2(100)</div><div class=\"ql-code-block\" data-language=\"plain\">PACKAGE_SIZE_UNIT_F VARCHAR2(1)</div><div class=\"ql-code-block\" data-language=\"plain\">PACKAGE_TYPE_F VARCHAR2(1)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"pharm</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">PHARMACEUTICAL_STD VARCHAR2(10)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"route</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">ROUTE_OF_ADMINISTRATION_CODE NUMBER(6)</div><div class=\"ql-code-block\" data-language=\"plain\">ROUTE_OF_ADMINISTRATION VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">ROUTE_OF_ADMINISTRATION_F VARCHAR2(65)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"schedule</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">SCHEDULE VARCHAR2(30)</div><div class=\"ql-code-block\" data-language=\"plain\">SCHEDULE_F VARCHAR2(30)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"ther</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">TC_ATC_NUMBER VARCHAR2(10)</div><div class=\"ql-code-block\" data-language=\"plain\">TC_ATC VARCHAR2(80)</div><div class=\"ql-code-block\" data-language=\"plain\">TC_AHFS_NUMBER VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">TC_AHFS VARCHAR2(80)</div><div class=\"ql-code-block\" data-language=\"plain\">TC_ATC_F VARCHAR2(1)</div><div class=\"ql-code-block\" data-language=\"plain\">TC_AHFS_F VARCHAR2(60)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"vet</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">VET_SPECIES VARCHAR2(50)</div><div class=\"ql-code-block\" data-language=\"plain\">VET_SUB_SPECIES VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">VET_SPECIES_F VARCHAR2(50)</div><div class=\"ql-code-block\" data-language=\"plain\">\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"</div><div class=\"ql-code-block\" data-language=\"plain\">inactive</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_IDENTIFICATION_NUMBER_IA VARCHAR2(29)</div><div class=\"ql-code-block\" data-language=\"plain\">BRAND_NAME_IA VARCHAR2(200)</div><div class=\"ql-code-block\" data-language=\"plain\">HISTORY_DATE_IA DATE</div><div class=\"ql-code-block\" data-language=\"plain\">\"</div><div class=\"ql-code-block\" data-language=\"plain\">)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">return (x)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p><br></p><p>t///</p>","children":[{"idx":"MY9ad06c87-c6eb-46d8-abe2-6f9d8f33540e","name":"ingredient","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">\"ingred</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    ACTIVE_INGREDIENT_CODE NUMBER(6)</div><div class=\"ql-code-block\">    INGREDIENT VARCHAR2(200)</div><div class=\"ql-code-block\">    INGREDIENT_SUPPLIED_IND VARCHAR2(2)</div><div class=\"ql-code-block\">    STRENGTH VARCHAR2(20)</div><div class=\"ql-code-block\">    STRENGTH_UNIT VARCHAR2(20)</div><div class=\"ql-code-block\">    STRENGTH_TYPE VARCHAR2(1)</div><div class=\"ql-code-block\">    DOSAGE_VALUE VARCHAR2(20)</div><div class=\"ql-code-block\">    BASE VARCHAR2(2)</div><div class=\"ql-code-block\">    DOSAGE_UNIT VARCHAR2(10)</div><div class=\"ql-code-block\">    NOTES VARCHAR2(110)</div><div class=\"ql-code-block\">    INGREDIENT_F VARCHAR2(270)</div><div class=\"ql-code-block\">    STRENGTH_UNIT_F VARCHAR2(80)</div><div class=\"ql-code-block\">    STRENGTH_TYPE_F VARCHAR2(1)</div><div class=\"ql-code-block\">    DOSAGE_UNIT_F VARCHAR2(20)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MY620ea364-47e1-4095-a5fb-4e5d4c56af4e","name":"comp","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">\"</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">comp</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">MFR_CODE VARCHAR2(10)</div><div class=\"ql-code-block\" data-language=\"plain\">COMPANY_CODE NUMBER(6)</div><div class=\"ql-code-block\" data-language=\"plain\">COMPANY_NAME VARCHAR2(100)</div><div class=\"ql-code-block\" data-language=\"plain\">COMPANY_TYPE VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">ADDRESS_MAILING_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">ADDRESS_BILLING_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">ADDRESS_NOTIFICATION_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">ADDRESS_OTHER VARCHAR2(2)</div><div class=\"ql-code-block\" data-language=\"plain\">SUITE_NUMBER VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">STREET_NAME VARCHAR2(80)</div><div class=\"ql-code-block\" data-language=\"plain\">CITY_NAME VARCHAR2(40)</div><div class=\"ql-code-block\" data-language=\"plain\">PROVINCE VARCHAR2(30)</div><div class=\"ql-code-block\" data-language=\"plain\">COUNTRY VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">POSTAL_CODE VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">POST_OFFICE_BOX VARCHAR2(20)</div><div class=\"ql-code-block\" data-language=\"plain\">PROVINCE_F VARCHAR2(30)</div><div class=\"ql-code-block\" data-language=\"plain\">COUNTRY_F VARCHAR2(30)</div><div class=\"ql-code-block\" data-language=\"plain\">\"</div></div><p>t///</p>"},{"idx":"MY9d56be9f-483c-4b5f-964e-efbf58772de1","name":"drug","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">\"drug</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    PRODUCT_CATEGORIZATION VARCHAR2(50)</div><div class=\"ql-code-block\">    CLASS VARCHAR2(20)</div><div class=\"ql-code-block\">    DRUG_IDENTIFICATION_NUMBER VARCHAR2(40)</div><div class=\"ql-code-block\">    BRAND_NAME VARCHAR2(200)</div><div class=\"ql-code-block\">    DESCRIPTOR VARCHAR2(200)</div><div class=\"ql-code-block\">    PEDIATRIC_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\">    ACCESSION_NUMBER VARCHAR2(10)</div><div class=\"ql-code-block\">    NUMBER_OF_AIS VARCHAR2(10)</div><div class=\"ql-code-block\">    LAST_UPDATE_DATE DATE</div><div class=\"ql-code-block\">    AI_GROUP_NO VARCHAR2(20)</div><div class=\"ql-code-block\">    CLASS_F VARCHAR2(20)</div><div class=\"ql-code-block\">    BRAND_NAME_F VARCHAR2(120)</div><div class=\"ql-code-block\">    DESCRIPTOR_F VARCHAR2(140)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MY3a59e9d6-7e18-4dd7-9e45-1a09091cbc5e","name":"status","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">\"</div><div class=\"ql-code-block\">    status</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    CURRENT_STATUS_FLAG VARCHAR2(2)</div><div class=\"ql-code-block\">    STATUS VARCHAR2(40)</div><div class=\"ql-code-block\">    HISTORY_DATE DATE</div><div class=\"ql-code-block\">    STATUS_F VARCHAR2(40)</div><div class=\"ql-code-block\">    LOT_NUMBER VARCHAR2(50)</div><div class=\"ql-code-block\">    EXPIRATION_DATE DATE</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MYe9bc931c-523d-4b1d-8004-faee0765cc28","name":"form","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    \"</div><div class=\"ql-code-block\">    form</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    PHARM_FORM_CODE NUMBER(7)</div><div class=\"ql-code-block\">    PHARMACEUTICAL_FORM VARCHAR2(60)</div><div class=\"ql-code-block\">    PHARMACEUTICAL_FORM_F VARCHAR2(60)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MY6cbbb339-eb8d-4ba4-b43e-95ed4342d9ec","name":"package","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    \"</div><div class=\"ql-code-block\">    package</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    UPC VARCHAR2(20)</div><div class=\"ql-code-block\">    PACKAGE_SIZE_UNIT VARCHAR2(20)</div><div class=\"ql-code-block\">    PACKAGE_TYPE VARCHAR2(25)</div><div class=\"ql-code-block\">    PACKAGE_SIZE VARCHAR2(10)</div><div class=\"ql-code-block\">    PRODUCT_INFORMATION VARCHAR2(100)</div><div class=\"ql-code-block\">    PACKAGE_SIZE_UNIT_F VARCHAR2(1)</div><div class=\"ql-code-block\">    PACKAGE_TYPE_F VARCHAR2(1)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MYbf684cd8-dbe4-4e6f-ba91-574754dc8f37","name":"pharm","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    \"pharm</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    PHARMACEUTICAL_STD VARCHAR2(10)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MYbacb8ba8-2e75-4a6f-80e3-7ea1b3ac7ce9","name":"route","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    \"route</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    ROUTE_OF_ADMINISTRATION_CODE NUMBER(6)</div><div class=\"ql-code-block\">    ROUTE_OF_ADMINISTRATION VARCHAR2(40)</div><div class=\"ql-code-block\">    ROUTE_OF_ADMINISTRATION_F VARCHAR2(65)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MY53a992ea-feca-4843-8a26-a0e59c3ee916","name":"schedule","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    \"schedule</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    SCHEDULE VARCHAR2(30)</div><div class=\"ql-code-block\">    SCHEDULE_F VARCHAR2(30)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MYae0dfbfb-c34c-48c5-8a4d-8ece83845010","name":"ther","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    \"ther</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    TC_ATC_NUMBER VARCHAR2(10)</div><div class=\"ql-code-block\">    TC_ATC VARCHAR2(80)</div><div class=\"ql-code-block\">    TC_AHFS_NUMBER VARCHAR2(20)</div><div class=\"ql-code-block\">    TC_AHFS VARCHAR2(80)</div><div class=\"ql-code-block\">    TC_ATC_F VARCHAR2(1)</div><div class=\"ql-code-block\">    TC_AHFS_F VARCHAR2(60)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MY8550ce13-a87a-4418-ae15-62f3971fb2ba","name":"vet","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    \"vet</div><div class=\"ql-code-block\">    DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\">    VET_SPECIES VARCHAR2(50)</div><div class=\"ql-code-block\">    VET_SUB_SPECIES VARCHAR2(40)</div><div class=\"ql-code-block\">    VET_SPECIES_F VARCHAR2(50)</div><div class=\"ql-code-block\">    \"</div></div><p><br></p><p>t///</p>"},{"idx":"MY093ad014-dbb6-49a1-8bfa-b52a976125e8","name":"inactive","custparents":[{"idx":"MY3af4ed72-4c0f-4d68-b9be-bf371a9a7406"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">\"</div><div class=\"ql-code-block\" data-language=\"plain\">inactive</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_CODE NUMBER(8)</div><div class=\"ql-code-block\" data-language=\"plain\">DRUG_IDENTIFICATION_NUMBER_IA VARCHAR2(29)</div><div class=\"ql-code-block\" data-language=\"plain\">BRAND_NAME_IA VARCHAR2(200)</div><div class=\"ql-code-block\" data-language=\"plain\">HISTORY_DATE_IA DATE</div><div class=\"ql-code-block\" data-language=\"plain\">\"</div></div><p><br></p><p>t///</p>"}]}]}]}]}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># download the zip file</div><div class=\"ql-code-block\" data-language=\"plain\">tmpzip &lt;- downloadzip(name_thezip)</div></div><p><br></p><p>t///</p>","_substeps":{"idx":"MY4127b994-7d55-4a79-b637-e478a25277d5","name":"substeps","custparents":[{"idx":"MY09cbbd93-c599-4ec9-a250-a969755f50c8"}],"children":[{"idx":"MY203cd582-bb90-421b-8f1b-43e75a3e4288","name":"Define and zip name and download the zip into tmp.zip","custparents":[{"idx":"MY4127b994-7d55-4a79-b637-e478a25277d5"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># download and unzip thezipfiles without saving to local</div><div class=\"ql-code-block\">downloadzip &lt;- function (zipname){</div><div class=\"ql-code-block\">    </div><div class=\"ql-code-block\">    print('start downloadzip ===============================')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    # zipname &lt;- allfiles.zip </div><div class=\"ql-code-block\">    #name_thezip &lt;- \"F:/Personal/Dropbox/Project/Canada DPD/SASProject/Data/allfiles.zip\"</div><div class=\"ql-code-block\">    name_thezip &lt;- paste0(\"https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/\", zipname)</div><div class=\"ql-code-block\">    #https://rpubs.com/otienodominic/398952</div><div class=\"ql-code-block\">    #create a tmp file</div><div class=\"ql-code-block\">    tmpzip &lt;- tempfile()</div><div class=\"ql-code-block\">    download.file(name_thezip, tmpzip)</div><div class=\"ql-code-block\">    return (tmpzip)</div><div class=\"ql-code-block\">}</div></div><p><br></p><p>t///</p>"}]}}]}]}]}]}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"># loop for the four zipfiles, get files, and save as 'data/dpdjson.zip'    </div><div class=\"ql-code-block\">    for (thezipname in zipnames) {</div><div class=\"ql-code-block\">        #unzip all tables, merge as a big zip, and add to dpd.json</div><div class=\"ql-code-block\">        dpd.list &lt;- zip2dfjson_dpd_my(thezipname, dpd.list, indexcolname )</div><div class=\"ql-code-block\">        alarm() </div><div class=\"ql-code-block\">    }</div></div><p><br></p><p>t///</p>"},{"idx":"MYe8b23c5b-ef64-40ab-9213-5f6d6586ef9b","name":"Extract dpd.json from a zip file","custparents":[{"idx":"MYf09501cf-8679-4e33-96f3-4d344ee3705f"},{"idx":"MY478eed30-913c-44d0-80b6-33a441dc3abf"}],"children":[{"idx":"MYaa6a366a-a591-4363-9236-060d8148d759","name":"Convert the dpd.json file into a R list object ","custparents":[{"idx":"MYe8b23c5b-ef64-40ab-9213-5f6d6586ef9b"}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">dpdfromjsonfile.list &lt;- json2dfs_dpd_my()</div></div><p><br></p><p>t///</p>","children":[],"_substeps":{"idx":"MY5a074a01-cc49-4086-bfea-9cd1b92cf015","name":"substeps","custparents":[{"idx":"MYaa6a366a-a591-4363-9236-060d8148d759"}],"children":[{"idx":"MY0c2a0206-3c79-4d2a-b582-b74499b2bcfd","name":"run json2dfs_dpd.my()","custparents":[{"idx":"MY5a074a01-cc49-4086-bfea-9cd1b92cf015"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">json2dfs_dpd_my &lt;- function () {</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">dpdfromjsonfile.list &lt;- fromJSON(\"data/dpd.json\" )</div><div class=\"ql-code-block\" data-language=\"plain\"># loop to have dfs from drugs of diferent status (in market, under application, dormant, or inactive)</div><div class=\"ql-code-block\" data-language=\"plain\">jj=0</div><div class=\"ql-code-block\" data-language=\"plain\">for (x in dpdfromjsonfile.list ){</div><div class=\"ql-code-block\" data-language=\"plain\">jj = jj+1 # jj to control whether to view a particular df, or all the four dfs</div><div class=\"ql-code-block\" data-language=\"plain\">if (jj &gt; 0 ){</div><div class=\"ql-code-block\" data-language=\"plain\"># # get the name of the zipfile</div><div class=\"ql-code-block\" data-language=\"plain\">name_srczip &lt;- x[[1]]</div><div class=\"ql-code-block\" data-language=\"plain\">print(name_srczip)</div><div class=\"ql-code-block\" data-language=\"plain\"># remove the extension 'zip'</div><div class=\"ql-code-block\" data-language=\"plain\">name_currentdf &lt;- sub('\\\\.zip$', '', name_srczip)</div><div class=\"ql-code-block\" data-language=\"plain\"># print(name_currentdf)</div><div class=\"ql-code-block\" data-language=\"plain\">themeregeddfname = paste0(name_currentdf, '.df')</div><div class=\"ql-code-block\" data-language=\"plain\">print(themeregeddfname)</div><div class=\"ql-code-block\" data-language=\"plain\">assign(themeregeddfname, x[-c(1) ])</div><div class=\"ql-code-block\" data-language=\"plain\"># # not to view the name of the df, you dumb dumb!</div><div class=\"ql-code-block\" data-language=\"plain\"># View(themeregeddfname)</div><div class=\"ql-code-block\" data-language=\"plain\"># view the df named by the str.</div><div class=\"ql-code-block\" data-language=\"plain\">View(get(themeregeddfname))</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">return (dpdfromjsonfile.list)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>t///</p>","children":[],"_substeps":{"idx":"MYd123000b-a348-4852-9970-f952d095b889","name":"substeps","custparents":[{"idx":"MY0c2a0206-3c79-4d2a-b582-b74499b2bcfd"}],"children":[{"idx":"MYd21eff7c-f193-4266-984e-f9c72c52fe2c","name":"get the dpd list from the local file dpd.json","custparents":[{"idx":"MYd123000b-a348-4852-9970-f952d095b889"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # get the dpd list from the local file dpd.json</div><div class=\"ql-code-block\">    dpdfromjsonfile.list &lt;- fromJSON(\"data/dpd.json\" )</div></div><p>t///</p>","children":[{"idx":"MY7fe140ea-81f7-4925-b51a-c5500d27882c","name":"Loop for each row in the dpd list","custparents":[{"idx":"MYd21eff7c-f193-4266-984e-f9c72c52fe2c"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    for (x in dpdfromjsonfile.list ){</div><div class=\"ql-code-block\">        jj = jj+1 # jj to control whether to view a particular df, or all the four dfs</div><div class=\"ql-code-block\">            if (jj &gt; 0 ){</div><div class=\"ql-code-block\">                # # get the name of the zipfile</div><div class=\"ql-code-block\">                name_srczip &lt;- x[[1]]</div><div class=\"ql-code-block\">                print(name_srczip)</div><div class=\"ql-code-block\">                # remove the extension 'zip'</div><div class=\"ql-code-block\">                name_currentdf &lt;- sub('\\\\.zip$', '', name_srczip)</div><div class=\"ql-code-block\">                # print(name_currentdf)</div><div class=\"ql-code-block\">                themeregeddfname = paste0(name_currentdf, '.df')</div><div class=\"ql-code-block\">                print(themeregeddfname)</div><div class=\"ql-code-block\">                assign(themeregeddfname,  x[-c(1) ])</div><div class=\"ql-code-block\">                # # not to view the name of the df, you dumb dumb!</div><div class=\"ql-code-block\">                # View(themeregeddfname)</div><div class=\"ql-code-block\">                # view the df named by the str.</div><div class=\"ql-code-block\">                View(get(themeregeddfname))  </div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">    }</div></div><p>t///</p>","children":[{"idx":"MY38e9d4a0-7c30-432d-849d-6491765506ea","name":"return dpd.list","custparents":[{"idx":"MY7fe140ea-81f7-4925-b51a-c5500d27882c"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">return (dpdfromjsonfile.list)</div></div><p>t///</p>"}],"_substeps":{"idx":"MY70c11f8a-9859-4a80-a42b-b83dfc0addfb","name":"substeps","custparents":[{"idx":"MY7fe140ea-81f7-4925-b51a-c5500d27882c"}],"children":[{"idx":"MY3ac7aba5-ee0c-4c96-b2ea-6f108ba87775","name":"Get the name of the src zip file to name the df","custparents":[{"idx":"MY70c11f8a-9859-4a80-a42b-b83dfc0addfb"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># # get the name of the zipfile</div><div class=\"ql-code-block\" data-language=\"plain\">name_srczip &lt;- x[[1]]</div><div class=\"ql-code-block\" data-language=\"plain\">print(name_srczip)</div><div class=\"ql-code-block\" data-language=\"plain\"># remove the extension 'zip'</div><div class=\"ql-code-block\" data-language=\"plain\">name_currentdf &lt;- sub('\\\\.zip$', '', name_srczip)</div><div class=\"ql-code-block\" data-language=\"plain\"># print(name_currentdf)</div><div class=\"ql-code-block\" data-language=\"plain\">                themeregeddfname = paste0(name_currentdf, '.df')</div><div class=\"ql-code-block\" data-language=\"plain\">                print(themeregeddfname)</div></div><p>t///</p>","children":[{"idx":"MYc78eb259-e34b-446a-9aca-4f97623f4858","name":"get the df of the source","custparents":[{"idx":"MY3ac7aba5-ee0c-4c96-b2ea-6f108ba87775"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">                assign(themeregeddfname,  x[-c(1) ])</div><div class=\"ql-code-block\">                # # not to view the name of the df, you dumb dumb!</div><div class=\"ql-code-block\">                # View(themeregeddfname)</div><div class=\"ql-code-block\">                # view the df named by the str.</div><div class=\"ql-code-block\">                View(get(themeregeddfname))  </div></div><p>t///</p>"}]}]}}]}]}}]}}],"NodeDescription":"<p>///t</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">    # need to install.packages('zip'), and library('zip')</div><div class=\"ql-code-block\" data-language=\"plain\">    # unzip the json file (note, in the zip, the file name is with path)</div><div class=\"ql-code-block\" data-language=\"plain\">    # it recognizes 'data/dpd.json', but not 'dpd.json'</div><div class=\"ql-code-block\" data-language=\"plain\">unzip(zipfile, files = 'data/dpd.json', overwrite = TRUE, junkpaths = FALSE,exdir = \".\")</div></div><p><br></p><p>t///</p><p><br></p>"}],"_substeps":{"idx":"MY4cef5615-aea8-429b-93a8-422279e67fa4","name":"substeps","custparents":[{"idx":"MYf09501cf-8679-4e33-96f3-4d344ee3705f"}],"children":[{"idx":"MYfde9e537-7c91-49a4-a100-0f36bb84f34b","name":"remove all objects in memory","custparents":[{"idx":"MY4cef5615-aea8-429b-93a8-422279e67fa4"}],"children":[{"idx":"MY424249da-ebec-4ccc-b5c1-7dfbdb75187d","name":"disable stringAsFactors","custparents":[{"idx":"MYfde9e537-7c91-49a4-a100-0f36bb84f34b"}],"children":[{"idx":"MY9e29e920-263f-478e-ac91-df925d70c232","name":"load functions in another file (tools.r)","custparents":[{"idx":"MY424249da-ebec-4ccc-b5c1-7dfbdb75187d"}],"children":[{"idx":"MYec0e0eaa-ec69-499e-b236-82d2be35dba8","name":"load package (jsonlite, zip)","custparents":[{"idx":"MY9e29e920-263f-478e-ac91-df925d70c232"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # load a package to deal with JSON objects </div><div class=\"ql-code-block\">    # do not use the package 'rjson'. It cannot handle df with nested lists</div><div class=\"ql-code-block\">    library('jsonlite')</div><div class=\"ql-code-block\">    # load a package to save and extract files from zips</div><div class=\"ql-code-block\">    # install.packages('zip')</div><div class=\"ql-code-block\" data-language=\"plain\">    library('zip')</div></div><p>t///</p>","children":[{"idx":"MY050e8a51-22e0-4118-8d6b-acdf35c5e5a9","name":"Note","custparents":[{"idx":"MYec0e0eaa-ec69-499e-b236-82d2be35dba8"}],"NodeDescription":"<p>///t</p><p>do not use the package 'rjson'. It cannot handle df with nested list</p><p>t///</p><p>[to do]</p>"}]}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # loading self-developped r functions</div><div class=\"ql-code-block\">    source('tools.r')</div></div><p>t///</p>"},{"idx":"MY495d242b-6d9b-4379-82e8-45ae040c7878","name":"Note","custparents":[{"idx":"MY424249da-ebec-4ccc-b5c1-7dfbdb75187d"}],"NodeDescription":"<p>///t</p><p>    # Prevent the default behavior of R that, in dataframe, converting character values into factors   </p><p>t///</p><p>[to do]</p>"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    # Prevent the default behavior of R that, in dataframe, converting charactor values into factors</div><div class=\"ql-code-block\">    options(stringsAsFactors = FALSE)</div></div><p>t///</p>"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    #remove all objects from the memory</div><div class=\"ql-code-block\">    #example: </div><div class=\"ql-code-block\">    rm(list=ls())</div></div><p>t///</p>"}]}}],"NodeDescription":"<p>///t</p><p>t///</p><p>last time it ran from 23:15 pm to 1.25 am, then 7:05 am to 7:24 am</p>"}]