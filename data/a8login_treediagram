{"idx":"db3d4015-ad7c-4ade-8a61-fffc2b326331","name":"angular8 login step by step","children":[{"idx":"MY41ac0c76-ef90-43d5-85ba-81267d8e8450","name":"Install apps","custparents":[{"idx":"db3d4015-ad7c-4ade-8a61-fffc2b326331"}],"NodeDescription":"<p>///t</p><p>Source: https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial</p><p>1. Install node.js ,  git and angular cli 8, done. (See the videos on installation of these files, which is beyond this project)</p><p>2. Install VSCode, done (beyond this project).</p><p>3. Get the angular 8 registration log in example:</p><p>•\tCreate a folder: C:\\Users\\Z70\\Angular 8 projects</p><p>•\tIn node.js command window, go to the folder:</p><p>•\tC:\\Users\\Z70\\Angular 8 projects</p><p>•\ttype: git clone  https://github.com/cornflourblue/angular-8-registration-login-example</p><p>•\tgo into the example folder C:\\Users\\Z70\\Angular 8 projects\\angular-8-registration-login-example</p><p>•\tType npm install (it’ll take a while before starting, and the installation takes about 5 minutes in my case. There are a few warnings. After running npm audit fix, some of the warnings persist. )</p><p>•\tType npm start to start the log-in webpage in Chrome (the address is local host:8080)</p><p>•\tTo terminate the example, go to the node js command window, type ctrl_break (the tutorial video said ctrl-c, but in my case it is ctrol-break)</p><p>4. Edit codes in VSCode</p><p>•\tIn node js command window, type ‘code .’ (yes, with a period/doc, which will open VS and the file folder)</p><p>•\tThe VScode will open, and angular-8-registration-login-example folder is loaded. </p><p>•\tTo open the terminal, in view, select Terminal. That’ll bring the terminal window at the bottom. (In my case it is different that the terminal is ‘cmd’, instead of ‘powershell’. </p><p>•\tIn the terminal window, type npm start. This will again bring up the login window to Chrome. </p><p>•\tClick register, and fill the form and register a new user. Log in using the username and password that are just created.</p><p>•\tOn the left navigation panel, go to src-home-home.component.html. In line one of the file, add {{currentUser.lastName}}. Switch to the Chrome browser, you’ll see that in the welcome page, the last name will be shown automatically.  The example allows listening to changes of the html file and update to the browser in time. </p><p>•\tIn the terminal of VSCode, type ctrl-c to terminate the job by angular. This will disable the listening. Further changes in the html code won’t be automatically reflected in the browser.</p><p>5. The CLI instance. </p><p>•\tThis is the frustrated part (as usual by many bloggers). The original example was built for Angular 7. The author made this one for Angular 8, but the video is still for Angular 7. In the example for angular 7, there were two instances, one as example, and the other as a true angular CLI. The two instances were put in different folders, and were installed, according to the video, separately. For Angular 8, however, I only found the instance of Angular 8 corresponding to the example of Angular 7. I could not find the instance corresponding to the CLI instance of Angular 7. I’ll assume that the Angular 8 one is indeed the CLI one. </p><p>•\tI tried the command ‘ng serve –open’, but it does not work when in the folder ‘angular-8-registration-login-example’ . I also tried the Angular 7 CLI, it does not work at all as the Angular version is 8 in my computer. </p><p><br></p><p>t///</p>"},{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f","name":"Make a new instance by A8 CLI","custparents":[{"idx":"db3d4015-ad7c-4ade-8a61-fffc2b326331"}],"children":[{"idx":"MYf6cf36e9-1412-4e77-a323-b819eb9e5a8e","name":"Create a8login-sbs-cli","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"NodeDescription":"<p><br></p><p>///t</p><p>1) under under C:\\Users\\Z70\\Angular 8 projects, type ng new &lt;project name&gt; (e.g., mya8login-sbs-cli)</p><p>2) select y to add routing</p><p>3) select css (which is the default) stylesheet</p><p>See the video: https://www.youtube.com/watch?v=7Hk_m6thW0s&amp;list=PLRAq-063t1uSv1w0j_XMHhJXYPVZG3Djl&amp;index=2&amp;t=1s</p><p>Or https://www.youtube.com/watch?v=mDoHtD1hI3I&amp;list=PLC3y8-rFHvwhBRAgFinJR8KHIrCdTkZcZ&amp;index=3</p><p><br></p><p>t///</p><p>[_L] the project name cannot contain \"_\", but \"-\" is ok!</p><p>[_Q] It automatically created an instance of the login example, which was developped by Jason Watmore. This is strange, as how comes that the example is not a general one, but the specific example by Jason Watmore?</p><p><br></p>"},{"idx":"MY97891a3f-452b-41d3-8d60-659cf248c47e","name":"Check warnings","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"NodeDescription":"<p>///t</p><p>npm WARN deprecated core-js@2.6.11: core-js@&lt;3 is no longer maintained and not recommended for usage due to the number of issues.pgrade your dependencies to the actual version of core-js@3.</p><p><br></p><p>Action: install core-js@3</p><p>in the project root folder (PS C:\\Users\\Z70\\Angular 8 projects\\a8login-sbs-cli):</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">npm install -save core-js@3</div></div><p><br></p><p>npm WARN karma-jasmine-html-reporter@1.5.1 requires a peer of jasmine-core@&gt;=3.5 but none is installed. You must install peer dep yourself.</p><p>install into the developement environment:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">npm install jasmine-core@latest --save-dev</div></div><p><br></p><p>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\webpack-dev-server\\node_modules\\fsevents):</p><p>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (curr:\"win32\",\"arch\":\"x64\"})</p><p>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\watchpack\\node_modules\\fsevents):</p><p>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (curr:\"win32\",\"arch\":\"x64\"})</p><p>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\karma\\node_modules\\fsevents):</p><p>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (curr:\"win32\",\"arch\":\"x64\"})</p><p>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\@angular\\compiler-cli\\node_modules\\fsevents):</p><p>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (curr:\"win32\",\"arch\":\"x64\"})</p><p>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 (node_modules\\fsevents):</p><p>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (curre\"win32\",\"arch\":\"x64\"})</p><p><br></p><p>Action: ignore these warnings</p><p>t///</p>"},{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a","name":"A. customize for a base project structure","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"NodeDescription":"<p>///t</p><p>Based on instructions in F:\\Personal\\Dropbox\\English Writing\\MyBlog at wordpress\\Angular to set up a website with log in register.docx</p><p>A. Create the Base Project Structure</p><p>This part is to create the basic structure, and a home page (index.html) with one line ‘Hello Angular 8!’</p><p>The tutorial of this part can be found at https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config. </p><p>t///</p>","children":[{"idx":"a05fef6a-8773-4922-852f-cc3736193b64","name":"1. Package.json","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>1.Package.json.</p><p>change the contents to :</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">\"name\": \"a8login-sbs-cli\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"version\": \"1.0.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">...</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>the complete code block:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">\"name\": \"a8login-sbs-cli\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"version\": \"1.0.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"scripts\": {</div><div class=\"ql-code-block\" data-language=\"plain\">\"mycomment\": \"The following is to start the command after npm start. The purpose is to launch the index page in a browser\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"ng\": \"ng\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"start\": \"webpack-dev-server --mode development --open\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"build\": \"ng build\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"test\": \"ng test\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"lint\": \"ng lint\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"e2e\": \"ng e2e\"</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">\"private\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">\"dependencies\": {</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/animations\": \"~8.2.7\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/common\": \"^8.2.14\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/compiler\": \"^8.2.14\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/core\": \"^8.2.14\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/forms\": \"^8.2.14\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/platform-browser\": \"^8.2.14\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/platform-browser-dynamic\": \"^8.2.14\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/router\": \"^8.2.14\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"core-js\": \"^3.6.4\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"rxjs\": \"^6.5.4\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"tslib\": \"^1.10.0\"</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">\"devDependencies\": {</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular-devkit/build-angular\": \"~0.803.5\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/cli\": \"~8.3.5\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/compiler-cli\": \"~8.2.7\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@angular/language-service\": \"~8.2.7\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@types/jasmine\": \"~3.3.8\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@types/jasminewd2\": \"~2.0.3\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"@types/node\": \"^12.12.25\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"angular2-template-loader\": \"^0.6.2\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"codelyzer\": \"^5.0.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"css-loader\": \"^3.4.2\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"html-loader\": \"^0.5.5\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"html-webpack-plugin\": \"^3.2.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"jasmine-core\": \"^3.5.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"jasmine-spec-reporter\": \"~4.2.1\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"karma\": \"~4.1.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"karma-chrome-launcher\": \"~2.2.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"karma-coverage-istanbul-reporter\": \"~2.0.1\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"karma-jasmine\": \"~2.0.1\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"karma-jasmine-html-reporter\": \"^1.4.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"less\": \"^3.10.3\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"less-loader\": \"^5.0.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"protractor\": \"~5.4.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"raw-loader\": \"^3.1.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"ts-loader\": \"^6.2.1\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"ts-node\": \"~7.0.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"tslint\": \"~5.15.0\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"typescript\": \"^3.5.3\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"webpack\": \"^4.41.5\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"webpack-cli\": \"^3.3.10\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"webpack-dev-server\": \"^3.10.1\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"zone.js\": \"^0.9.1\"</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p>t///</p>"},{"idx":"d0a64e31-9bcb-49cd-b4ed-77df2df3e482","name":"2. Angular 8 dependencies","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>2.Angular 8 dependencies</p><p>[_W]</p><p>Before installation, make sure that it is not on the 'npm start' mode. Otherwise some old packages will be in use, locked and enable to be overwritten.</p><p><br></p><p>Many dependencies by Cli is quite out of date, so under C:\\Users\\Z70\\Angular 8 projects\\a8login-sbs-cli, reinstall the package using the following lines:</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">npm install -save @angular/common@8 @angular/compiler@8 @angular/core@8 @angular/forms@8 @angular/platform-browser@8 @angular/platform-browser-dynamic@8 @angular/router@8 core-js@3 rxjs@6 zone.js@latest</div></div><p><br></p><p>•\tThese are dependent packages that are required for angular to build the structure. Description of these package files can be found at the part 2 tutorial web page (as stated in the beginning of part A). After downloading and installing these files, the names and versions of the packages will be added automatically into package.json.</p><p><br></p><p>•\t[_L]</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>use @latest to install the latest package</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>JSON file does not allow to add comments. However, one can insert properties (fields) like 'mycomments', ...e.g.</li></ol><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">\"mycomment\": \"This part installs the dependencies (i.e., the angular modules for run the web site)\",</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p>t///</p>"},{"idx":"b2692b44-5567-45a8-ba62-0f006db1a0e2","name":"3. Angular 8 develop dependencies","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>3.Angular 8 develop dependencies</p><p>Again the develop dependencies are also quite out of date. Reinstall using the following command lines under the folder C:\\Users\\Z70\\Angular 8 projects\\a8login-sbs-cli:</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">npm install --save-dev @types/node@12 angular2-template-loader@0 html-webpack-plugin@3 raw-loader@3 ts-loader@6 typescript@3 webpack@4 webpack-cli@3 webpack-dev-server@3</div></div><p><br></p><p>•\tAgain, the names and versions of these development packages are added to package.json.</p><p><br></p><p>•\tTo note, the list I have here is different from Jason’s example. Jason’s file mentioned css-loader 2.2.1, html-loader 0.5.5, less 3.0.4, less-loader 0.23.1. These packages are not installed by the commands above.</p><p>(The list of development packages in Jason’s example: https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json)</p><p>•\tSo the following are installed again via node js command lines:</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">npm install --save-dev css-loader@latest html-loader@0 less@3 less-loader@latest</div></div><p>Consequently, I have newer css-loader, less, and less-loader than the versions in Jason’s file.</p><p>•\t[_L]: one can re-install with new versions by repeat the same commands above with new specification of versions (e.g., instead of raw-loader@3, use raw-loader@latest). Such commands will install the new versions, overwriting the old ones. The file package.json will be renewed with added packages, or new versions.</p><p>•\tThe latest packages can be found at https://www.npmjs.com/</p><p>•\tAfter installation, new folders are created under the root folder. These are for corresponding package files.</p><p><br></p><p>There are a couple of warnings:</p><p>- npm WARN rollback Rolling back node-pre-gyp@0.14.0 failed (this is probably harmless): EPERM: operation not permitted, lstat 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\node_modules\\fsevents\\node_modules'</p><p>Actions: do nothing</p><p><br></p><p>npm WARN @angular/core@8.2.14 requires a peer of zone.js@~0.9.1 but none is installed. You must install peer dependencies yourself.</p><p>Action: reinstall (rollback to )zone.js@~0.9.1 by the following command:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">npm install --save-dev zone.js@~0.9.1</div></div><p><br></p><p>npm WARN a8login_sbs@1.0.0 No repository field.</p><p>npm WARN a8login_sbs@1.0.0 No license field.</p><p>Action: do nothing for now. These are for setting git URL and license, will do it later.</p><p><br></p><p>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\fsevents):</p><p>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})</p><p>Action: do nothing, cannot see how it is harmful for now.</p><p>t///</p>"},{"idx":"209d8e53-db3d-4482-bc28-5dea42437e09","name":"4. reinstall dependencies","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>4. Reinstall the dependencies. </p><p>•\tNow that the dependencies in 2 and 3 (for Angular 8, and for development) are specified in package.json. One can always type ‘nmp install’ in node.js command (under the folder ‘mya8login’’) to re-install all the packages.</p><p>t///</p>"},{"idx":"d83b8a7d-3905-4d55-a9b4-88d55e848854","name":"5. tsconfig.json","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>5. Create tsconfig.json (https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json)</p><p>•\tIn VSCode, under ‘mya8login’’, Create a file ‘tsconfig.json’. In the file, paste:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">\"compilerOptions\": {</div><div class=\"ql-code-block\" data-language=\"plain\">\"emitDecoratorMetadata\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">\"experimentalDecorators\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">\"target\": \"ES5\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"baseUrl\": \"src\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"paths\": {</div><div class=\"ql-code-block\" data-language=\"plain\">\"@/*\": [</div><div class=\"ql-code-block\" data-language=\"plain\">\"app/*\"</div><div class=\"ql-code-block\" data-language=\"plain\">]</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>•\tThe details of each compiler can be found at https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config.</p><p><br></p><p>complete code</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">{</div><div class=\"ql-code-block\">  \"compileOnSave\": false,</div><div class=\"ql-code-block\">  \"compilerOptions\": {</div><div class=\"ql-code-block\">    \"emitDecoratorMetadata\": true,</div><div class=\"ql-code-block\">    \"target\": \"ES5\",</div><div class=\"ql-code-block\">    \"baseUrl\": \"src\",</div><div class=\"ql-code-block\">    \"paths\": {</div><div class=\"ql-code-block\">      \"@/*\": [</div><div class=\"ql-code-block\">        \"app/*\"</div><div class=\"ql-code-block\">        ]</div><div class=\"ql-code-block\">      },</div><div class=\"ql-code-block\">    \"outDir\": \"./dist/out-tsc\",</div><div class=\"ql-code-block\">    \"sourceMap\": true,</div><div class=\"ql-code-block\">    \"declaration\": false,</div><div class=\"ql-code-block\">    \"downlevelIteration\": true,</div><div class=\"ql-code-block\">    \"experimentalDecorators\": true,</div><div class=\"ql-code-block\">    \"module\": \"esnext\",</div><div class=\"ql-code-block\">    \"moduleResolution\": \"node\",</div><div class=\"ql-code-block\">    \"importHelpers\": true,</div><div class=\"ql-code-block\">    \"typeRoots\": [</div><div class=\"ql-code-block\">      \"node_modules/@types\"</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    \"lib\": [</div><div class=\"ql-code-block\">      \"es2018\",</div><div class=\"ql-code-block\">      \"dom\"</div><div class=\"ql-code-block\">    ]</div><div class=\"ql-code-block\">  },</div><div class=\"ql-code-block\">  \"angularCompilerOptions\": {</div><div class=\"ql-code-block\">    \"fullTemplateTypeCheck\": true,</div><div class=\"ql-code-block\">    \"strictInjectionParameters\": true</div><div class=\"ql-code-block\">  }</div><div class=\"ql-code-block\">}</div><div class=\"ql-code-block\"><br></div></div><p><br></p><p>t///</p>"},{"idx":"a2825588-109f-4e55-ae9f-05fc9a5a8a9c","name":"6. webpack.config.js","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>6.Create Webpack 4 Config. </p><p>This is not provided in the default A8 Cli.</p><p>•\tIn VSCode, under the project root folder, Create a file ‘webpack.config.js’. In the file, paste the code from the Webpack 4 Config part of https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><p>•\tDescription on the code can be found at the corresponding section of https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">//Basically the webpack config is to setup how to compile ts to js, and how to run js programs/plug-ins properly.</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// the function require is to load modules. see https://www.quora.com/What-is-the-use-of-require-function-in-Javascript</div><div class=\"ql-code-block\" data-language=\"plain\">const webpack = require('webpack');</div><div class=\"ql-code-block\" data-language=\"plain\">const HtmlWebpackPlugin = require('html-webpack-plugin');</div><div class=\"ql-code-block\" data-language=\"plain\">const path = require('path');</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">module.exports = {</div><div class=\"ql-code-block\" data-language=\"plain\">entry: './src/main.ts',</div><div class=\"ql-code-block\" data-language=\"plain\">resolve: {</div><div class=\"ql-code-block\" data-language=\"plain\">extensions: ['.ts', '.js'],</div><div class=\"ql-code-block\" data-language=\"plain\">alias: {</div><div class=\"ql-code-block\" data-language=\"plain\">'@': path.resolve(__dirname, 'src/app/'),</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">module: {</div><div class=\"ql-code-block\" data-language=\"plain\">rules: [</div><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">test: /\\.ts$/,</div><div class=\"ql-code-block\" data-language=\"plain\">use: ['ts-loader', 'angular2-template-loader']</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">test: /\\.html$/,</div><div class=\"ql-code-block\" data-language=\"plain\">use: 'html-loader'</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">test: /\\.less$/,</div><div class=\"ql-code-block\" data-language=\"plain\">use: ['style-loader', 'css-loader', 'less-loader']</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// workaround for warning: System.import() is deprecated and will be removed soon. Use import() instead.</div><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">test: /[\\/\\\\]@angular[\\/\\\\].+\\.js$/,</div><div class=\"ql-code-block\" data-language=\"plain\">parser: { system: true }</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">]</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">plugins: [</div><div class=\"ql-code-block\" data-language=\"plain\">new HtmlWebpackPlugin({ template: './src/index.html' }),</div><div class=\"ql-code-block\" data-language=\"plain\">new webpack.DefinePlugin({</div><div class=\"ql-code-block\" data-language=\"plain\">// global app config object</div><div class=\"ql-code-block\" data-language=\"plain\">config: JSON.stringify({</div><div class=\"ql-code-block\" data-language=\"plain\">apiUrl: 'http://localhost:4000'</div><div class=\"ql-code-block\" data-language=\"plain\">})</div><div class=\"ql-code-block\" data-language=\"plain\">}),</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// workaround for warning: Critical dependency: the request of a dependency is an expression</div><div class=\"ql-code-block\" data-language=\"plain\">new webpack.ContextReplacementPlugin(</div><div class=\"ql-code-block\" data-language=\"plain\">/\\@angular(\\\\|\\/)core(\\\\|\\/)fesm5/,</div><div class=\"ql-code-block\" data-language=\"plain\">path.resolve(__dirname, 'src')</div><div class=\"ql-code-block\" data-language=\"plain\">)</div><div class=\"ql-code-block\" data-language=\"plain\">],</div><div class=\"ql-code-block\" data-language=\"plain\">optimization: {</div><div class=\"ql-code-block\" data-language=\"plain\">splitChunks: {</div><div class=\"ql-code-block\" data-language=\"plain\">chunks: 'all',</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">runtimeChunk: true</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">devServer: {</div><div class=\"ql-code-block\" data-language=\"plain\">historyApiFallback: true</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p><br></p><p>t///</p>"},{"idx":"9c6d1578-f3ea-4cd6-b1bd-e3254315597a","name":"7. create //src, and //src//app","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>7.Create Src and app foloder</p><p>The folders are created during Cli installation. No need to create them again</p><p>t///</p>"},{"idx":"62745f72-7b37-4b2e-a717-ca2365b05197","name":"8. app.component.html","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>8.Change Angular App Component template</p><p>•\tIn VSCode, and under the folder ‘app’, and in the file ‘app.component.html’</p><p>•\tIn this file, paste the code</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;h1&gt;The dynamic contents saved in app.compoent.html, and to be displayed on the index page.&lt;/h1&gt;</div></div><p><br></p><p><br></p><p>• The default installation injects more contents in the page. Basically those are style settings and links and can be deleted.</p><p>(https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json)</p><p>t///</p>"},{"idx":"1106c759-471c-44d5-b209-b2de63f463cf","name":"9. app.component.ts","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>9. Change Angular App Component</p><p>•\tUnder the folder ‘app’, in the file ‘app.component.ts’, paste the code</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">/* this file is to</div><div class=\"ql-code-block\" data-language=\"plain\">1) load build-in modules (Component)</div><div class=\"ql-code-block\" data-language=\"plain\">2) specify the web components to obtain (in which html file, within what tag) by decorating Component</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/*import the module 'Component' from angular's core modules 9under the folder /node_modules/@angular/core*/</div><div class=\"ql-code-block\" data-language=\"plain\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/*The following is to run the module 'component',</div><div class=\"ql-code-block\" data-language=\"plain\">i.e., to get components/contents in the tag &lt;app&gt;&lt;/app&gt; from the file 'app.component.html'</div><div class=\"ql-code-block\" data-language=\"plain\">The actions to assign values (selector = 'app', temlateUrl = 'app.component.html') is called decorate.</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({</div><div class=\"ql-code-block\" data-language=\"plain\">  // tslint:disable-next-line: component-selector</div><div class=\"ql-code-block\" data-language=\"plain\">  selector: 'app',</div><div class=\"ql-code-block\" data-language=\"plain\">  templateUrl: './app.component.html',</div><div class=\"ql-code-block\" data-language=\"plain\">  styleUrls: ['./app.component.css']</div><div class=\"ql-code-block\" data-language=\"plain\">})</div><div class=\"ql-code-block\" data-language=\"plain\">export class AppComponent {</div><div class=\"ql-code-block\" data-language=\"plain\">  title = 'a8login-sbs-cli';</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p><br></p><p>•\tNote that the code in the following page is not suitable here. That code will be added in the future. Same for the following steps 10 and 11 (https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json)</p><p><br></p><p>[_Q][_W]</p><p>I was forced to add the line // tslint:disable-next-line: component-selector. Otherwise it prompts error, not sure what it means.</p><p><br></p><p>t///</p>"},{"idx":"41cb7963-dd38-4e49-895d-d62c59aadf58","name":"10. app.module.ts","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>10.Change Angular App Module</p><p>•\tUnder the folder ‘app’, in the file ‘app.module.ts’, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">/* this file is to</div><div class=\"ql-code-block\" data-language=\"plain\">1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\" data-language=\"plain\">2) run the customized module AppComponent (which is to specify the web components to obtain,</div><div class=\"ql-code-block\" data-language=\"plain\">and how to display it)</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\" data-language=\"plain\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { AppRoutingModule } from './app-routing.module';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\" data-language=\"plain\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\" data-language=\"plain\">import { HomeComponent } from './home/home.component';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/*decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc),</div><div class=\"ql-code-block\" data-language=\"plain\">and declare AppComponent so that it can be used by all components and templates,</div><div class=\"ql-code-block\" data-language=\"plain\">and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\" data-language=\"plain\">https://angular.io/guide/bootstrapping, and https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\">@NgModule({</div><div class=\"ql-code-block\" data-language=\"plain\">declarations: [</div><div class=\"ql-code-block\" data-language=\"plain\">AppComponent,</div><div class=\"ql-code-block\" data-language=\"plain\">HomeComponent</div><div class=\"ql-code-block\" data-language=\"plain\">],</div><div class=\"ql-code-block\" data-language=\"plain\">imports: [</div><div class=\"ql-code-block\" data-language=\"plain\">BrowserModule,</div><div class=\"ql-code-block\" data-language=\"plain\">AppRoutingModule</div><div class=\"ql-code-block\" data-language=\"plain\">],</div><div class=\"ql-code-block\" data-language=\"plain\">providers: [],</div><div class=\"ql-code-block\" data-language=\"plain\">bootstrap: [AppComponent]</div><div class=\"ql-code-block\" data-language=\"plain\">})</div><div class=\"ql-code-block\" data-language=\"plain\">export class AppModule { }</div></div><p>t///</p>"},{"idx":"fdf8b5a3-0db7-4b9d-9a68-a0f21ae08d2e","name":"11. polyfills.ts","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>11.Change Angular Polyfills File</p><p>•\tUnder the folder ‘src’, in the file ‘polyfills.ts’, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">/**</div><div class=\"ql-code-block\" data-language=\"plain\">* This file includes polyfills needed by Angular and is loaded before the app.</div><div class=\"ql-code-block\" data-language=\"plain\">* You can add your own extra polyfills to this file.</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">* This file is divided into 2 sections:</div><div class=\"ql-code-block\" data-language=\"plain\">* 1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.</div><div class=\"ql-code-block\" data-language=\"plain\">* 2. Application imports. Files imported after ZoneJS that should be loaded before your main</div><div class=\"ql-code-block\" data-language=\"plain\">* file.</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">* The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that</div><div class=\"ql-code-block\" data-language=\"plain\">* automatically update themselves. This includes Safari &gt;= 10, Chrome &gt;= 55 (including Opera),</div><div class=\"ql-code-block\" data-language=\"plain\">* Edge &gt;= 13 on the desktop, and iOS 10 and Chrome on mobile.</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">* Learn more in https://angular.io/guide/browser-support</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/***************************************************************************************************</div><div class=\"ql-code-block\" data-language=\"plain\">* BROWSER POLYFILLS</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/** IE10 and IE11 requires the following for NgClass support on SVG elements */</div><div class=\"ql-code-block\" data-language=\"plain\">// import 'classlist.js'; // Run `npm install --save classlist.js`.</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/**</div><div class=\"ql-code-block\" data-language=\"plain\">* Web Animations `@angular/platform-browser/animations`</div><div class=\"ql-code-block\" data-language=\"plain\">* Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.</div><div class=\"ql-code-block\" data-language=\"plain\">* Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\">// import 'web-animations-js'; // Run `npm install --save web-animations-js`.</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/**</div><div class=\"ql-code-block\" data-language=\"plain\">* By default, zone.js will patch all possible macroTask and DomEvents</div><div class=\"ql-code-block\" data-language=\"plain\">* user can disable parts of macroTask/DomEvents patch by setting following flags</div><div class=\"ql-code-block\" data-language=\"plain\">* because those flags need to be set before `zone.js` being loaded, and webpack</div><div class=\"ql-code-block\" data-language=\"plain\">* will put import in the top of bundle, so user need to create a separate file</div><div class=\"ql-code-block\" data-language=\"plain\">* in this directory (for example: zone-flags.ts), and put the following flags</div><div class=\"ql-code-block\" data-language=\"plain\">* into that file, and then add the following code before importing zone.js.</div><div class=\"ql-code-block\" data-language=\"plain\">* import './zone-flags.ts';</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">* The flags allowed in zone-flags.ts are listed here.</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">* The following flags will work for all browsers.</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">* (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame</div><div class=\"ql-code-block\" data-language=\"plain\">* (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick</div><div class=\"ql-code-block\" data-language=\"plain\">* (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">* in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js</div><div class=\"ql-code-block\" data-language=\"plain\">* with the following flag, it will bypass `zone.js` patch for IE/Edge</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">* (window as any).__Zone_enable_cross_context_check = true;</div><div class=\"ql-code-block\" data-language=\"plain\">*</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import 'core-js/features/reflect';</div><div class=\"ql-code-block\" data-language=\"plain\">/***************************************************************************************************</div><div class=\"ql-code-block\" data-language=\"plain\">* Zone JS is required by default for Angular itself.</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import 'zone.js/dist/zone'; // Included with Angular CLI.</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/***************************************************************************************************</div><div class=\"ql-code-block\" data-language=\"plain\">* APPLICATION IMPORTS</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div></div><p><br></p><p>t///</p><p>[_L]the word polyfill means filling the holes (unsupported functions) by poly methods (could be javascript or other languages)</p>"},{"idx":"aa7b849c-3e31-4b5e-b9bb-3985971728c6","name":"12. main.ts","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>12. Change Angular Main (Bootstrap/Launch) File</p><p>·In VSCode, and under the folder ‘src’, in the file ‘main.ts’, paste the code from the corresponding part from <a href=\"https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json\" target=\"_blank\">https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</a></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">/**this file is to</div><div class=\"ql-code-block\" data-language=\"plain\"> * 1) load build-in modules (polyfill,platformBrowserDynamic)</div><div class=\"ql-code-block\" data-language=\"plain\"> * 2) run the customized module 'AppModule' (which is to specify where are the web components, and how to display )</div><div class=\"ql-code-block\" data-language=\"plain\"> */</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// import polyfill modules (what is polyfill? see polyfill.ts )</div><div class=\"ql-code-block\" data-language=\"plain\">import './polyfills';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// import the module to deal with web component formating (like CSS)</div><div class=\"ql-code-block\" data-language=\"plain\">import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';</div><div class=\"ql-code-block\" data-language=\"plain\">import { AppModule } from './app/app.module';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { enableProdMode } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\">import { environment } from './environments/environment';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">if (environment.production) {</div><div class=\"ql-code-block\" data-language=\"plain\">  enableProdMode();</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// bootstrap means formating web components</div><div class=\"ql-code-block\" data-language=\"plain\">platformBrowserDynamic().bootstrapModule(AppModule)</div><div class=\"ql-code-block\" data-language=\"plain\">  .catch(err =&gt; console.error(err));</div></div><p>t///</p>"},{"idx":"7961f7c5-88f2-46b9-a751-31c61510b3b4","name":"13. index.html","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>13. Change Angular Main Index Html File</p><p>•\tIn VSCode, and under the folder ‘src’, in the file ‘index.html’, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;!doctype html&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;html lang=\"en\"&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;head&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;base href=\"/\" /&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;meta charset=\"utf-8\" /&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;title&gt;A8loginSbsCli&lt;/title&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;base href=\"/\"&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;!-- bootstrap css --&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;link href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">&lt;/head&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;body&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">  &lt;app&gt;Loading...&lt;/app&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;/body&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;/html&gt;</div></div><p>t///</p><p>[_L] This part is to load the web contents from app/app.component.html, and replace the 'loading' in the &lt;app&gt; tags, and format the contents as specified in app.module.ts -&gt; app.compnent.ts</p>"},{"idx":"fbf89d13-ec13-4fef-952a-d17a9a1ca0de","name":"14. add script into package.json","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>14. Add start script to package.json</p><p>•\tIn VSCode, and in package.json, paste the code from the corresponding lines in package.json from https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">\"scripts\": {</div><div class=\"ql-code-block\" data-language=\"plain\">\"mycomment\": \"The following is to start the command after npm start. The purpose is to launch the index page in a browser\",</div><div class=\"ql-code-block\" data-language=\"plain\">\"start\": \"ng serve\"</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>[_L] Jason's code is not correct. </p><p>\"start\": \"webpack-dev-server --mode development --open\"</p><p>works on the manual version (a8login_stepbystep), but not here.</p><p>t///</p>"},{"idx":"f5aa0946-bd6c-4efb-a26b-981b3885ec71","name":"15. Start the application","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>15. Start the application</p><p>•\tIn node.js command window and under the project root, type npm start</p><p>t///</p>"},{"idx":"MY5fd9572d-f093-4af8-b7ea-9ed0afb7d709","name":"Handling Errors","custparents":[{"idx":"58b45925-8e68-46aa-8c39-6ea7616d4e9a"}],"NodeDescription":"<p>///t</p><p>16.Handle errors</p><p>Problem:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">npm start</div></div><p>Cannot find package.json</p><p>npm ERR! path C:\\Users\\Z70\\package.json</p><p>Analysis:</p><p>Started the line in the folder:</p><p>PS C:\\Users\\Z70\\Angular 8 projects</p><p>Solution:</p><p>should start the line in the folder:</p><p>C:\\Users\\Z70\\Angular 8 projects\\a8login-sbs-cli</p><p><br></p><p>Problem:</p><p>in package.json, the scripts part:</p><p>\"start\": \"webpack-dev-server --mode development --open\"</p><p>The web page was launched in localhost:8080, but stuck at 'loading...'</p><p><br></p><p>change the start to 'ng serve'</p><p>prompted the error:</p><p>ERROR in The Angular Compiler requires TypeScript &gt;=3.4.0 and &lt;3.6.0 but 3.7.5 was found instead.</p><p>** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **</p><p><br></p><p>rollback to typescript 3.5.3</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">npm install --save-dev typescript@3.5</div></div><p>It works.</p><p>[_Q]</p><p>It seems that for CLI, on localhost:4200 it works smoothly. It does not work and stuck on the index.html. Not sure why</p><p>[_W]</p><p>Need to open the browser manually (it won't start the browser by itself</p><p>t///</p>"}]},{"idx":"MY828c5aa8-1dfa-4b6b-91f4-b8910b7eb286","name":"A1. Link to github","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"NodeDescription":"<p>///t</p><p>A1. Link to github</p><p><br></p><p>Create a new repository at github:</p><p>https://github.com/ShenzhenYAO/mya8login-cli-sbs.git</p><p>under the folder</p><p>C:\\Users\\Z70\\Angular 8 projects\\a8login-sbs-cli</p><p>run the following</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">git remote add origin https://github.com/ShenzhenYAO/mya8login-cli-sbs.git</div><div class=\"ql-code-block\" data-language=\"plain\">git add .</div><div class=\"ql-code-block\" data-language=\"plain\">git commit -m \"1\"</div><div class=\"ql-code-block\" data-language=\"plain\">git push origin master</div></div><p>[_W] Check the gitignore file, the node_modeules folder is not pushed.</p><p>t///</p>"},{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e","name":"B. Add routing & multiple pages","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"children":[{"idx":"901152d1-2697-43f6-905c-1035343d2c73","name":"1. home.component.html","custparents":[{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e"}],"NodeDescription":"<p>///t</p><p>1. Home Page Component &amp; Template</p><p>Under C:\\Users\\Z70\\Angular 8 projects\\a8login-sbs-cli\\src\\app,</p><p>create the home page componets by type:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">ng g c home</div></div><p>•\tIn VSCODe, and under app, in the folder ‘home’. Inside ‘home’, create a file ‘home.component.html’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;h1&gt;Home Page&lt;/h1&gt;</div></div><p><br></p><p>•\tInside ‘home’, create a file ‘home.component.ts.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ templateUrl: 'home.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\">export class HomeComponent {}</div><div class=\"ql-code-block\" data-language=\"plain\">/*</div><div class=\"ql-code-block\" data-language=\"plain\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({</div><div class=\"ql-code-block\" data-language=\"plain\">selector: 'app-home',</div><div class=\"ql-code-block\" data-language=\"plain\">templateUrl: './home.component.html',</div><div class=\"ql-code-block\" data-language=\"plain\">styleUrls: ['./home.component.css']</div><div class=\"ql-code-block\" data-language=\"plain\">})</div><div class=\"ql-code-block\" data-language=\"plain\">export class HomeComponent implements OnInit {</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">constructor() { }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">ngOnInit() {</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div></div><p><br></p><p>•\tInside ‘home’, create a file ‘index.ts.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">export*from'./home.component';</div></div><p><br></p><p>t///</p>"},{"idx":"06c516d0-9968-4914-b7b2-c42f811a24c8","name":"2. Login page component and template","custparents":[{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e"}],"NodeDescription":"<p>///t</p><p>2. Login Page Component &amp; Template</p><p>Under C:\\Users\\Z70\\Angular 8 projects\\a8login-sbs-cli\\src\\app,</p><p>create the home page componets by type:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">ng g c login</div></div><p><br></p><p><br></p><p>·In VSCode, and under app, create a folder ‘login’. Inside ‘login’, create a file ‘login.component.html’.</p><p>·In this file, paste the code from the corresponding part from <a href=\"https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages\" target=\"_blank\">https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</a></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;h1&gt;Login Page&lt;/h1&gt;</div></div><p><br></p><p><br></p><p>·Inside ‘login’, create a file ‘login.component.ts.</p><p>·In this file, paste the code from the corresponding part from <a href=\"https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages\" target=\"_blank\">https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</a></p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ templateUrl: 'login.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\">export class LoginComponent {}</div></div><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({ templateUrl: 'login.component.html' })</div><div class=\"ql-code-block\">export class LoginComponent {}</div><div class=\"ql-code-block\">/*</div><div class=\"ql-code-block\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({</div><div class=\"ql-code-block\">  selector: 'app-login',</div><div class=\"ql-code-block\">  templateUrl: './login.component.html',</div><div class=\"ql-code-block\">  styleUrls: ['./login.component.css']</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\">export class LoginComponent implements OnInit {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">  constructor() { }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">  ngOnInit() {</div><div class=\"ql-code-block\">  }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">}</div><div class=\"ql-code-block\">*/</div></div><p><br></p><p>·Inside ‘login’, create a file ‘index.ts.</p><p>·In this file, paste the code from the corresponding part from <a href=\"https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages\" target=\"_blank\">https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</a></p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">export * from './login.component';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p><br></p><p>t///</p>"},{"idx":"cb0418ab-d358-4dbc-bb1b-048e66c4f7c2","name":"3. register page","custparents":[{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e"}],"NodeDescription":"<p>///t</p><p>3. Register Page Component &amp; Template</p><p>Under C:\\Users\\Z70\\Angular 8 projects\\a8login-sbs-cli\\src\\app,</p><p>create the home page componets by type:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">ng g c register</div></div><p><br></p><p><br></p><p>•\tIn VSCODe, and under app, create a folder ‘register’. Inside ‘register’, create a file ‘register.component.html’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;h1&gt;Register Page&lt;/h1&gt;</div></div><p>•\tInside ‘register’, create a file ‘register.component.ts.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ templateUrl: 'register.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\">export class RegisterComponent {}</div><div class=\"ql-code-block\" data-language=\"plain\">/*</div><div class=\"ql-code-block\" data-language=\"plain\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({</div><div class=\"ql-code-block\" data-language=\"plain\">  selector: 'app-register',</div><div class=\"ql-code-block\" data-language=\"plain\">  templateUrl: './register.component.html',</div><div class=\"ql-code-block\" data-language=\"plain\">  styleUrls: ['./register.component.css']</div><div class=\"ql-code-block\" data-language=\"plain\">})</div><div class=\"ql-code-block\" data-language=\"plain\">export class RegisterComponent implements OnInit {</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">  constructor() { }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">  ngOnInit() {</div><div class=\"ql-code-block\" data-language=\"plain\">  }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div></div><p><br></p><p>•\tInside ‘register’, create a file ‘index.ts.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">export * from './register.component';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p><br></p><p><br></p><p>t///</p>"},{"idx":"54bc76a6-9b22-4bcb-99d3-9b4970c398b4","name":"4. Add components to App module","custparents":[{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e"}],"NodeDescription":"<p>///t</p><p>4. Add Components to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages. Basically, it is to add the specification for home, login, and register, as have been done in step 1 to 3.</p><p>(was done automatically )</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">/* this file is to</div><div class=\"ql-code-block\" data-language=\"plain\">1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\" data-language=\"plain\">2) run the customized module AppComponent (which is to specify the web components to obtain,</div><div class=\"ql-code-block\" data-language=\"plain\">  and how to display it)</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\" data-language=\"plain\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// import { AppRoutingModule } from './app-routing.module';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\" data-language=\"plain\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\" data-language=\"plain\">import { HomeComponent } from './home/home.component';</div><div class=\"ql-code-block\" data-language=\"plain\">import { LoginComponent } from './login/login.component';</div><div class=\"ql-code-block\" data-language=\"plain\">import { RegisterComponent } from './register/register.component';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/*decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc),</div><div class=\"ql-code-block\" data-language=\"plain\"> and declare AppComponent so that it can be used by all components and templates,</div><div class=\"ql-code-block\" data-language=\"plain\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\" data-language=\"plain\"> https://angular.io/guide/bootstrapping, and https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\" data-language=\"plain\"> */</div><div class=\"ql-code-block\" data-language=\"plain\">@NgModule({</div><div class=\"ql-code-block\" data-language=\"plain\">  declarations: [</div><div class=\"ql-code-block\" data-language=\"plain\">    AppComponent,</div><div class=\"ql-code-block\" data-language=\"plain\">    HomeComponent,</div><div class=\"ql-code-block\" data-language=\"plain\">    LoginComponent,</div><div class=\"ql-code-block\" data-language=\"plain\">    RegisterComponent</div><div class=\"ql-code-block\" data-language=\"plain\">  ],</div><div class=\"ql-code-block\" data-language=\"plain\">  imports: [</div><div class=\"ql-code-block\" data-language=\"plain\">    BrowserModule</div><div class=\"ql-code-block\" data-language=\"plain\">    // ,</div><div class=\"ql-code-block\" data-language=\"plain\">    // AppRoutingModule</div><div class=\"ql-code-block\" data-language=\"plain\">  ],</div><div class=\"ql-code-block\" data-language=\"plain\">  providers: [],</div><div class=\"ql-code-block\" data-language=\"plain\">  bootstrap: [AppComponent]</div><div class=\"ql-code-block\" data-language=\"plain\">})</div><div class=\"ql-code-block\" data-language=\"plain\">export class AppModule { }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p>t///</p>"},{"idx":"75e39a6f-aed8-4d9c-87eb-2e7324fde4cb","name":"5. Configure App Routing Module","custparents":[{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e"}],"NodeDescription":"<p>///t</p><p>5. Configure App Routing Module</p><p>•\tQuestion: what is routing…</p><p>•\tIn VSCODe, and under app, create a file ‘app.routing.ts’</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><p>[_L]Routing module is for navigating across different web pages.</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Routes, RouterModule } from '@angular/router';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\" data-language=\"plain\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\" data-language=\"plain\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">const routes: Routes = [</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: '', component: HomeComponent },</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: 'login', component: LoginComponent },</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: 'register', component: RegisterComponent },</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    // otherwise redirect to home</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: '**', redirectTo: '' }</div><div class=\"ql-code-block\" data-language=\"plain\">];</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">export const appRoutingModule = RouterModule.forRoot(routes);</div></div><p><br></p><p>t///</p>"},{"idx":"7ab54529-6bde-4f2f-a9f6-f09b787b2782","name":"6. Add App Routing Module to App Module","custparents":[{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e"}],"NodeDescription":"<p>///t</p><p>6. Add App Routing Module to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages. Basically, it is to add the specification for home, login, and register, as have been done in step 5.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">/* this file is to</div><div class=\"ql-code-block\" data-language=\"plain\">1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\" data-language=\"plain\">2) run the customized module AppComponent (which is to specify the web components to obtain,</div><div class=\"ql-code-block\" data-language=\"plain\">  and how to display it)</div><div class=\"ql-code-block\" data-language=\"plain\">*/</div><div class=\"ql-code-block\" data-language=\"plain\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\" data-language=\"plain\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// import { AppRoutingModule } from './app-routing.module';</div><div class=\"ql-code-block\" data-language=\"plain\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\" data-language=\"plain\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\" data-language=\"plain\">import { HomeComponent } from './home/home.component';</div><div class=\"ql-code-block\" data-language=\"plain\">import { LoginComponent } from './login/login.component';</div><div class=\"ql-code-block\" data-language=\"plain\">import { RegisterComponent } from './register/register.component';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">/*decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc),</div><div class=\"ql-code-block\" data-language=\"plain\"> and declare AppComponent so that it can be used by all components and templates,</div><div class=\"ql-code-block\" data-language=\"plain\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\" data-language=\"plain\"> https://angular.io/guide/bootstrapping, and https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\" data-language=\"plain\"> */</div><div class=\"ql-code-block\" data-language=\"plain\">@NgModule({</div><div class=\"ql-code-block\" data-language=\"plain\">  declarations: [</div><div class=\"ql-code-block\" data-language=\"plain\">    AppComponent,</div><div class=\"ql-code-block\" data-language=\"plain\">    HomeComponent,</div><div class=\"ql-code-block\" data-language=\"plain\">    LoginComponent,</div><div class=\"ql-code-block\" data-language=\"plain\">    RegisterComponent</div><div class=\"ql-code-block\" data-language=\"plain\">  ],</div><div class=\"ql-code-block\" data-language=\"plain\">  imports: [</div><div class=\"ql-code-block\" data-language=\"plain\">    BrowserModule,</div><div class=\"ql-code-block\" data-language=\"plain\">    // AppRoutingModule</div><div class=\"ql-code-block\" data-language=\"plain\">    appRoutingModule</div><div class=\"ql-code-block\" data-language=\"plain\">  ],</div><div class=\"ql-code-block\" data-language=\"plain\">  providers: [],</div><div class=\"ql-code-block\" data-language=\"plain\">  bootstrap: [AppComponent]</div><div class=\"ql-code-block\" data-language=\"plain\">})</div><div class=\"ql-code-block\" data-language=\"plain\">export class AppModule { }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p>t///</p>"},{"idx":"7c3d9412-0e74-46b7-81d1-e3a5133e9dfc","name":"7. Add Router Outlet and Navigation to App Component","custparents":[{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e"}],"NodeDescription":"<p>///t</p><p>7. Add Router Outlet and Navigation to App Component</p><p>•\tIn /src/app/app/component.html, replace the &lt;h1&gt;Hello Angular 8!&lt;/h1&gt; message with the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;!-- nav --&gt;</div><div class=\"ql-code-block\">&lt;nav class=\"navbar navbar-expand navbar-dark bg-dark\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"navbar-nav\"&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/\"&gt;Home&lt;/a&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/login\"&gt;Login&lt;/a&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/register\"&gt;Register&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/nav&gt;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">&lt;!-- main content container --&gt;</div><div class=\"ql-code-block\">&lt;div class=\"jumbotron\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"container\"&gt;</div><div class=\"ql-code-block\">        &lt;div class=\"row\"&gt;</div><div class=\"ql-code-block\">            &lt;div class=\"col-sm-8 offset-sm-2\"&gt;</div><div class=\"ql-code-block\">                &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"ql-code-block\">            &lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/div&gt;</div></div><p>t///</p>"},{"idx":"af9b05ab-efc3-4d91-a836-3b1b9d27b148","name":"8. Update Webpack Dev Server Config","custparents":[{"idx":"49be1e55-149a-4fc7-b429-459270d2d11e"}],"NodeDescription":"<p>///t</p><p>8. Update Webpack Dev Server Config</p><p>•\tAdd code to webpack.config.js to prevent 404 errors corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><p>[_W]</p><p>•\tNote that this part is different from the above source, the correct code can be found in https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">//Basically the webpack config is to setup how to compile ts to js, and how to run js programs/plug-ins properly.</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// the function require is to load modules. see https://www.quora.com/What-is-the-use-of-require-function-in-Javascript</div><div class=\"ql-code-block\">const webpack = require('webpack');</div><div class=\"ql-code-block\">const HtmlWebpackPlugin = require('html-webpack-plugin');</div><div class=\"ql-code-block\">const path = require('path');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">module.exports = {</div><div class=\"ql-code-block\">    entry: './src/main.ts',</div><div class=\"ql-code-block\">    resolve: {</div><div class=\"ql-code-block\">        extensions: ['.ts', '.js'],</div><div class=\"ql-code-block\">        alias: {</div><div class=\"ql-code-block\">            '@': path.resolve(__dirname, 'src/app/'),</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    module: {</div><div class=\"ql-code-block\">        rules: [</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.ts$/,</div><div class=\"ql-code-block\">                use: ['ts-loader', 'angular2-template-loader']</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.html$/,</div><div class=\"ql-code-block\">                use: 'html-loader'</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.less$/,</div><div class=\"ql-code-block\">                use: ['style-loader', 'css-loader', 'less-loader']</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            // workaround for warning: System.import() is deprecated and will be removed soon. Use import() instead.</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /[\\/\\\\]@angular[\\/\\\\].+\\.js$/,</div><div class=\"ql-code-block\">                parser: { system: true }</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">        ]</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    plugins: [</div><div class=\"ql-code-block\">        new HtmlWebpackPlugin({ template: './src/index.html' }),</div><div class=\"ql-code-block\">        new webpack.DefinePlugin({</div><div class=\"ql-code-block\">            // global app config object</div><div class=\"ql-code-block\">            config: JSON.stringify({</div><div class=\"ql-code-block\">                apiUrl: 'http://localhost:4000'</div><div class=\"ql-code-block\">            })</div><div class=\"ql-code-block\">        }),</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // workaround for warning: Critical dependency: the request of a dependency is an expression</div><div class=\"ql-code-block\">        new webpack.ContextReplacementPlugin(</div><div class=\"ql-code-block\">            /\\@angular(\\\\|\\/)core(\\\\|\\/)fesm5/,</div><div class=\"ql-code-block\">            path.resolve(__dirname, 'src')</div><div class=\"ql-code-block\">        )</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    optimization: {</div><div class=\"ql-code-block\">        splitChunks: {</div><div class=\"ql-code-block\">            chunks: 'all',</div><div class=\"ql-code-block\">        },</div><div class=\"ql-code-block\">        runtimeChunk: true</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    devServer: {</div><div class=\"ql-code-block\">        historyApiFallback: true</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"}],"NodeDescription":"<p>///t</p><p>B. Add routing &amp; multiple pages</p><p>This part is to add ‘home, login, and register’ into the top banner of the page. </p><p>Tutorial of this part is available at https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><p>t///</p>"},{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898","name":"C. Login Form, Authentication Service & Route Guard","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"NodeDescription":"<p>///t</p><p>This part is to create the login form. With the link to the register form (the register form is not developed yet).</p><p>The tutorial of this part can be found at https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard.</p><p><br></p><p>[_L] failed to compile</p><p><strong>Analyses:</strong></p><p><strong>the folder _services should be in src/app, not in src/</strong></p><p><br></p><p>ERROR in ./src/app/_helpers/jwt.interceptor.ts</p><p>Module not found: Error: Can't resolve '../_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers'</p><p>@ ./src/app/_helpers/jwt.interceptor.ts 13:18-41</p><p>@ ./src/app/_helpers/index.ts</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p>ERROR in ./src/app/_helpers/auth.guard.ts</p><p>Module not found: Error: Can't resolve '../_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers'</p><p>@ ./src/app/_helpers/auth.guard.ts 14:18-41</p><p>@ ./src/app/_helpers/index.ts</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p><br></p><p>ERROR in ./src/app/_helpers/error.interceptor.ts</p><p>Module not found: Error: Can't resolve '../_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers'</p><p>@ ./src/app/_helpers/error.interceptor.ts 15:18-41</p><p>@ ./src/app/_helpers/index.ts</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p><br></p><p>ERROR in ./src/app/login/login.component.ts</p><p>Module not found: Error: Can't resolve '../_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\login'</p><p>@ ./src/app/login/login.component.ts 16:18-41</p><p>@ ./src/app/login/index.ts</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p><br></p><p>ERROR in ./src/app/app.component.ts</p><p>Module not found: Error: Can't resolve './_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app'</p><p>@ ./src/app/app.component.ts 18:18-40</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\app.component.ts</p><p>./src/app/app.component.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\app.component.ts(9,39)</p><p>TS2307: Cannot find module './_services'.</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\auth.guard.ts</p><p>./src/app/_helpers/auth.guard.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\auth.guard.ts(4,39)</p><p>TS2307: Cannot find module '../_services'.</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\error.interceptor.ts</p><p>./src/app/_helpers/error.interceptor.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\error.interceptor.ts(6,39)</p><p>TS2307: Cannot find module '../_services'.</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\jwt.interceptor.ts</p><p>./src/app/_helpers/jwt.interceptor.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\jwt.interceptor.ts(5,39)</p><p>TS2307: Cannot find module '../_services'.</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\login\\login.component.ts</p><p>./src/app/login/login.component.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\login\\login.component.ts(6,39)</p><p>TS2307: Cannot find module '../_services'.</p><p><br></p><p><br></p><p>t///</p>","children":[{"idx":"5359a36b-4d8d-4112-be7d-2121cff145f0","name":"1. Create Fake Backend","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"children":[{"idx":"4e5ea331-c7c5-4a48-a478-c4b7b628c01d","name":"1.1 Create Helpers Folder","custparents":[{"idx":"5359a36b-4d8d-4112-be7d-2121cff145f0"}],"NodeDescription":"<p>///t</p><p>1.1 Create Helpers Folder</p><p>•\tIn VSCode, and under app, create a folder ‘_helpers’.</p><p>[_Q] Why it is called _helpers</p><p>t///</p>"},{"idx":"3b382cf8-e0ca-47aa-97cb-fa8437a4a6f5","name":"1.2 Create Fake Backend Http Interceptor","custparents":[{"idx":"5359a36b-4d8d-4112-be7d-2121cff145f0"}],"NodeDescription":"<p>///t</p><p>•\tIn _helpers, create a file ‘fake-backend.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\">import { Observable, of, throwError } from 'rxjs';</div><div class=\"ql-code-block\">import { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">let users = [{ id: 1, firstName: 'Jason', lastName: 'Watmore', username: 'test', password: 'test' }];</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable()</div><div class=\"ql-code-block\">export class FakeBackendInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\">        const { url, method, headers, body } = request;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // wrap in delayed observable to simulate server api call</div><div class=\"ql-code-block\">        return of(null)</div><div class=\"ql-code-block\">            .pipe(mergeMap(handleRoute))</div><div class=\"ql-code-block\">            .pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)</div><div class=\"ql-code-block\">            .pipe(delay(500))</div><div class=\"ql-code-block\">            .pipe(dematerialize());</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function handleRoute() {</div><div class=\"ql-code-block\">            switch (true) {</div><div class=\"ql-code-block\">                case url.endsWith('/users/authenticate') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\">                    return authenticate();</div><div class=\"ql-code-block\">                default:</div><div class=\"ql-code-block\">                    // pass through any requests not handled above</div><div class=\"ql-code-block\">                    return next.handle(request);</div><div class=\"ql-code-block\">            }    </div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // route functions</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function authenticate() {</div><div class=\"ql-code-block\">            const { username, password } = body;</div><div class=\"ql-code-block\">            const user = users.find(x =&gt; x.username === username &amp;&amp; x.password === password);</div><div class=\"ql-code-block\">            if (!user) return error('Username or password is incorrect');</div><div class=\"ql-code-block\">            return ok({</div><div class=\"ql-code-block\">                id: user.id,</div><div class=\"ql-code-block\">                username: user.username,</div><div class=\"ql-code-block\">                firstName: user.firstName,</div><div class=\"ql-code-block\">                lastName: user.lastName,</div><div class=\"ql-code-block\">                token: 'fake-jwt-token'</div><div class=\"ql-code-block\">            })</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // helper functions</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function ok(body?) {</div><div class=\"ql-code-block\">            return of(new HttpResponse({ status: 200, body }))</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function error(message) {</div><div class=\"ql-code-block\">            return throwError({ error: { message } });</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">export const fakeBackendProvider = {</div><div class=\"ql-code-block\">    // use fake backend in place of Http service for backend-less development</div><div class=\"ql-code-block\">    provide: HTTP_INTERCEPTORS,</div><div class=\"ql-code-block\">    useClass: FakeBackendInterceptor,</div><div class=\"ql-code-block\">    multi: true</div><div class=\"ql-code-block\">};</div></div><p><br></p><p>t///</p>"},{"idx":"b53aefb8-6cd4-44af-8df9-56c4165d8789","name":"1.3 Create Barrel File index.ts","custparents":[{"idx":"5359a36b-4d8d-4112-be7d-2121cff145f0"}],"NodeDescription":"<p>///t</p><p>1.3 Create Barrel File in Helpers Folder</p><p>•\tIn _helpers, create a file ‘index.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './fake-backend';</div></div><p>t///</p>"},{"idx":"7260064a-a16b-447e-a740-f6dfd4b2e1a7","name":"1.4 Add Fake Backend to App Module","custparents":[{"idx":"5359a36b-4d8d-4112-be7d-2121cff145f0"}],"NodeDescription":"<p>///t</p><p>1.4 Add Fake Backend to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// used to create fake backend</div><div class=\"ql-code-block\">import { fakeBackendProvider } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    providers: [</div><div class=\"ql-code-block\">        // provider used to create fake backend</div><div class=\"ql-code-block\">        fakeBackendProvider</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div></div><p>t///</p>"}]},{"idx":"0b599604-21d5-4a1d-bcec-a3f0ce8efdfe","name":"2. Create Global Config Object","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"children":[{"idx":"b0497bf5-dbd3-4d3b-8424-825e40b124d0","name":"2.1 Add contents to webpack.config.js","custparents":[{"idx":"0b599604-21d5-4a1d-bcec-a3f0ce8efdfe"}],"NodeDescription":"<p>///t</p><p>2.1</p><p>•\tAdd code to webpack.config.js from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages. </p><p>•\tNote that this part is different from the above source, the correct code can be found in https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><p><strong>Nothing to change here, as the code has been injected in early steps.</strong></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">//Basically the webpack config is to setup how to compile ts to js, and how to run js programs/plug-ins properly.</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// the function require is to load modules. see https://www.quora.com/What-is-the-use-of-require-function-in-Javascript</div><div class=\"ql-code-block\">const webpack = require('webpack');</div><div class=\"ql-code-block\">const HtmlWebpackPlugin = require('html-webpack-plugin');</div><div class=\"ql-code-block\">const path = require('path');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">module.exports = {</div><div class=\"ql-code-block\">    entry: './src/main.ts',</div><div class=\"ql-code-block\">    resolve: {</div><div class=\"ql-code-block\">        extensions: ['.ts', '.js'],</div><div class=\"ql-code-block\">        alias: {</div><div class=\"ql-code-block\">            '@': path.resolve(__dirname, 'src/app/'),</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    module: {</div><div class=\"ql-code-block\">        rules: [</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.ts$/,</div><div class=\"ql-code-block\">                use: ['ts-loader', 'angular2-template-loader']</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.html$/,</div><div class=\"ql-code-block\">                use: 'html-loader'</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.less$/,</div><div class=\"ql-code-block\">                use: ['style-loader', 'css-loader', 'less-loader']</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            // workaround for warning: System.import() is deprecated and will be removed soon. Use import() instead.</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /[\\/\\\\]@angular[\\/\\\\].+\\.js$/,</div><div class=\"ql-code-block\">                parser: { system: true }</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">        ]</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    plugins: [</div><div class=\"ql-code-block\">        new HtmlWebpackPlugin({ template: './src/index.html' }),</div><div class=\"ql-code-block\">        new webpack.DefinePlugin({</div><div class=\"ql-code-block\">            // global app config object</div><div class=\"ql-code-block\">            config: JSON.stringify({</div><div class=\"ql-code-block\">                apiUrl: 'http://localhost:4000'</div><div class=\"ql-code-block\">            })</div><div class=\"ql-code-block\">        }),</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // workaround for warning: Critical dependency: the request of a dependency is an expression</div><div class=\"ql-code-block\">        new webpack.ContextReplacementPlugin(</div><div class=\"ql-code-block\">            /\\@angular(\\\\|\\/)core(\\\\|\\/)fesm5/,</div><div class=\"ql-code-block\">            path.resolve(__dirname, 'src')</div><div class=\"ql-code-block\">        )</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    optimization: {</div><div class=\"ql-code-block\">        splitChunks: {</div><div class=\"ql-code-block\">            chunks: 'all',</div><div class=\"ql-code-block\">        },</div><div class=\"ql-code-block\">        runtimeChunk: true</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    devServer: {</div><div class=\"ql-code-block\">        historyApiFallback: true</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p><br></p><p>t///</p>"},{"idx":"c1732be7-d40c-43bf-9c78-25c4d93d762c","name":"2.2 Create Custom Typings File","custparents":[{"idx":"0b599604-21d5-4a1d-bcec-a3f0ce8efdfe"}],"NodeDescription":"<p>///t</p><p>2.2 Create Custom Typings File</p><p>•\tIn _/src, create a file ‘typings.d.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><p>[_Q] what is this file for?</p><p>\"A custom typings file is used to declare TypeScript types that are created outside of the Angular application, so the TypeScript compiler is aware of them and doesn't give you compile errors about unknown types. This typings file contains a declaration for the global config object created by webpack above.\"</p><p>Not know the meanings of the above paragraph.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// so the typescript compiler doesn't complain about the global config object</div><div class=\"ql-code-block\">declare var config: any;</div></div><p>t///</p>"}]},{"idx":"d70870dc-69fc-420b-8176-e995b11662cc","name":"3. Create Authentication Service","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"children":[{"idx":"b6408be0-2475-4065-9add-1d301c171bf6","name":"3.1 Create Services Folder","custparents":[{"idx":"d70870dc-69fc-420b-8176-e995b11662cc"}],"NodeDescription":"<p>///t</p><p>3.1 Create Services Folder</p><p>•\tIn VSCode, and under app, create a folder ‘_services’.</p><p>[_Q] What is this folder for?</p><p>\"The authentication service is used to login &amp; logout of the Angular app, it notifies other components when the user logs in &amp; out, and allows access the currently logged in user.\"</p><p>t///</p>"},{"idx":"0e6c5a6a-86d5-4e8a-bd2f-86447d487738","name":"3.2 Create Authentication Service","custparents":[{"idx":"d70870dc-69fc-420b-8176-e995b11662cc"}],"NodeDescription":"<p>///t</p><p>3.2 Create Authentication Service</p><p>•\tIn _services, create a file ‘authentication.service.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpClient } from '@angular/common/http';</div><div class=\"ql-code-block\">import { BehaviorSubject, Observable } from 'rxjs';</div><div class=\"ql-code-block\">import { map } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class AuthenticationService {</div><div class=\"ql-code-block\">    private currentUserSubject: BehaviorSubject&lt;any&gt;;</div><div class=\"ql-code-block\">    public currentUser: Observable&lt;any&gt;;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(private http: HttpClient) {</div><div class=\"ql-code-block\">        this.currentUserSubject = new BehaviorSubject&lt;any&gt;(JSON.parse(localStorage.getItem('currentUser')));</div><div class=\"ql-code-block\">        this.currentUser = this.currentUserSubject.asObservable();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    public get currentUserValue() {</div><div class=\"ql-code-block\">        return this.currentUserSubject.value;</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    login(username, password) {</div><div class=\"ql-code-block\">        return this.http.post&lt;any&gt;(`${config.apiUrl}/users/authenticate`, { username, password })</div><div class=\"ql-code-block\">            .pipe(map(user =&gt; {</div><div class=\"ql-code-block\">                // store user details and jwt token in local storage to keep user logged in between page refreshes</div><div class=\"ql-code-block\">                localStorage.setItem('currentUser', JSON.stringify(user));</div><div class=\"ql-code-block\">                this.currentUserSubject.next(user);</div><div class=\"ql-code-block\">                return user;</div><div class=\"ql-code-block\">            }));</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    logout() {</div><div class=\"ql-code-block\">        // remove user from local storage and set current user to null</div><div class=\"ql-code-block\">        localStorage.removeItem('currentUser');</div><div class=\"ql-code-block\">        this.currentUserSubject.next(null);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"4323e761-5411-4c02-ae04-ff05b800a1cc","name":"3.3 Create Barrel File in Services Folder","custparents":[{"idx":"d70870dc-69fc-420b-8176-e995b11662cc"}],"NodeDescription":"<p>///t</p><p>3.3 Create Barrel File in Services Folder</p><p>•\tIn _ services, create a file ‘index.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './authentication.service';</div></div><p>t///</p>"}]},{"idx":"9cb71f49-9a25-4e03-aa15-daec1b3c4d49","name":"4. Import ReactiveFormsModule and HttpClientModule into App Module","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"NodeDescription":"<p>///t</p><p>4. Import ReactiveFormsModule and HttpClientModule into app.module.ts</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { ReactiveFormsModule } from '@angular/forms';</div><div class=\"ql-code-block\">import { HttpClientModule } from '@angular/common/http';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// used to create fake backend</div><div class=\"ql-code-block\">import { fakeBackendProvider } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        ReactiveFormsModule,</div><div class=\"ql-code-block\">        HttpClientModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    providers: [</div><div class=\"ql-code-block\">        // provider used to create fake backend</div><div class=\"ql-code-block\">        fakeBackendProvider</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div></div><p><br></p><p>t///</p>"},{"idx":"fa60adff-3160-4431-a915-af34d6bbb1cb","name":"5. Add Form Logic to Login Component","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"NodeDescription":"<p>///t</p><p>5. Add Form Logic to Login Component</p><p>[_Q] the line has error (Cannot find module '../_services'.):</p><p>\"import { AuthenticationService } from '../_services'\"</p><p><strong>the folder _services should be in src/app, not in src/</strong></p><p><br></p><p>•\tIn /src/app/login/login.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\">import { Router, ActivatedRoute } from '@angular/router';</div><div class=\"ql-code-block\" data-language=\"plain\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\" data-language=\"plain\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { AuthenticationService } from '../_services'</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({templateUrl: 'login.component.html'})</div><div class=\"ql-code-block\" data-language=\"plain\">export class LoginComponent implements OnInit {</div><div class=\"ql-code-block\" data-language=\"plain\">loginForm: FormGroup;</div><div class=\"ql-code-block\" data-language=\"plain\">loading = false;</div><div class=\"ql-code-block\" data-language=\"plain\">submitted = false;</div><div class=\"ql-code-block\" data-language=\"plain\">returnUrl: string;</div><div class=\"ql-code-block\" data-language=\"plain\">error: string;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">constructor(</div><div class=\"ql-code-block\" data-language=\"plain\">private formBuilder: FormBuilder,</div><div class=\"ql-code-block\" data-language=\"plain\">private route: ActivatedRoute,</div><div class=\"ql-code-block\" data-language=\"plain\">private router: Router,</div><div class=\"ql-code-block\" data-language=\"plain\">private authenticationService: AuthenticationService</div><div class=\"ql-code-block\" data-language=\"plain\">) {</div><div class=\"ql-code-block\" data-language=\"plain\">// redirect to home if already logged in</div><div class=\"ql-code-block\" data-language=\"plain\">if (this.authenticationService.currentUserValue) {</div><div class=\"ql-code-block\" data-language=\"plain\">this.router.navigate(['/']);</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">ngOnInit() {</div><div class=\"ql-code-block\" data-language=\"plain\">this.loginForm = this.formBuilder.group({</div><div class=\"ql-code-block\" data-language=\"plain\">username: ['', Validators.required],</div><div class=\"ql-code-block\" data-language=\"plain\">password: ['', Validators.required]</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// get return url from route parameters or default to '/'</div><div class=\"ql-code-block\" data-language=\"plain\">this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// convenience getter for easy access to form fields</div><div class=\"ql-code-block\" data-language=\"plain\">get f() { return this.loginForm.controls; }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">onSubmit() {</div><div class=\"ql-code-block\" data-language=\"plain\">this.submitted = true;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// stop here if form is invalid</div><div class=\"ql-code-block\" data-language=\"plain\">if (this.loginForm.invalid) {</div><div class=\"ql-code-block\" data-language=\"plain\">return;</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">this.loading = true;</div><div class=\"ql-code-block\" data-language=\"plain\">this.authenticationService.login(this.f.username.value, this.f.password.value)</div><div class=\"ql-code-block\" data-language=\"plain\">.pipe(first())</div><div class=\"ql-code-block\" data-language=\"plain\">.subscribe(</div><div class=\"ql-code-block\" data-language=\"plain\">data =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">this.router.navigate([this.returnUrl]);</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">error =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">this.error = error;</div><div class=\"ql-code-block\" data-language=\"plain\">this.loading = false;</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>t///</p>"},{"idx":"60bad4a2-37e3-47bf-af04-b9d8462651ad","name":"6. Add Form HTML to Login Component Template","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"NodeDescription":"<p>///t</p><p>6. Add Form HTML to Login Component Template</p><p>•\tIn /src/app/login/login.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;div *ngIf=\"error\" class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;</div><div class=\"ql-code-block\">&lt;h2&gt;Login&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Login</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/register\" class=\"btn btn-link\"&gt;Register&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"},{"idx":"04937dea-1e51-4cc7-b398-0a12dd0bde67","name":"7. Add Logout and Show/Hide Nav to App Component","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"children":[{"idx":"3d0e0bc5-28b0-4124-92cb-a967fbb54673","name":"7.1 Add Logic to App Component","custparents":[{"idx":"04937dea-1e51-4cc7-b398-0a12dd0bde67"}],"NodeDescription":"<p>///t</p><p>7.1 Add Logic to App Component</p><p>•\tIn /src/app/app.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// this file is to 1) load build-in modules (Component)</div><div class=\"ql-code-block\">// 2) specify the web components to obtain (in which html file, within what tag) by decorating Component</div><div class=\"ql-code-block\">// best explained here: https://www.youtube.com/watch?v=16rQyEQtpyQ</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">//import the module 'Component' from angular's core modules 9under the folder /node_modules/@angular/core</div><div class=\"ql-code-block\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\">import { Router } from '@angular/router';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from './_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">//The following is to run the module 'component', i.e., to get components/contents in the tag &lt;app&gt;&lt;/app&gt; from the file 'app.component.html'</div><div class=\"ql-code-block\">//The actions to assign values (selector = 'app', temlateUrl = 'app.component.html') is called decorate. </div><div class=\"ql-code-block\">@Component({ selector: 'app', templateUrl: 'app.component.html' })</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// define a module AppComponent (instead of script), and get it ready to be imported by other ts (e.g., app.module.ts)</div><div class=\"ql-code-block\">export class AppComponent {</div><div class=\"ql-code-block\">    currentUser: any;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        this.authenticationService.currentUser.subscribe(x =&gt; this.currentUser = x);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    logout() {</div><div class=\"ql-code-block\">        this.authenticationService.logout();</div><div class=\"ql-code-block\">        this.router.navigate(['/login']);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"e5ec1333-4397-4398-9482-1869bba571dd","name":"7.2 Update Nav in App Component Template","custparents":[{"idx":"04937dea-1e51-4cc7-b398-0a12dd0bde67"}],"NodeDescription":"<p>///t</p><p>7.2 Update Nav in App Component Template</p><p>•\tIn /src/app/app.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;!-- nav --&gt;</div><div class=\"ql-code-block\">&lt;nav class=\"navbar navbar-expand navbar-dark bg-dark\" *ngIf=\"currentUser\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"navbar-nav\"&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/\"&gt;Home&lt;/a&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" (click)=\"logout()\"&gt;Logout&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/nav&gt;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">&lt;!-- main content container --&gt;</div><div class=\"ql-code-block\">&lt;div class=\"jumbotron\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"container\"&gt;</div><div class=\"ql-code-block\">        &lt;div class=\"row\"&gt;</div><div class=\"ql-code-block\">            &lt;div class=\"col-sm-8 offset-sm-2\"&gt;</div><div class=\"ql-code-block\">                &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"ql-code-block\">            &lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/div&gt;</div></div><p>t///</p>"}]},{"idx":"99c4f444-554c-4d11-9a91-96425bb2afc6","name":"8. Create Route Guard","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"children":[{"idx":"7ef753a3-56c6-48b1-94f4-2e336e580afe","name":"8.1 Create Auth Guard","custparents":[{"idx":"99c4f444-554c-4d11-9a91-96425bb2afc6"}],"NodeDescription":"<p>///t</p><p>8.1 Create Auth Guard</p><p>•\tIn _helpers, create a file ‘auth.guard.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class AuthGuard implements CanActivate {</div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService</div><div class=\"ql-code-block\">    ) {}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {</div><div class=\"ql-code-block\">        const currentUser = this.authenticationService.currentUserValue;</div><div class=\"ql-code-block\">        if (currentUser) {</div><div class=\"ql-code-block\">            // authorised so return true</div><div class=\"ql-code-block\">            return true;</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // not logged in so redirect to login page with the return url</div><div class=\"ql-code-block\">        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});</div><div class=\"ql-code-block\">        return false;</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"25b9125e-905f-432c-acbc-e6bba6c35d00","name":"8.2 Add Auth Guard to Helpers Barrel File","custparents":[{"idx":"99c4f444-554c-4d11-9a91-96425bb2afc6"}],"NodeDescription":"<p>///t</p><p>8.2 Add Auth Guard to Helpers Barrel File</p><p>•\tIn /src/app/_helpers/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './fake-backend';</div><div class=\"ql-code-block\">export * from './auth.guard';</div></div><p>t///</p>"},{"idx":"5b28a7c9-6ad9-4e5a-868b-611406c959c3","name":"8.3 Add Auth Guard to Home Page Route","custparents":[{"idx":"99c4f444-554c-4d11-9a91-96425bb2afc6"}],"NodeDescription":"<p>///t</p><p>8.3 Add Auth Guard to Home Page Route</p><p>•\tIn /src/app/app.routing.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Routes, RouterModule } from '@angular/router';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\" data-language=\"plain\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\" data-language=\"plain\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\" data-language=\"plain\">import { AuthGuard } from './_helpers';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">const routes: Routes = [</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: '', component: HomeComponent, canActivate: [AuthGuard] },</div><div class=\"ql-code-block\" data-language=\"plain\">{ path: 'login', component: LoginComponent },</div><div class=\"ql-code-block\" data-language=\"plain\">{ path: 'register', component: RegisterComponent },</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// otherwise redirect to home</div><div class=\"ql-code-block\" data-language=\"plain\">{ path: '**', redirectTo: '' }</div><div class=\"ql-code-block\" data-language=\"plain\">];</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">export const appRoutingModule = RouterModule.forRoot(routes);</div></div><p>t///</p>"}]},{"idx":"303b666c-acb3-463c-b2ea-6ed4e8024390","name":"9. Create JWT Interceptor","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"children":[{"idx":"7eeaacda-f439-4341-80ae-0591f1faf35d","name":"9.1 Create Angular 8 JWT Interceptor","custparents":[{"idx":"303b666c-acb3-463c-b2ea-6ed4e8024390"}],"NodeDescription":"<p>///t</p><p>9.1 Create Angular 8 JWT Interceptor (Note that the tutorial said Create Angular 7 JWT Interceptor)</p><p>•\tIn _helpers, create a file ‘jwt.interceptor.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';</div><div class=\"ql-code-block\">import { Observable } from 'rxjs';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable()</div><div class=\"ql-code-block\">export class JwtInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\">    constructor(private authenticationService: AuthenticationService) {}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\">        // add authorization header with jwt token if available</div><div class=\"ql-code-block\">        let currentUser = this.authenticationService.currentUserValue;</div><div class=\"ql-code-block\">        if (currentUser &amp;&amp; currentUser.token) {</div><div class=\"ql-code-block\">            request = request.clone({</div><div class=\"ql-code-block\">                setHeaders: { </div><div class=\"ql-code-block\">                    Authorization: `Bearer ${currentUser.token}`</div><div class=\"ql-code-block\">                }</div><div class=\"ql-code-block\">            });</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        return next.handle(request);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"40bed561-e831-4ba2-a006-9ca205b305a8","name":"9.2 Add JWT Interceptor to Barrel File","custparents":[{"idx":"303b666c-acb3-463c-b2ea-6ed4e8024390"}],"NodeDescription":"<p>///t</p><p>9.2 Add JWT Interceptor to Barrel File</p><p>•\tIn /src/app/_helpers/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './fake-backend';</div><div class=\"ql-code-block\">export * from './auth.guard';</div><div class=\"ql-code-block\">export * from './jwt.interceptor';</div></div><p>t///</p>"}]},{"idx":"2903e3bf-fa79-4d32-8774-7f1e14789d01","name":"10. Create Error Interceptor","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"children":[{"idx":"f8dcb4eb-d4ea-45b2-b646-bdc358209ace","name":"10.1 Create Angular 8 Error Interceptor","custparents":[{"idx":"2903e3bf-fa79-4d32-8774-7f1e14789d01"}],"NodeDescription":"<p>///t</p><p>10.1 Create Angular 8 Error Interceptor</p><p>•\tIn _helpers, create a file ‘error.interceptor.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';</div><div class=\"ql-code-block\">import { Observable, throwError } from 'rxjs';</div><div class=\"ql-code-block\">import { catchError } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable()</div><div class=\"ql-code-block\">export class ErrorInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\">    constructor(private authenticationService: AuthenticationService) {}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\">        return next.handle(request).pipe(catchError(err =&gt; {</div><div class=\"ql-code-block\">            if (err.status === 401) {</div><div class=\"ql-code-block\">                // auto logout if 401 response returned from api</div><div class=\"ql-code-block\">                this.authenticationService.logout();</div><div class=\"ql-code-block\">                location.reload(true);</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">            </div><div class=\"ql-code-block\">            const error = err.error.message || err.statusText;</div><div class=\"ql-code-block\">            return throwError(error);</div><div class=\"ql-code-block\">        }))</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"675ccad0-88b7-43b2-aa1e-d52cbe0a2f9f","name":"10.2 Add Error Interceptor to Barrel File","custparents":[{"idx":"2903e3bf-fa79-4d32-8774-7f1e14789d01"}],"NodeDescription":"<p>///t</p><p>10.2 Add Error Interceptor to Barrel File</p><p>•\tIn /src/app/_helpers/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './fake-backend';</div><div class=\"ql-code-block\">export * from './auth.guard';</div><div class=\"ql-code-block\">export * from './jwt.interceptor';</div><div class=\"ql-code-block\">export * from './error.interceptor';</div></div><p>t///</p>"}]},{"idx":"5e763a91-f72f-4161-bc3a-e11577c691c9","name":"11. Add HTTP Interceptors to App Module","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"NodeDescription":"<p>///t</p><p>11. Add HTTP Interceptors to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { ReactiveFormsModule } from '@angular/forms';</div><div class=\"ql-code-block\">import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// used to create fake backend</div><div class=\"ql-code-block\">import { fakeBackendProvider } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\">import { JwtInterceptor, ErrorInterceptor } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        ReactiveFormsModule,</div><div class=\"ql-code-block\">        HttpClientModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    providers: [</div><div class=\"ql-code-block\">        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },</div><div class=\"ql-code-block\">        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },</div><div class=\"ql-code-block\">        // provider used to create fake backend</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        fakeBackendProvider</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div><div class=\"ql-code-block\"><br></div></div><p>t///</p>"},{"idx":"93f59ec9-ec3d-48d4-9e7f-bcd4e4aba9a9","name":"12. In node.js command window","custparents":[{"idx":"19b2457d-5c88-43c2-872d-d21dd9836898"}],"NodeDescription":"<p>///t</p><p>12. In node.js command window, under the folder C:\\Users\\Z70\\Angular 8 projects\\mya8login, type nmp start to launch the application.</p><p><br></p><p>t///</p>"}]},{"idx":"f5e4d580-691b-4f65-b224-932f2996d547","name":"D. Registration Form & User Service","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"NodeDescription":"<p>///t</p><p>D. Registration Form &amp; User Service</p><p>***********************************</p><p>This part is to make the registration form</p><p>The tutorial of this part can be found at https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><p>t///</p>","children":[{"idx":"2182eac8-6e2b-4e9e-a732-87d7011953d4","name":"1. Add Register Route to Fake Backend","custparents":[{"idx":"f5e4d580-691b-4f65-b224-932f2996d547"}],"NodeDescription":"<p>///t</p><p>1. Add Register Route to Fake Backend</p><p>1.1 Update Fake Backend</p><p>•\tIn /src/app/_helpers/fake-backend.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\">import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\" data-language=\"plain\">import { Observable, of, throwError } from 'rxjs';</div><div class=\"ql-code-block\" data-language=\"plain\">import { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// array in local storage for registered users</div><div class=\"ql-code-block\" data-language=\"plain\">let users = JSON.parse(localStorage.getItem('users')) || [];</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Injectable()</div><div class=\"ql-code-block\" data-language=\"plain\">export class FakeBackendInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\" data-language=\"plain\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">        const { url, method, headers, body } = request;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        // wrap in delayed observable to simulate server api call</div><div class=\"ql-code-block\" data-language=\"plain\">        return of(null)</div><div class=\"ql-code-block\" data-language=\"plain\">            .pipe(mergeMap(handleRoute))</div><div class=\"ql-code-block\" data-language=\"plain\">            .pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)</div><div class=\"ql-code-block\" data-language=\"plain\">            .pipe(delay(500))</div><div class=\"ql-code-block\" data-language=\"plain\">            .pipe(dematerialize());</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function handleRoute() {</div><div class=\"ql-code-block\" data-language=\"plain\">            switch (true) {</div><div class=\"ql-code-block\" data-language=\"plain\">                case url.endsWith('/users/authenticate') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\" data-language=\"plain\">                    return authenticate();</div><div class=\"ql-code-block\" data-language=\"plain\">                case url.endsWith('/users/register') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\" data-language=\"plain\">                    return register();</div><div class=\"ql-code-block\" data-language=\"plain\">                default:</div><div class=\"ql-code-block\" data-language=\"plain\">                    // pass through any requests not handled above</div><div class=\"ql-code-block\" data-language=\"plain\">                    return next.handle(request);</div><div class=\"ql-code-block\" data-language=\"plain\">            }    </div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        // route functions</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function authenticate() {</div><div class=\"ql-code-block\" data-language=\"plain\">            const { username, password } = body;</div><div class=\"ql-code-block\" data-language=\"plain\">            const user = users.find(x =&gt; x.username === username &amp;&amp; x.password === password);</div><div class=\"ql-code-block\" data-language=\"plain\">            if (!user) return error('Username or password is incorrect');</div><div class=\"ql-code-block\" data-language=\"plain\">            return ok({</div><div class=\"ql-code-block\" data-language=\"plain\">                id: user.id,</div><div class=\"ql-code-block\" data-language=\"plain\">                username: user.username,</div><div class=\"ql-code-block\" data-language=\"plain\">                firstName: user.firstName,</div><div class=\"ql-code-block\" data-language=\"plain\">                lastName: user.lastName,</div><div class=\"ql-code-block\" data-language=\"plain\">                token: 'fake-jwt-token'</div><div class=\"ql-code-block\" data-language=\"plain\">            })</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function register() {</div><div class=\"ql-code-block\" data-language=\"plain\">            const user = body</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            if (users.find(x =&gt; x.username === user.username)) {</div><div class=\"ql-code-block\" data-language=\"plain\">                return error('Username \"' + user.username + '\" is already taken')</div><div class=\"ql-code-block\" data-language=\"plain\">            }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            user.id = users.length ? Math.max(...users.map(x =&gt; x.id)) + 1 : 1;</div><div class=\"ql-code-block\" data-language=\"plain\">            users.push(user);</div><div class=\"ql-code-block\" data-language=\"plain\">            localStorage.setItem('users', JSON.stringify(users));</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            return ok();</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\">        </div><div class=\"ql-code-block\" data-language=\"plain\">        // helper functions</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function ok(body?) {</div><div class=\"ql-code-block\" data-language=\"plain\">            return of(new HttpResponse({ status: 200, body }))</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function error(message) {</div><div class=\"ql-code-block\" data-language=\"plain\">            return throwError({ error: { message } });</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\">    }</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">export const fakeBackendProvider = {</div><div class=\"ql-code-block\" data-language=\"plain\">    // use fake backend in place of Http service for backend-less development</div><div class=\"ql-code-block\" data-language=\"plain\">    provide: HTTP_INTERCEPTORS,</div><div class=\"ql-code-block\" data-language=\"plain\">    useClass: FakeBackendInterceptor,</div><div class=\"ql-code-block\" data-language=\"plain\">    multi: true</div><div class=\"ql-code-block\" data-language=\"plain\">};</div></div><p>t///</p>"},{"idx":"0871b1ad-daac-4493-8465-e96a7e8dc1fe","name":"2. Create User Service","custparents":[{"idx":"f5e4d580-691b-4f65-b224-932f2996d547"}],"children":[{"idx":"203bc10e-474c-4e62-a283-9aa988aba793","name":"2.1 Create User Service","custparents":[{"idx":"0871b1ad-daac-4493-8465-e96a7e8dc1fe"}],"NodeDescription":"<p>///t</p><p>2.1 Create User Service</p><p>•\tIn _ services, create a file ‘user.service.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpClient } from '@angular/common/http';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class UserService {</div><div class=\"ql-code-block\">    constructor(private http: HttpClient) { }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    getAll() {</div><div class=\"ql-code-block\">        return this.http.get&lt;any[]&gt;(`${config.apiUrl}/users`);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    register(user) {</div><div class=\"ql-code-block\">        return this.http.post(`${config.apiUrl}/users/register`, user);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    delete(id) {</div><div class=\"ql-code-block\">        return this.http.delete(`${config.apiUrl}/users/${id}`);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"71e3b966-b436-4230-88cd-af75868d120e","name":"2.2 Add User Service to Services Barrel File","custparents":[{"idx":"0871b1ad-daac-4493-8465-e96a7e8dc1fe"}],"NodeDescription":"<p>///t</p><p>2.2 Add User Service to Services Barrel File</p><p>•\tIn /src/app/_services/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './authentication.service';</div><div class=\"ql-code-block\">export * from './user.service';</div></div><p>t///</p>"}]},{"idx":"94cca805-e194-43e1-b556-86a637576402","name":"3. Add Form Logic to Register Component","custparents":[{"idx":"f5e4d580-691b-4f65-b224-932f2996d547"}],"NodeDescription":"<p>///t</p><p>3. Add Form Logic to Register Component</p><p>3.1 Update Register Component</p><p>•\tIn /src/app/register/register.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\">import { Router } from '@angular/router';</div><div class=\"ql-code-block\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { UserService, AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({ templateUrl: 'register.component.html' })</div><div class=\"ql-code-block\">export class RegisterComponent implements OnInit {</div><div class=\"ql-code-block\">    registerForm: FormGroup;</div><div class=\"ql-code-block\">    loading = false;</div><div class=\"ql-code-block\">    submitted = false;</div><div class=\"ql-code-block\">    error: string;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private formBuilder: FormBuilder,</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService,</div><div class=\"ql-code-block\">        private userService: UserService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        // redirect to home if already logged in</div><div class=\"ql-code-block\">        if (this.authenticationService.currentUserValue) {</div><div class=\"ql-code-block\">            this.router.navigate(['/']);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.registerForm = this.formBuilder.group({</div><div class=\"ql-code-block\">            firstName: ['', Validators.required],</div><div class=\"ql-code-block\">            lastName: ['', Validators.required],</div><div class=\"ql-code-block\">            username: ['', Validators.required],</div><div class=\"ql-code-block\">            password: ['', [Validators.required, Validators.minLength(6)]]</div><div class=\"ql-code-block\">        });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // convenience getter for easy access to form fields</div><div class=\"ql-code-block\">    get f() { return this.registerForm.controls; }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    onSubmit() {</div><div class=\"ql-code-block\">        this.submitted = true;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // stop here if form is invalid</div><div class=\"ql-code-block\">        if (this.registerForm.invalid) {</div><div class=\"ql-code-block\">            return;</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        this.loading = true;</div><div class=\"ql-code-block\">        this.userService.register(this.registerForm.value)</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(</div><div class=\"ql-code-block\">                data =&gt; {</div><div class=\"ql-code-block\">                    this.router.navigate(['/login'], { queryParams: { registered: true }});</div><div class=\"ql-code-block\">                },</div><div class=\"ql-code-block\">                error =&gt; {</div><div class=\"ql-code-block\">                    this.error = error;</div><div class=\"ql-code-block\">                    this.loading = false;</div><div class=\"ql-code-block\">                });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"e3202eea-a10d-4439-a5e6-4d69a3249b47","name":"4. Add Form HTML to Register Component Template","custparents":[{"idx":"f5e4d580-691b-4f65-b224-932f2996d547"}],"NodeDescription":"<p>///t</p><p>4. Add Form HTML to Register Component Template</p><p>4.1 Update Register Component Template</p><p>•\tIn /src/app/register/register.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;div *ngIf=\"error\" class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;</div><div class=\"ql-code-block\">&lt;h2&gt;Register&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"firstName\"&gt;First Name&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.firstName.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.firstName.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.firstName.errors.required\"&gt;First Name is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"lastName\"&gt;Last Name&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.lastName.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.lastName.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.lastName.errors.required\"&gt;Last Name is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.minlength\"&gt;Password must be at least 6 characters&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Register</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/login\" class=\"btn btn-link\"&gt;Cancel&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"},{"idx":"846f9e42-60a1-4bb5-8e1c-004f66cee962","name":"5. Add Success Alert To Login Component","custparents":[{"idx":"f5e4d580-691b-4f65-b224-932f2996d547"}],"children":[{"idx":"bb115f15-e00b-4b5f-b4ef-161fe46a5c6b","name":"5.1 Update Login Component","custparents":[{"idx":"846f9e42-60a1-4bb5-8e1c-004f66cee962"}],"NodeDescription":"<p>///t</p><p>5.1 Update Login Component</p><p>•\tIn /src/app/login/login.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\">import { Router, ActivatedRoute } from '@angular/router';</div><div class=\"ql-code-block\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from '../_services'</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({templateUrl: 'login.component.html'})</div><div class=\"ql-code-block\">export class LoginComponent implements OnInit {</div><div class=\"ql-code-block\">    loginForm: FormGroup;</div><div class=\"ql-code-block\">    loading = false;</div><div class=\"ql-code-block\">    submitted = false;</div><div class=\"ql-code-block\">    returnUrl: string;</div><div class=\"ql-code-block\">    error: string;</div><div class=\"ql-code-block\">    success: string</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private formBuilder: FormBuilder,</div><div class=\"ql-code-block\">        private route: ActivatedRoute,</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        // redirect to home if already logged in</div><div class=\"ql-code-block\">        if (this.authenticationService.currentUserValue) { </div><div class=\"ql-code-block\">            this.router.navigate(['/']);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.loginForm = this.formBuilder.group({</div><div class=\"ql-code-block\">            username: ['', Validators.required],</div><div class=\"ql-code-block\">            password: ['', Validators.required]</div><div class=\"ql-code-block\">        });</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // get return url from route parameters or default to '/'</div><div class=\"ql-code-block\">        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // show success message on registration</div><div class=\"ql-code-block\">        if (this.route.snapshot.queryParams['registered']) {</div><div class=\"ql-code-block\">            this.success = 'Registration successful';</div><div class=\"ql-code-block\">        }        </div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // convenience getter for easy access to form fields</div><div class=\"ql-code-block\">    get f() { return this.loginForm.controls; }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    onSubmit() {</div><div class=\"ql-code-block\">        this.submitted = true;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // reset alerts on submit</div><div class=\"ql-code-block\">        this.error = null;</div><div class=\"ql-code-block\">        this.success = null;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // stop here if form is invalid</div><div class=\"ql-code-block\">        if (this.loginForm.invalid) {</div><div class=\"ql-code-block\">            return;</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        this.loading = true;</div><div class=\"ql-code-block\">        this.authenticationService.login(this.f.username.value, this.f.password.value)</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(</div><div class=\"ql-code-block\">                data =&gt; {</div><div class=\"ql-code-block\">                    this.router.navigate([this.returnUrl]);</div><div class=\"ql-code-block\">                },</div><div class=\"ql-code-block\">                error =&gt; {</div><div class=\"ql-code-block\">                    this.error = error;</div><div class=\"ql-code-block\">                    this.loading = false;</div><div class=\"ql-code-block\">                });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"65b86ff0-c3ca-42f1-b0ad-861025e1e114","name":"5.2 Update Login Component Template","custparents":[{"idx":"846f9e42-60a1-4bb5-8e1c-004f66cee962"}],"NodeDescription":"<p>///t</p><p>5.2 Update Login Component Template</p><p>•\tIn /src/app/login/login.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;div *ngIf=\"error\" class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;</div><div class=\"ql-code-block\">&lt;div *ngIf=\"success\" class=\"alert alert-success\"&gt;{{success}}&lt;/div&gt;</div><div class=\"ql-code-block\">&lt;h2&gt;Login&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Login</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/register\" class=\"btn btn-link\"&gt;Register&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"}]},{"idx":"1bde6adb-7020-4bee-83e4-e5ab6a6087d5","name":"6. start the app","custparents":[{"idx":"f5e4d580-691b-4f65-b224-932f2996d547"}],"NodeDescription":"<p>///t</p><p>6. In node.js command window, under the folder C:\\Users\\Z70\\Angular 8 projects\\mya8login, type nmp start to launch the application.</p><p>t///</p>"}]},{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa","name":"E. Home Page & Alert Component","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"children":[{"idx":"5f8ec814-18cd-4050-9648-262b9f58b8df","name":"1. Add \"Get Users\" and \"Delete User\" Routes to Fake Backend","custparents":[{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa"}],"NodeDescription":"<p>///t</p><p>1. Add \"Get Users\" and \"Delete User\" Routes to Fake Backend</p><p>1.1 Update Fake Backend</p><p>•\tIn /src/app/_helpers/fake-backend.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\">import { Observable, of, throwError } from 'rxjs';</div><div class=\"ql-code-block\">import { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// array in local storage for registered users</div><div class=\"ql-code-block\">let users = JSON.parse(localStorage.getItem('users')) || [];</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable()</div><div class=\"ql-code-block\">export class FakeBackendInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\">        const { url, method, headers, body } = request;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // wrap in delayed observable to simulate server api call</div><div class=\"ql-code-block\">        return of(null)</div><div class=\"ql-code-block\">            .pipe(mergeMap(handleRoute))</div><div class=\"ql-code-block\">            .pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)</div><div class=\"ql-code-block\">            .pipe(delay(500))</div><div class=\"ql-code-block\">            .pipe(dematerialize());</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function handleRoute() {</div><div class=\"ql-code-block\">            switch (true) {</div><div class=\"ql-code-block\">                case url.endsWith('/users/authenticate') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\">                    return authenticate();</div><div class=\"ql-code-block\">                case url.endsWith('/users/register') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\">                    return register();</div><div class=\"ql-code-block\">                case url.endsWith('/users') &amp;&amp; method === 'GET':</div><div class=\"ql-code-block\">                    return getUsers();</div><div class=\"ql-code-block\">                case url.match(/\\/users\\/\\d+$/) &amp;&amp; method === 'DELETE':</div><div class=\"ql-code-block\">                    return deleteUser();</div><div class=\"ql-code-block\">                default:</div><div class=\"ql-code-block\">                    // pass through any requests not handled above</div><div class=\"ql-code-block\">                    return next.handle(request);</div><div class=\"ql-code-block\">            }    </div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // route functions</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function authenticate() {</div><div class=\"ql-code-block\">            const { username, password } = body;</div><div class=\"ql-code-block\">            const user = users.find(x =&gt; x.username === username &amp;&amp; x.password === password);</div><div class=\"ql-code-block\">            if (!user) return error('Username or password is incorrect');</div><div class=\"ql-code-block\">            return ok({</div><div class=\"ql-code-block\">                id: user.id,</div><div class=\"ql-code-block\">                username: user.username,</div><div class=\"ql-code-block\">                firstName: user.firstName,</div><div class=\"ql-code-block\">                lastName: user.lastName,</div><div class=\"ql-code-block\">                token: 'fake-jwt-token'</div><div class=\"ql-code-block\">            })</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function register() {</div><div class=\"ql-code-block\">            const user = body</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            if (users.find(x =&gt; x.username === user.username)) {</div><div class=\"ql-code-block\">                return error('Username \"' + user.username + '\" is already taken')</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            user.id = users.length ? Math.max(...users.map(x =&gt; x.id)) + 1 : 1;</div><div class=\"ql-code-block\">            users.push(user);</div><div class=\"ql-code-block\">            localStorage.setItem('users', JSON.stringify(users));</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            return ok();</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function getUsers() {</div><div class=\"ql-code-block\">            if (!isLoggedIn()) return unauthorized();</div><div class=\"ql-code-block\">            return ok(users);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function deleteUser() {</div><div class=\"ql-code-block\">            if (!isLoggedIn()) return unauthorized();</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            users = users.filter(x =&gt; x.id !== idFromUrl());</div><div class=\"ql-code-block\">            localStorage.setItem('users', JSON.stringify(users));</div><div class=\"ql-code-block\">            return ok();</div><div class=\"ql-code-block\">        }        </div><div class=\"ql-code-block\">        </div><div class=\"ql-code-block\">        // helper functions</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function ok(body?) {</div><div class=\"ql-code-block\">            return of(new HttpResponse({ status: 200, body }))</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function error(message) {</div><div class=\"ql-code-block\">            return throwError({ error: { message } });</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">        </div><div class=\"ql-code-block\">        function unauthorized() {</div><div class=\"ql-code-block\">            return throwError({ status: 401, error: { message: 'Unauthorised' } });</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function isLoggedIn() {</div><div class=\"ql-code-block\">            return headers.get('Authorization') === 'Bearer fake-jwt-token';</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function idFromUrl() {</div><div class=\"ql-code-block\">            const urlParts = url.split('/');</div><div class=\"ql-code-block\">            return parseInt(urlParts[urlParts.length - 1]);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">export const fakeBackendProvider = {</div><div class=\"ql-code-block\">    // use fake backend in place of Http service for backend-less development</div><div class=\"ql-code-block\">    provide: HTTP_INTERCEPTORS,</div><div class=\"ql-code-block\">    useClass: FakeBackendInterceptor,</div><div class=\"ql-code-block\">    multi: true</div><div class=\"ql-code-block\">};</div></div><p>t///</p>"},{"idx":"89bac809-139a-41c7-b39e-1e4f5a036b00","name":"2. Add Logic to Home Component","custparents":[{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa"}],"NodeDescription":"<p>///t</p><p>2. Add Logic to Home Component</p><p>2.1 Update Home Component</p><p>•\tIn /src/app/home/home.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { UserService, AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({ templateUrl: 'home.component.html' })</div><div class=\"ql-code-block\">export class HomeComponent implements OnInit {</div><div class=\"ql-code-block\">    currentUser: any;</div><div class=\"ql-code-block\">    users = [];</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService,</div><div class=\"ql-code-block\">        private userService: UserService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        this.currentUser = this.authenticationService.currentUserValue;</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.loadAllUsers();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    deleteUser(id: number) {</div><div class=\"ql-code-block\">        this.userService.delete(id)</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(() =&gt; this.loadAllUsers());</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    private loadAllUsers() {</div><div class=\"ql-code-block\">        this.userService.getAll()</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(users =&gt; this.users = users);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"b1db60b4-c378-490e-adbe-59e6a89dcf14","name":"3. Add HTML to Home Component Template","custparents":[{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa"}],"NodeDescription":"<p>///t</p><p>3. Add HTML to Home Component Template</p><p>•\tIn /src/app/home/home.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;h1&gt;Hi {{currentUser.firstName}}!&lt;/h1&gt;</div><div class=\"ql-code-block\">&lt;p&gt;You're logged in with Angular 8!!&lt;/p&gt;</div><div class=\"ql-code-block\">&lt;h3&gt;All registered users:&lt;/h3&gt;</div><div class=\"ql-code-block\">&lt;ul&gt;</div><div class=\"ql-code-block\">    &lt;li *ngFor=\"let user of users\"&gt;</div><div class=\"ql-code-block\">        {{user.username}} ({{user.firstName}} {{user.lastName}})</div><div class=\"ql-code-block\">        - &lt;a (click)=\"deleteUser(user.id)\" class=\"text-danger\"&gt;Delete&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/li&gt;</div><div class=\"ql-code-block\">&lt;/ul&gt;</div></div><p>t///</p>"},{"idx":"19ac967d-b123-4caf-9b55-88546669297e","name":"4. Create Alert Service","custparents":[{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa"}],"children":[{"idx":"68485bcc-ab4f-4e21-aebb-72290a66becd","name":"4.1 Create Alert Service","custparents":[{"idx":"19ac967d-b123-4caf-9b55-88546669297e"}],"NodeDescription":"<p>///t</p><p>4.1 Create Alert Service</p><p>•\tIn _services, create a file ‘alert.service.ts.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { Router, NavigationStart } from '@angular/router';</div><div class=\"ql-code-block\">import { Observable, Subject } from 'rxjs';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class AlertService {</div><div class=\"ql-code-block\">    private subject = new Subject&lt;any&gt;();</div><div class=\"ql-code-block\">    private keepAfterRouteChange = false;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(private router: Router) {</div><div class=\"ql-code-block\">        // clear alert messages on route change unless 'keepAfterRouteChange' flag is true</div><div class=\"ql-code-block\">        this.router.events.subscribe(event =&gt; {</div><div class=\"ql-code-block\">            if (event instanceof NavigationStart) {</div><div class=\"ql-code-block\">                if (this.keepAfterRouteChange) {</div><div class=\"ql-code-block\">                    // only keep for a single route change</div><div class=\"ql-code-block\">                    this.keepAfterRouteChange = false;</div><div class=\"ql-code-block\">                } else {</div><div class=\"ql-code-block\">                    // clear alert message</div><div class=\"ql-code-block\">                    this.clear();</div><div class=\"ql-code-block\">                }</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">        });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    getAlert(): Observable&lt;any&gt; {</div><div class=\"ql-code-block\">        return this.subject.asObservable();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    success(message: string, keepAfterRouteChange = false) {</div><div class=\"ql-code-block\">        this.keepAfterRouteChange = keepAfterRouteChange;</div><div class=\"ql-code-block\">        this.subject.next({ type: 'success', text: message });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    error(message: string, keepAfterRouteChange = false) {</div><div class=\"ql-code-block\">        this.keepAfterRouteChange = keepAfterRouteChange;</div><div class=\"ql-code-block\">        this.subject.next({ type: 'error', text: message });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    clear() {</div><div class=\"ql-code-block\">        // clear by calling subject.next() without parameters</div><div class=\"ql-code-block\">        this.subject.next();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"41b76708-cbc2-483c-a441-ff2159dbcbf1","name":"4.2 Add Alert Service to Services Barrel File","custparents":[{"idx":"19ac967d-b123-4caf-9b55-88546669297e"}],"NodeDescription":"<p>///t</p><p>4.2 Add Alert Service to Services Barrel File</p><p>•\tIn /src/app/_services/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './authentication.service';</div><div class=\"ql-code-block\">export * from './user.service';</div><div class=\"ql-code-block\">export * from './alert.service';</div></div><p>t///</p>"}]},{"idx":"82302b8a-172c-4a3a-897b-767115210985","name":"5. Create Alert Component & Template","custparents":[{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa"}],"children":[{"idx":"6361eaa0-14f5-4974-b401-2fd767ba4aad","name":"5.1 Create Components Folder","custparents":[{"idx":"82302b8a-172c-4a3a-897b-767115210985"}],"NodeDescription":"<p>///t</p><p>5.1 Create Components Folder</p><p>•\tIn /src/app, create a folder named _components.</p><p>t///</p>"},{"idx":"5ef43ae9-dbab-4e2f-a282-7998df599427","name":"5.2 Create Alert Component","custparents":[{"idx":"82302b8a-172c-4a3a-897b-767115210985"}],"NodeDescription":"<p>///t</p><p>5.2 Create Alert Component</p><p>•\tIn _components, create a file ‘alert.component.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component, OnInit, OnDestroy } from '@angular/core';</div><div class=\"ql-code-block\">import { Subscription } from 'rxjs';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AlertService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({ selector: 'alert', templateUrl: 'alert.component.html' })</div><div class=\"ql-code-block\">export class AlertComponent implements OnInit, OnDestroy {</div><div class=\"ql-code-block\">    private subscription: Subscription;</div><div class=\"ql-code-block\">    message: any;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(private alertService: AlertService) { }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.subscription = this.alertService.getAlert()</div><div class=\"ql-code-block\">            .subscribe(message =&gt; {</div><div class=\"ql-code-block\">                switch (message &amp;&amp; message.type) {</div><div class=\"ql-code-block\">                    case 'success':</div><div class=\"ql-code-block\">                        message.cssClass = 'alert alert-success';</div><div class=\"ql-code-block\">                        break;</div><div class=\"ql-code-block\">                    case 'error':</div><div class=\"ql-code-block\">                        message.cssClass = 'alert alert-danger';</div><div class=\"ql-code-block\">                        break;</div><div class=\"ql-code-block\">                }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">                this.message = message;</div><div class=\"ql-code-block\">            });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnDestroy() {</div><div class=\"ql-code-block\">        this.subscription.unsubscribe();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"de2b0a20-ce31-467c-b35f-f4165deecda2","name":"5.3 Create Alert Component Template","custparents":[{"idx":"82302b8a-172c-4a3a-897b-767115210985"}],"NodeDescription":"<p>///t</p><p>5.3 Create Alert Component Template</p><p>•\tIn _components, create a file ‘alert.component.html’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;div *ngIf=\"message\" [ngClass]=\"message.cssClass\"&gt;{{message.text}}&lt;/div&gt;</div></div><p>t///</p>"},{"idx":"465425b7-d830-46c3-a37c-1b46cdb2460a","name":"5.4 Create Barrel File in Components Folder","custparents":[{"idx":"82302b8a-172c-4a3a-897b-767115210985"}],"NodeDescription":"<p>///t</p><p>5.4 Create Barrel File in Components Folder</p><p>•\tIn _components, create a file ‘index.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './alert.component';</div></div><p>t///</p>"},{"idx":"a88083d9-0190-43e0-9f44-c8dbba0acf5d","name":"5.5 Add Alert Component to App Module","custparents":[{"idx":"82302b8a-172c-4a3a-897b-767115210985"}],"NodeDescription":"<p>///t</p><p>5.5 Add Alert Component to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { ReactiveFormsModule } from '@angular/forms';</div><div class=\"ql-code-block\">import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// used to create fake backend</div><div class=\"ql-code-block\">import { fakeBackendProvider } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\">import { JwtInterceptor, ErrorInterceptor } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AlertComponent } from './_components';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        ReactiveFormsModule,</div><div class=\"ql-code-block\">        HttpClientModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent,</div><div class=\"ql-code-block\">        AlertComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    providers: [</div><div class=\"ql-code-block\">        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },</div><div class=\"ql-code-block\">        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },</div><div class=\"ql-code-block\">        // provider used to create fake backend</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        fakeBackendProvider</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div><div class=\"ql-code-block\"><br></div></div><p>t///</p>"},{"idx":"51154507-8c09-43c8-8c57-87f39dd2d31b","name":"5.6 Add Alert Component to App Component Template","custparents":[{"idx":"82302b8a-172c-4a3a-897b-767115210985"}],"NodeDescription":"<p>///t</p><p>5.6 Add Alert Component to App Component Template</p><p>•\tIn /src/app/app.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;!-- nav --&gt;</div><div class=\"ql-code-block\">&lt;nav class=\"navbar navbar-expand navbar-dark bg-dark\" *ngIf=\"currentUser\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"navbar-nav\"&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/\"&gt;Home&lt;/a&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" (click)=\"logout()\"&gt;Logout&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/nav&gt;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">&lt;!-- main content container --&gt;</div><div class=\"ql-code-block\">&lt;div class=\"jumbotron\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"container\"&gt;</div><div class=\"ql-code-block\">        &lt;div class=\"row\"&gt;</div><div class=\"ql-code-block\">            &lt;div class=\"col-sm-8 offset-sm-2\"&gt;</div><div class=\"ql-code-block\">                &lt;alert&gt;&lt;/alert&gt;</div><div class=\"ql-code-block\">                &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"ql-code-block\">            &lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/div&gt;</div></div><p>t///</p>"}]},{"idx":"3777ed0f-ed89-4ea1-9e44-571dbb98c6ee","name":"6. Refactor Login Component to use Alert Service","custparents":[{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa"}],"children":[{"idx":"a74685df-2296-4840-82bd-179e97e2cfda","name":"6.1 Refactor Login Component Logic","custparents":[{"idx":"3777ed0f-ed89-4ea1-9e44-571dbb98c6ee"}],"NodeDescription":"<p>///t</p><p>6.1 Refactor Login Component Logic</p><p>•\tIn /src/app/login/login.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\">import { Router, ActivatedRoute } from '@angular/router';</div><div class=\"ql-code-block\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService, AlertService  } from '../_services'</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({templateUrl: 'login.component.html'})</div><div class=\"ql-code-block\">export class LoginComponent implements OnInit {</div><div class=\"ql-code-block\">    loginForm: FormGroup;</div><div class=\"ql-code-block\">    loading = false;</div><div class=\"ql-code-block\">    submitted = false;</div><div class=\"ql-code-block\">    returnUrl: string;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private formBuilder: FormBuilder,</div><div class=\"ql-code-block\">        private route: ActivatedRoute,</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService,</div><div class=\"ql-code-block\">        private alertService: AlertService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        // redirect to home if already logged in</div><div class=\"ql-code-block\">        if (this.authenticationService.currentUserValue) { </div><div class=\"ql-code-block\">            this.router.navigate(['/']);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.loginForm = this.formBuilder.group({</div><div class=\"ql-code-block\">            username: ['', Validators.required],</div><div class=\"ql-code-block\">            password: ['', Validators.required]</div><div class=\"ql-code-block\">        });</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // get return url from route parameters or default to '/'</div><div class=\"ql-code-block\">        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';</div><div class=\"ql-code-block\">    </div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // convenience getter for easy access to form fields</div><div class=\"ql-code-block\">    get f() { return this.loginForm.controls; }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    onSubmit() {</div><div class=\"ql-code-block\">        this.submitted = true;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // reset alerts on submit</div><div class=\"ql-code-block\">        this.alertService.clear();</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // stop here if form is invalid</div><div class=\"ql-code-block\">        if (this.loginForm.invalid) {</div><div class=\"ql-code-block\">            return;</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        this.loading = true;</div><div class=\"ql-code-block\">        this.authenticationService.login(this.f.username.value, this.f.password.value)</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(</div><div class=\"ql-code-block\">                data =&gt; {</div><div class=\"ql-code-block\">                    this.router.navigate([this.returnUrl]);</div><div class=\"ql-code-block\">                },</div><div class=\"ql-code-block\">                error =&gt; {</div><div class=\"ql-code-block\">                    this.alertService.error(error);</div><div class=\"ql-code-block\">                    this.loading = false;</div><div class=\"ql-code-block\">                });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"05328285-585d-4c84-a865-f8675617a6f1","name":"6.2 Remove Alert HTML from Login Component Template","custparents":[{"idx":"3777ed0f-ed89-4ea1-9e44-571dbb98c6ee"}],"NodeDescription":"<p>///t</p><p>6.2 Remove Alert HTML from Login Component Template</p><p>•\tIn /src/app/login/login.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;h2&gt;Login&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Login</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/register\" class=\"btn btn-link\"&gt;Register&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"}]},{"idx":"b0aa4db7-a238-4c79-8eaa-acd533871c94","name":"7. Refactor Register Component to use Alert Service","custparents":[{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa"}],"children":[{"idx":"c322f0f2-753e-4655-9a6f-515595a116b8","name":"7.1 Refactor Register Component Logic","custparents":[{"idx":"b0aa4db7-a238-4c79-8eaa-acd533871c94"}],"NodeDescription":"<p>///t</p><p>7.1 Refactor Register Component Logic</p><p>•\tIn /src/app/register/register.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\">import { Router } from '@angular/router';</div><div class=\"ql-code-block\" data-language=\"plain\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\" data-language=\"plain\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { UserService, AuthenticationService, AlertService } from '../_services';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ templateUrl: 'register.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\">export class RegisterComponent implements OnInit {</div><div class=\"ql-code-block\" data-language=\"plain\">registerForm: FormGroup;</div><div class=\"ql-code-block\" data-language=\"plain\">loading = false;</div><div class=\"ql-code-block\" data-language=\"plain\">submitted = false;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">constructor(</div><div class=\"ql-code-block\" data-language=\"plain\">private formBuilder: FormBuilder,</div><div class=\"ql-code-block\" data-language=\"plain\">private router: Router,</div><div class=\"ql-code-block\" data-language=\"plain\">private authenticationService: AuthenticationService,</div><div class=\"ql-code-block\" data-language=\"plain\">private userService: UserService,</div><div class=\"ql-code-block\" data-language=\"plain\">private alertService: AlertService</div><div class=\"ql-code-block\" data-language=\"plain\">) {</div><div class=\"ql-code-block\" data-language=\"plain\">// redirect to home if already logged in</div><div class=\"ql-code-block\" data-language=\"plain\">if (this.authenticationService.currentUserValue) {</div><div class=\"ql-code-block\" data-language=\"plain\">this.router.navigate(['/']);</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">ngOnInit() {</div><div class=\"ql-code-block\" data-language=\"plain\">this.registerForm = this.formBuilder.group({</div><div class=\"ql-code-block\" data-language=\"plain\">firstName: ['', Validators.required],</div><div class=\"ql-code-block\" data-language=\"plain\">lastName: ['', Validators.required],</div><div class=\"ql-code-block\" data-language=\"plain\">username: ['', Validators.required],</div><div class=\"ql-code-block\" data-language=\"plain\">password: ['', [Validators.required, Validators.minLength(6)]]</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// convenience getter for easy access to form fields</div><div class=\"ql-code-block\" data-language=\"plain\">get f() { return this.registerForm.controls; }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">onSubmit() {</div><div class=\"ql-code-block\" data-language=\"plain\">this.submitted = true;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// reset alerts on submit</div><div class=\"ql-code-block\" data-language=\"plain\">this.alertService.clear();</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// stop here if form is invalid</div><div class=\"ql-code-block\" data-language=\"plain\">if (this.registerForm.invalid) {</div><div class=\"ql-code-block\" data-language=\"plain\">return;</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">this.loading = true;</div><div class=\"ql-code-block\" data-language=\"plain\">this.userService.register(this.registerForm.value)</div><div class=\"ql-code-block\" data-language=\"plain\">.pipe(first())</div><div class=\"ql-code-block\" data-language=\"plain\">.subscribe(</div><div class=\"ql-code-block\" data-language=\"plain\">data =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">this.alertService.success('Registration successful', true);/**added by E.7.1 */</div><div class=\"ql-code-block\" data-language=\"plain\">this.router.navigate(['/login'], { queryParams: { registered: true }});</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">error =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">this.alertService.error(error);</div><div class=\"ql-code-block\" data-language=\"plain\">this.loading = false;</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>t///</p>"},{"idx":"c9183523-e539-4ce4-8293-f2b04ab81b98","name":"7.2 Remove Alert HTML from Register Component Template","custparents":[{"idx":"b0aa4db7-a238-4c79-8eaa-acd533871c94"}],"NodeDescription":"<p>///t</p><p>7.2 Remove Alert HTML from Register Component Template</p><p>•\tIn /src/app/register/register.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;h2&gt;Register&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"firstName\"&gt;First Name&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.firstName.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.firstName.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.firstName.errors.required\"&gt;First Name is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"lastName\"&gt;Last Name&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.lastName.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.lastName.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.lastName.errors.required\"&gt;Last Name is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.minlength\"&gt;Password must be at least 6 characters&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Register</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/login\" class=\"btn btn-link\"&gt;Cancel&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"}]},{"idx":"6ed171fd-f60b-4512-947b-2bd3db9eab5d","name":"8. Start the app","custparents":[{"idx":"c27ece7c-be09-47f9-b3eb-28604a8adafa"}],"NodeDescription":"<p>///t</p><p>8. In node.js command window, under the folder C:\\Users\\Z70\\Angular 8 projects\\mya8login, type nmp start to launch the application.</p><p>t///</p>"}],"NodeDescription":"<p>///t</p><p>This part is to complete the homepage. After log in, show the existing users, and allow to delete them.</p><p>The tutorial of this part can be found at https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><p>[_W]</p><p>The pages do not work properly before change environment setting for CLI in the next step (F)</p><p>The login and register pages can be displayed, but nothing happens after submission. </p><p>t///</p>"},{"idx":"MY131ac33b-8269-4ffa-a2ad-3c3d9a57e8d6","name":"F. Set environment","custparents":[{"idx":"MY76c86c64-bdfb-4bae-943b-c14ae3abd58f"}],"NodeDescription":"<p>///t</p><p>F. Migrating to an Angular CLI Project</p><p>This part is to make an CLI project, instead of the Angular 8 project. Question: What is the difference between CLI and the Angular 8 projects?</p><p>This part of tutorial can be found at https://jasonwatmore.com/post/2019/06/13/angular-7-tutorial-part-7-migrating-to-an-angular-cli-project#update-app-config</p><p><br></p><p>t///</p>","children":[{"idx":"MYa1868cb5-008d-46c3-bc96-5892525fecce","name":"Step 1 to 3 (no need)","custparents":[{"idx":"MY131ac33b-8269-4ffa-a2ad-3c3d9a57e8d6"}],"NodeDescription":"<p>///t</p><p>1. Install the Angular 8 CLI (Done)</p><p>2. Create a new Angular CLI Project</p><p>•\tIn node.js command window and under the folder C:\\Users\\Z70\\Angular 8 projects, type ng new mya8cli</p><p>•\tWill be prompt whether or not add angular routing, select N</p><p>•\tFor stylesheet, choose ‘less’</p><p>3. Copy Angular Tutorial App Code to Angular CLI Project</p><p>•\tIn node.js command, type cd C:\\Users\\Z70\\Angular 8 projects\\mya8cli</p><p>•\tType ‘code .’ to open VSCode</p><p>•\tReplace the C:\\Users\\Z70\\Angular 8 projects\\mya8cli/src/app folder in the new Angular CLI project with the C:\\Users\\Z70\\Angular 8 projects\\mya8login/src/app folder from the tutorial project you created in the previous parts of the tutorial series. </p><p>•\tReplace the C:\\Users\\Z70\\Angular 8 projects\\mya8cli/src /index.html file in the new Angular CLI project with the C:\\Users\\Z70\\Angular 8 projects\\mya8login/src/index.html file from the tutorial project you created in the previous parts of the tutorial series.</p><p><br></p><p>t///</p>"},{"idx":"MY92c0f1cd-1dab-4d52-90c5-ca9a92859fd4","name":"4. Add variables to environment configs","custparents":[{"idx":"MY131ac33b-8269-4ffa-a2ad-3c3d9a57e8d6"}],"children":[{"idx":"MYa0ddab07-a418-47f9-914d-5099b1f90a45","name":"4.1 Add apiUrl into environment files","custparents":[{"idx":"MY92c0f1cd-1dab-4d52-90c5-ca9a92859fd4"}],"NodeDescription":"<p>///t</p><p>4. Copy Config Variables to Environment Configs</p><p>•\tAngular CLI projects store config data in environment config files (/src/environments/environment.ts &amp; /src/environments/environment.prod.ts) instead of in the webpack.config.js that we've been using so far, so we need to copy the config data from our webpack config to the Angular CLI environment config files.</p><p>•\tCopy the following apiUrl property from the C:\\Users\\Z70\\Angular 8 projects\\mya8login/src /webpack.config.js in the section of plugins:[]</p><p>(i.e., the line is apiUrl: 'http://localhost:4000')</p><p>•\tIn C:\\Users\\Z70\\Angular 8 projects\\mya8cli/src/environments/environment.ts, paste the line </p><p>apiUrl: 'http://localhost:4000' </p><p>after the line ‘production: false’ (need to add a comma and make the previous line as ‘production:false,’).</p><p>•\tIn C:\\Users\\Z70\\Angular 8 projects\\mya8cli/src/environments/ environment.prod.ts, paste the line </p><p>apiUrl: 'http://localhost:4000' </p><p>after the line ‘production: true’ (need to add a comma and make the previous line as ‘production:true,’).</p><p><br></p><p><strong>Code in both files now look like:</strong></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export const environment = {</div><div class=\"ql-code-block\">  production: true,</div><div class=\"ql-code-block\">  apiUrl: 'http://localhost:4000'</div><div class=\"ql-code-block\">};</div><div class=\"ql-code-block\"><br></div></div><p><br></p><p>t///</p>"},{"idx":"MY7c8b2344-3eae-425c-aa1c-7595ac484c02","name":"4.2 Add '@environments' path alias to tsconfig.json","custparents":[{"idx":"MY92c0f1cd-1dab-4d52-90c5-ca9a92859fd4"}],"NodeDescription":"<p>///t</p><p>4.2 Add '@environments' path alias to tsconfig.json</p><p>•\tIn C:\\Users\\Z70\\Angular 8 projects\\mya8cli\\tsconfig.json,</p><p>•\tAdd lines as specified in the corresponding part of https://jasonwatmore.com/post/2019/06/13/angular-7-tutorial-part-7-migrating-to-an-angular-cli-project#update-app-config</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">  \"compilerOptions\": {</div><div class=\"ql-code-block\" data-language=\"plain\">    \"emitDecoratorMetadata\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">    \"experimentalDecorators\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">    \"target\": \"ES5\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"baseUrl\": \"src\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"paths\": {</div><div class=\"ql-code-block\" data-language=\"plain\">      \"@/*\": [\"app/*\"],</div><div class=\"ql-code-block\" data-language=\"plain\">      /*added by F 4.2*/</div><div class=\"ql-code-block\" data-language=\"plain\">      \"@environments/*\": [\"src/environments/*\"]</div><div class=\"ql-code-block\" data-language=\"plain\">      },</div><div class=\"ql-code-block\" data-language=\"plain\">    \"outDir\": \"./dist/out-tsc\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"sourceMap\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">    \"declaration\": false,</div><div class=\"ql-code-block\" data-language=\"plain\">    \"downlevelIteration\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">    \"module\": \"esnext\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"moduleResolution\": \"node\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"importHelpers\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">    \"typeRoots\": [</div><div class=\"ql-code-block\" data-language=\"plain\">      \"node_modules/@types\"</div><div class=\"ql-code-block\" data-language=\"plain\">    ],</div><div class=\"ql-code-block\" data-language=\"plain\">    \"lib\": [</div><div class=\"ql-code-block\" data-language=\"plain\">      \"es2018\",</div><div class=\"ql-code-block\" data-language=\"plain\">      \"dom\"</div><div class=\"ql-code-block\" data-language=\"plain\">    ]</div><div class=\"ql-code-block\" data-language=\"plain\">  },</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">  </div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">  \"angularCompilerOptions\": {</div><div class=\"ql-code-block\" data-language=\"plain\">    \"fullTemplateTypeCheck\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">    \"strictInjectionParameters\": true</div><div class=\"ql-code-block\" data-language=\"plain\">  }</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p>t///</p>"}]},{"idx":"MY8aff8522-dcc8-41a2-8eda-bcd564585ebe","name":"5. Replace 'config.apiUrl' with 'environment.apiUrl' in Services","custparents":[{"idx":"MY131ac33b-8269-4ffa-a2ad-3c3d9a57e8d6"}],"children":[{"idx":"MY457e3744-dc37-4be1-971e-36132286f104","name":"5.1 Update Authentication Service","custparents":[{"idx":"MY8aff8522-dcc8-41a2-8eda-bcd564585ebe"}],"NodeDescription":"<p>///t</p><p>5.1 Update Authentication Service</p><p>•\tIn C:\\Users\\Z70\\Angular 8 projects\\mya8cli\\src\\app\\_services\\authentication.service.ts, add lines as specified in the corresponding part of https://jasonwatmore.com/post/2019/06/13/angular-7-tutorial-part-7-migrating-to-an-angular-cli-project#update-app-config.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpClient } from '@angular/common/http';</div><div class=\"ql-code-block\">import { BehaviorSubject, Observable } from 'rxjs';</div><div class=\"ql-code-block\">import { map } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// In Jason's file, it was</div><div class=\"ql-code-block\">// import { environment } from '@environments/environment';</div><div class=\"ql-code-block\">// However, that line does not work.</div><div class=\"ql-code-block\">// https://github.com/angular/universal/issues/734</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { environment } from 'environments/environment';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class AuthenticationService {</div><div class=\"ql-code-block\">    private currentUserSubject: BehaviorSubject&lt;any&gt;;</div><div class=\"ql-code-block\">    public currentUser: Observable&lt;any&gt;;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(private http: HttpClient) {</div><div class=\"ql-code-block\">        this.currentUserSubject = new BehaviorSubject&lt;any&gt;(JSON.parse(localStorage.getItem('currentUser')));</div><div class=\"ql-code-block\">        this.currentUser = this.currentUserSubject.asObservable();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    public get currentUserValue() {</div><div class=\"ql-code-block\">        return this.currentUserSubject.value;</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    login(username, password) {</div><div class=\"ql-code-block\">        // return this.http.post&lt;any&gt;(`${config.apiUrl}/users/authenticate`, { username, password })</div><div class=\"ql-code-block\">        return this.http.post&lt;any&gt;(`${environment.apiUrl}/users/authenticate`, { username, password })</div><div class=\"ql-code-block\">            .pipe(map(user =&gt; {</div><div class=\"ql-code-block\">                // store user details and jwt token in local storage to keep user logged in between page refreshes</div><div class=\"ql-code-block\">                localStorage.setItem('currentUser', JSON.stringify(user));</div><div class=\"ql-code-block\">                this.currentUserSubject.next(user);</div><div class=\"ql-code-block\">                return user;</div><div class=\"ql-code-block\">            }));</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    logout() {</div><div class=\"ql-code-block\">        // remove user from local storage and set current user to null</div><div class=\"ql-code-block\">        localStorage.removeItem('currentUser');</div><div class=\"ql-code-block\">        this.currentUserSubject.next(null);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div><div class=\"ql-code-block\"><br></div></div><p><br></p><p>[_L] Jason's code is</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { environment } from '@environments/environment';</div></div><p>It does not work</p><p>According to the website</p><p><a href=\"https://github.com/angular/universal/issues/734\" target=\"_blank\">https://github.com/angular/universal/issues/734</a></p><p>, changed to the following</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { environment } from 'environments/environment';</div></div><p>t///</p>"},{"idx":"MY8f2384bc-74be-44ef-ac93-c67a8ae772ef","name":"5.2 Update User Service","custparents":[{"idx":"MY8aff8522-dcc8-41a2-8eda-bcd564585ebe"}],"NodeDescription":"<p>///t</p><p>5.2 Update User Service</p><p>•\tIn C:\\Users\\Z70\\Angular 8 projects\\mya8cli\\src\\app\\_services\\user.service.ts, add lines as specified in the corresponding part of https://jasonwatmore.com/post/2019/06/13/angular-7-tutorial-part-7-migrating-to-an-angular-cli-project#update-app-config.</p><p><br></p><p>[_L] Jason's code is</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { environment } from '@environments/environment';</div></div><p>It does not work</p><p>According to the website</p><p><a href=\"https://github.com/angular/universal/issues/734\" target=\"_blank\">https://github.com/angular/universal/issues/734</a></p><p>, changed to the following</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { environment } from 'environments/environment';</div></div><p><br></p><p>t///</p>"}]}]}],"NodeDescription":"<p>///t</p><p>[_L] Must use 'ng serve' to start the CLI. </p><p>the webpack.config (customized by Jason, i.e., in package.json, \"start\": \"webpack-dev-server --mode development --open\") does not work.</p><p>t///</p>"},{"idx":"MY1ea63709-b934-4652-acbb-d856455e0014","name":"Make a new instance manually","custparents":[{"idx":"db3d4015-ad7c-4ade-8a61-fffc2b326331"}],"children":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2","name":"A. Create the base project structure","custparents":[{"idx":"MY1ea63709-b934-4652-acbb-d856455e0014"}],"NodeDescription":"<p>///t</p><p>Based on instructions in F:\\Personal\\Dropbox\\English Writing\\MyBlog at wordpress\\Angular to set up a website with log in register.docx</p><p>A. Create the Base Project Structure</p><p>This part is to create the basic structure, and a home page (index.html) with one line ‘Hello Angular 8!’</p><p>The tutorial of this part can be found at https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config. </p><p>t///</p>","children":[{"idx":"MY3cabeeac-bb2d-4432-900f-dc2b7590cc08","name":"1. Package.json","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>1. Create package.json</p><p>•\tIn vscode, and under the folder my8login, create a new file (by hitting the new file button) and name it ‘package.json’. The full contents of package.json can be found at ‘https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#package-json’.</p><p>•\tIn VSCode, and in the file of package.json, paste { \"name\": \" a8login_sbs \", \"version\": \"1.0.0\" }.</p><p>[_Q]: do I have to sue the same name as the folder name (a8login_stepbystep)?As a test, I'll put a different name here.</p><p>It seems that it does not affect the base web pages.</p><p>t///</p>"},{"idx":"MY81db668b-4204-4a05-8d59-bca64827f7ec","name":"2. Angular 8 dependencies","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>. Install Angular 8 Dependencies. </p><p>•\tIn the node js command window, type:</p><p>npm install -save @angular/common@8 @angular/compiler@8 @angular/core@8 @angular/forms@8 @angular/platform-browser@8 @angular/platform-browser-dynamic@8 @angular/router@8 core-js@3 rxjs@6 zone.js@latest</p><p>•\tThese are dependent packages that are required for angular to build the structure. Description of these package files can be found at the part 2 tutorial web page (as stated in the beginning of part A). After downloading and installing these files, the names and versions of the packages will be added automatically into package.json. </p><p>•\tQuestions: 1) why not developing a batch file to return such npm install command? 2) how to check and update to the most recent version of packages (like for zone.js@0, how to detect whether there is a version 0.1.x and install that version)</p><p>Answer: 2) use @latest to install the latest package</p><p>t///</p>"},{"idx":"MY18bf336a-7549-4ca2-9d68-f6a855fddf01","name":"3. Angular 8 develop dependencies","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>3. Install Angular 8 Develop Dependencies.</p><p>•\tIn the node js command window, type:</p><p>npm install --save-dev @types/node@12 angular2-template-loader@0 html-webpack-plugin@3 raw-loader@3 ts-loader@6 typescript@3 webpack@4 webpack-cli@3 webpack-dev-server@3</p><p>•\tAgain, the names and versions of these development packages are added to package.json.</p><p>•\tTo note, the list I have here is different from Jason’s example. Jason’s file mentioned css-loader 2.2.1, html-loader 0.5.5, less 3.0.4, less-loader 0.23.1. These packages are not installed by the commands above.</p><p>(The list of development packages in Jason’s example: https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json)</p><p>•\tSo the following are installed again via node js command lines:</p><p><br></p><p>npm install --save-dev css-loader@latest html-loader@0 less@3 less-loader@latest. </p><p><br></p><p>Consequently, I have newer css-loader, less, and less-loader than the versions in Jason’s file.</p><p>•\tLearning: one can re-install with new versions by repeat the same commands above with new specification of versions (e.g., instead of raw-loader@3, use raw-loader@latest). Such commands will install the new versions, overwriting the old ones. The file package.json will be renewed with added packages, or new versions.</p><p>•\tThe latest packages can be found at https://www.npmjs.com/</p><p>•\tAfter installation, new folders are created under the root folder. These are for corresponding package files.</p><p><br></p><p>There are a couple of warnings:</p><p>- npm WARN rollback Rolling back node-pre-gyp@0.14.0 failed (this is probably harmless): EPERM: operation not permitted, lstat 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\node_modules\\fsevents\\node_modules'</p><p>Actions: do nothing</p><p><br></p><p>npm WARN @angular/core@8.2.14 requires a peer of zone.js@~0.9.1 but none is installed. You must install peer dependencies yourself.</p><p>Action: reinstall (rollback to )zone.js@~0.9.1 by the following command:</p><p>npm install --save-dev zone.js@~0.9.1</p><p><br></p><p>npm WARN a8login_sbs@1.0.0 No repository field.</p><p>npm WARN a8login_sbs@1.0.0 No license field.</p><p>Action: do nothing for now. These are for setting git URL and license, will do it later.</p><p><br></p><p>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\\fsevents):</p><p>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})</p><p>Action: do nothing, cannot see how it is harmful for now.</p><p>t///</p>"},{"idx":"MY0dca832e-0a2a-4ec1-849b-92c967d8e666","name":"4. reinstall dependencies","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>4. Reinstall the dependencies. </p><p>•\tNow that the dependencies in 2 and 3 (for Angular 8, and for development) are specified in package.json. One can always type ‘nmp install’ in node.js command (under the folder ‘mya8login’’) to re-install all the packages.</p><p>t///</p>"},{"idx":"MY7c7b5e85-2a4b-41d4-a57b-923d600bdc62","name":"5. tsconfig.json","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>change tsconfig.json (https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json)</p><p>There could be more lines provided by the default installation. Make sure that the settings of the followings are the same:</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">{</div><div class=\"ql-code-block\" data-language=\"plain\">\"compilerOptions\": {</div><div class=\"ql-code-block\" data-language=\"plain\">  \"emitDecoratorMetadata\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">  \"experimentalDecorators\": true,</div><div class=\"ql-code-block\" data-language=\"plain\">  \"target\": \"ES5\",</div><div class=\"ql-code-block\" data-language=\"plain\">  \"baseUrl\": \"src\",</div><div class=\"ql-code-block\" data-language=\"plain\">  \"paths\": {</div><div class=\"ql-code-block\" data-language=\"plain\">      \"@/*\": [</div><div class=\"ql-code-block\" data-language=\"plain\">        \"app/*\"</div><div class=\"ql-code-block\" data-language=\"plain\">        ]</div><div class=\"ql-code-block\" data-language=\"plain\">      }</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">...</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>•\tThe details of each compiler can be found at https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config.</p><p>t///</p>"},{"idx":"MY9634ed4c-31e9-43e2-8626-d753e3f7c6fe","name":"6. webpack.config.js","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>6. Create Webpack 4 Config</p><p>•\tIn VSCode, under the project root folder, Create a file ‘webpack.config.js’.  In the file, paste the code from the Webpack 4 Config part of https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><p>•\tDescription on the code can be found at the corresponding section of https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config</p><p><br></p><p>t///</p>"},{"idx":"MYfa87ef8e-be81-435b-b0dc-db5e63dd0379","name":"7. create //src, and //src//app","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>7. Create src, and app folder</p><p>·In VSCode, under ‘mya8login’, create a folder ‘src’, within it, create a folder ‘app’.</p><p>·The structure of folders can be found in the section ‘Angular 8 Tutorial Project Structure’ in the web page <a href=\"https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json\" target=\"_blank\">https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</a></p><p>t///</p>"},{"idx":"MYf53b8685-9366-4f0d-96fb-c63faf60d3d4","name":"8. app.component.html","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>8. Create Angular App Component template</p><p>•\tIn VSCode, and under the folder ‘app’, create a file ‘app.component.html’</p><p>•\tIn this file, paste the code </p><p>&lt;h1&gt;Hello Angular 8!&lt;/h1&gt;</p><p>•\tNote that the code in the following page is not suitable here. That code will be added in the future. (https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json)</p><p>t///</p>"},{"idx":"MYd61c5fca-5d6a-4dcc-b33f-472dde2986a8","name":"9. app.component.ts","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>9. Create Angular App Component</p><p>•\tIn VSCode, and under the folder ‘app’, create a file ‘app.component.ts’</p><p>•\tIn this file, paste the code</p><p><br></p><p>•\tNote that the code in the following page is not suitable here. That code will be added in the future. Same for the following steps 10 and 11 (https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json)</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">// this file is to 1) load build-in modules (Component)</div><div class=\"ql-code-block\" data-language=\"plain\">// 2) specify the web components to obtain (in which html file, within what tag) by decorating Component</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">//import the module 'Component' from angular's core modules 9under the folder /node_modules/@angular/core</div><div class=\"ql-code-block\" data-language=\"plain\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">//The following is to run the module 'component', i.e., to get components/contents in the tag &lt;app&gt;&lt;/app&gt; from the file 'app.component.html'</div><div class=\"ql-code-block\" data-language=\"plain\">//The actions to assign values (selector = 'app', temlateUrl = 'app.component.html') is called decorate.</div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ selector: 'app', templateUrl: 'app.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// define a module AppComponent (instead of script)</div><div class=\"ql-code-block\" data-language=\"plain\">export class AppComponent {}</div></div><p><br></p><p><br></p><p>t///</p>"},{"idx":"MY665e054b-5eaa-4995-a394-8b04bb3569f1","name":"10. app.module.ts","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>10. Create Angular App Module</p><p>•\tIn VSCode, and under the folder ‘app’, create a file ‘app.module.ts’</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">// this file is to 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\" data-language=\"plain\">// 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// import the angular modules</div><div class=\"ql-code-block\" data-language=\"plain\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\" data-language=\"plain\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\" data-language=\"plain\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">//decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc),</div><div class=\"ql-code-block\" data-language=\"plain\">// and declare AppComponent so that it can be used by all components and templates,</div><div class=\"ql-code-block\" data-language=\"plain\">// and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\" data-language=\"plain\">// https://angular.io/guide/bootstrapping, and https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\" data-language=\"plain\">@NgModule({</div><div class=\"ql-code-block\" data-language=\"plain\">imports: [BrowserModule],</div><div class=\"ql-code-block\" data-language=\"plain\">declarations: [AppComponent],</div><div class=\"ql-code-block\" data-language=\"plain\">bootstrap: [AppComponent]</div><div class=\"ql-code-block\" data-language=\"plain\">})</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\" data-language=\"plain\">export class AppModule { }</div></div><p>t///</p>"},{"idx":"MY6f4bcd22-500f-4214-b749-8e3d6b0ee7d6","name":"11. polyfills.ts","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>11. Create Angular Polyfills File</p><p>•\tIn VSCode, and under the folder ‘src’, create a file ‘polyfills.ts’</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/24/angular-7-tutorial-part-2-create-base-project-structure-webpack-config</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">//to work around for features that are not supported by browsers</div><div class=\"ql-code-block\" data-language=\"plain\">// the word polyfill means filling the holes (unsupported functions) by poly methods (could be javascript or other languages)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import 'core-js/features/reflect';</div><div class=\"ql-code-block\" data-language=\"plain\">import 'zone.js/dist/zone';</div></div><p><br></p><p>t///</p><p>[_L]the word polyfill means filling the holes (unsupported functions) by poly methods (could be javascript or other languages)</p>"},{"idx":"MY8f46b3b7-7ed4-4855-b097-e292e916f29c","name":"12. main.ts","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>12. Create Angular Main (Bootstrap/Launch) File</p><p>·In VSCode, and under the folder ‘src’, create a file ‘main.ts’</p><p>·In this file, paste the code from the corresponding part from <a href=\"https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json\" target=\"_blank\">https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</a></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// this file is to 1) load build-in modules (polyfill,platformBrowserDynamic)</div><div class=\"ql-code-block\">// 2) run the customized module 'AppModule' (which is to specify where are the web components, and how to display )</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import polyfill modules (what is polyfill? see polyfill.ts )</div><div class=\"ql-code-block\">import './polyfills';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the module to deal with web component formating (like CSS)</div><div class=\"ql-code-block\">import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';</div><div class=\"ql-code-block\">import { AppModule } from './app/app.module';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// bootstrap means formating web components</div><div class=\"ql-code-block\">platformBrowserDynamic().bootstrapModule(AppModule);</div></div><p>t///</p>"},{"idx":"MY0dc532c6-f648-4901-9c6a-07292074026d","name":"13. index.html","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>13. Create Angular Main Index Html File</p><p>•\tIn VSCode, and under the folder ‘src’, create a file ‘index.html’</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;!DOCTYPE html&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;html&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;head&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;base href=\"/\" /&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;title&gt;Angular 7 Tutorial&lt;/title&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">&lt;!-- bootstrap css --&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;link href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;/head&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;body&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;app&gt;Loading...&lt;/app&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;/body&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">&lt;/html&gt;</div></div><p>t///</p><p>[_L] This part is to load the web contents from app/app.component.html, and replace the 'loading' in the &lt;app&gt; tags, and format the contents as specified in app.module.ts -&gt; app.compnent.ts</p>"},{"idx":"MY609055bd-bfd8-4a57-a77d-05bb0dbc2d13","name":"14. add script into package.json","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>14. Add start script to package.json</p><p>•\tIn VSCode, and in package.json, paste the code from the corresponding lines in package.json from https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json </p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">    \"scripts\": {</div><div class=\"ql-code-block\">        \"mycomment\": \"The following is to start the command after npm start. The purpose is to launch the index page in a browser\",</div><div class=\"ql-code-block\">        \"start\": \"webpack-dev-server --mode development --open\"</div><div class=\"ql-code-block\">    }</div></div><p><br></p><p>t///</p>"},{"idx":"MYcf85d197-3298-44eb-9332-13bbd4ba746b","name":"15. Start the application","custparents":[{"idx":"MY91ceaa26-0d16-44c1-b651-0442d940bce2"}],"NodeDescription":"<p>///t</p><p>15. Start the application</p><p>•\tIn node.js command window and under the project root, type npm start</p><p>t///</p>"}]},{"idx":"MY83c17ca3-92e3-4d6e-bfd9-37952f69fdfb","name":"A1. Link to github","custparents":[{"idx":"MY1ea63709-b934-4652-acbb-d856455e0014"}],"NodeDescription":"<p>///t</p><p><br></p><p>A1. Link to github</p><p><br></p><p>Create a new repository at github:</p><p>https://github.com/ShenzhenYAO/mya8login_stepbystep.git</p><p>under the folder</p><p>C:\\Users\\Z70\\Angular 8 projects\\mya8login_stepbystep</p><p>run the following</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">git remote add origin https://github.com/ShenzhenYAO/mya8login_stepbystep.git</div><div class=\"ql-code-block\" data-language=\"plain\">git add .</div><div class=\"ql-code-block\" data-language=\"plain\">git commit -m \"1\"</div><div class=\"ql-code-block\" data-language=\"plain\">git push origin master</div></div><p>[_W] Check the gitignore file, the node_modeules folder is not pushed.</p><p><br></p><p>under C:\\Users\\Z70\\Angular 8 projects\\mya8login_stepbystep, and in VSCode, create a file .gitignore, add the following</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\"># See http://help.github.com/ignore-files/ for more about ignoring files.</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># compiled output</div><div class=\"ql-code-block\" data-language=\"plain\">/dist</div><div class=\"ql-code-block\" data-language=\"plain\">/tmp</div><div class=\"ql-code-block\" data-language=\"plain\">/out-tsc</div><div class=\"ql-code-block\" data-language=\"plain\"># Only exists if Bazel was run</div><div class=\"ql-code-block\" data-language=\"plain\">/bazel-out</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># dependencies</div><div class=\"ql-code-block\" data-language=\"plain\">/node_modules</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># profiling files</div><div class=\"ql-code-block\" data-language=\"plain\">chrome-profiler-events*.json</div><div class=\"ql-code-block\" data-language=\"plain\">speed-measure-plugin*.json</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># IDEs and editors</div><div class=\"ql-code-block\" data-language=\"plain\">/.idea</div><div class=\"ql-code-block\" data-language=\"plain\">.project</div><div class=\"ql-code-block\" data-language=\"plain\">.classpath</div><div class=\"ql-code-block\" data-language=\"plain\">.c9/</div><div class=\"ql-code-block\" data-language=\"plain\">*.launch</div><div class=\"ql-code-block\" data-language=\"plain\">.settings/</div><div class=\"ql-code-block\" data-language=\"plain\">*.sublime-workspace</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># IDE - VSCode</div><div class=\"ql-code-block\" data-language=\"plain\">.vscode/*</div><div class=\"ql-code-block\" data-language=\"plain\">!.vscode/settings.json</div><div class=\"ql-code-block\" data-language=\"plain\">!.vscode/tasks.json</div><div class=\"ql-code-block\" data-language=\"plain\">!.vscode/launch.json</div><div class=\"ql-code-block\" data-language=\"plain\">!.vscode/extensions.json</div><div class=\"ql-code-block\" data-language=\"plain\">.history/*</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># misc</div><div class=\"ql-code-block\" data-language=\"plain\">/.sass-cache</div><div class=\"ql-code-block\" data-language=\"plain\">/connect.lock</div><div class=\"ql-code-block\" data-language=\"plain\">/coverage</div><div class=\"ql-code-block\" data-language=\"plain\">/libpeerconnection.log</div><div class=\"ql-code-block\" data-language=\"plain\">npm-debug.log</div><div class=\"ql-code-block\" data-language=\"plain\">yarn-error.log</div><div class=\"ql-code-block\" data-language=\"plain\">testem.log</div><div class=\"ql-code-block\" data-language=\"plain\">/typings</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># System Files</div><div class=\"ql-code-block\" data-language=\"plain\">.DS_Store</div><div class=\"ql-code-block\" data-language=\"plain\">Thumbs.db</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p>t///</p>"},{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694","name":"B. Add routing & multiple pages","custparents":[{"idx":"MY1ea63709-b934-4652-acbb-d856455e0014"},{"idx":"MY1ea63709-b934-4652-acbb-d856455e0014"}],"children":[{"idx":"MY412087f9-2d2f-4298-a3cd-777377480ecd","name":"1. home.component.html","custparents":[{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694"}],"NodeDescription":"<p>///t</p><p>1. Create Home Page Component &amp; Template</p><p>•\tIn VSCODe, and under app, create a folder ‘home’. Inside ‘home’, create a file ‘home.component.html’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;h1&gt;Home Page&lt;/h1&gt;</div></div><p><br></p><p>•\tInside ‘home’, create a file ‘home.component.ts.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ templateUrl: 'home.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\">export class HomeComponent {}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p><br></p><p>•\tInside ‘home’, create a file ‘index.ts.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">export * from './home.component';</div></div><p><br></p><p>t///</p>"},{"idx":"MYe1b1eab3-45d7-4d70-b674-8ee3c29faffa","name":"2. Login page component and template","custparents":[{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694"}],"NodeDescription":"<p>///t</p><p>2. Login Page Component &amp; Template</p><p>·In VSCode, and under app, create a folder ‘login’. Inside ‘login’, create a file ‘login.component.html’.</p><p>·In this file, paste the code from the corresponding part from <a href=\"https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages\" target=\"_blank\">https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</a></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;h1&gt;Login Page&lt;/h1&gt;</div></div><p><br></p><p><br></p><p>·Inside ‘login’, create a file ‘login.component.ts.</p><p>·In this file, paste the code from the corresponding part from <a href=\"https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages\" target=\"_blank\">https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</a></p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ templateUrl: 'login.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\">export class LoginComponent {}</div></div><p><br></p><p><br></p><p>·Inside ‘login’, create a file ‘index.ts.</p><p>·In this file, paste the code from the corresponding part from <a href=\"https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages\" target=\"_blank\">https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</a></p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">export*from'./login.component';</div></div><p><br></p><p>t///</p>"},{"idx":"MY83abc17d-6291-48a3-83b6-be94452cf1f5","name":"3. register page","custparents":[{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694"}],"NodeDescription":"<p>///t</p><p>3. Register Page Component &amp; Template</p><p>•\tIn VSCODe, and under app, create a folder ‘register’. Inside ‘register’, create a file ‘register.component.html’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">&lt;h1&gt;Register Page&lt;/h1&gt;</div></div><p>•\tInside ‘register’, create a file ‘register.component.ts.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ templateUrl: 'register.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\">export class RegisterComponent {}</div></div><p><br></p><p>•\tInside ‘register’, create a file ‘index.ts.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">export * from './register.component';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></div><p><br></p><p><br></p><p>t///</p>"},{"idx":"MY3a48f8d8-3e8e-4587-bd15-6b926ef746c6","name":"4. Add components to App module","custparents":[{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694"}],"NodeDescription":"<p>///t</p><p>4. Add Components to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages. Basically, it is to add the specification for home, login, and register, as have been done in step 1 to 3.</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [BrowserModule],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div><div class=\"ql-code-block\"><br></div></div><p>t///</p>"},{"idx":"MYf0c78889-49f6-4780-aaec-3bff4d5f0503","name":"5. Configure App Routing Module","custparents":[{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694"}],"NodeDescription":"<p>///t</p><p>5. Configure App Routing Module</p><p>•\tQuestion: what is routing…</p><p>•\tIn VSCODe, and under app, create a file ‘app.routing.ts’</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><p>[_L]Routing module is for navigating across different web pages.</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Routes, RouterModule } from '@angular/router';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\" data-language=\"plain\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\" data-language=\"plain\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">const routes: Routes = [</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: '', component: HomeComponent },</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: 'login', component: LoginComponent },</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: 'register', component: RegisterComponent },</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    // otherwise redirect to home</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: '**', redirectTo: '' }</div><div class=\"ql-code-block\" data-language=\"plain\">];</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">export const appRoutingModule = RouterModule.forRoot(routes);</div></div><p><br></p><p>t///</p>"},{"idx":"MYb34ba8bd-c32d-4522-b31c-25aa64b14ee2","name":"6. Add App Routing Module to App Module","custparents":[{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694"}],"NodeDescription":"<p>///t</p><p>6. Add App Routing Module to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages. Basically, it is to add the specification for home, login, and register, as have been done in step 5.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div><div class=\"ql-code-block\"><br></div></div><p>t///</p>"},{"idx":"MY69a1f8dc-f16d-496d-b70f-540edc4cac4b","name":"7. Add Router Outlet and Navigation to App Component","custparents":[{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694"}],"NodeDescription":"<p>///t</p><p>7. Add Router Outlet and Navigation to App Component</p><p>•\tIn /src/app/app/component.html, replace the &lt;h1&gt;Hello Angular 8!&lt;/h1&gt; message with the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;!-- nav --&gt;</div><div class=\"ql-code-block\">&lt;nav class=\"navbar navbar-expand navbar-dark bg-dark\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"navbar-nav\"&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/\"&gt;Home&lt;/a&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/login\"&gt;Login&lt;/a&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/register\"&gt;Register&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/nav&gt;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">&lt;!-- main content container --&gt;</div><div class=\"ql-code-block\">&lt;div class=\"jumbotron\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"container\"&gt;</div><div class=\"ql-code-block\">        &lt;div class=\"row\"&gt;</div><div class=\"ql-code-block\">            &lt;div class=\"col-sm-8 offset-sm-2\"&gt;</div><div class=\"ql-code-block\">                &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"ql-code-block\">            &lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/div&gt;</div></div><p>t///</p>"},{"idx":"MY967052de-1b77-460c-b308-ee563771ec15","name":"8. Update Webpack Dev Server Config","custparents":[{"idx":"MYc7b7f6f8-0705-4c09-8621-caf5089f5694"}],"NodeDescription":"<p>///t</p><p>8. Update Webpack Dev Server Config</p><p>•\tAdd code to webpack.config.js to prevent 404 errors corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><p>[_W]</p><p>•\tNote that this part is different from the above source, the correct code can be found in https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">//Basically the webpack config is to setup how to compile ts to js, and how to run js programs/plug-ins properly.</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// the function require is to load modules. see https://www.quora.com/What-is-the-use-of-require-function-in-Javascript</div><div class=\"ql-code-block\">const webpack = require('webpack');</div><div class=\"ql-code-block\">const HtmlWebpackPlugin = require('html-webpack-plugin');</div><div class=\"ql-code-block\">const path = require('path');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">module.exports = {</div><div class=\"ql-code-block\">    entry: './src/main.ts',</div><div class=\"ql-code-block\">    resolve: {</div><div class=\"ql-code-block\">        extensions: ['.ts', '.js'],</div><div class=\"ql-code-block\">        alias: {</div><div class=\"ql-code-block\">            '@': path.resolve(__dirname, 'src/app/'),</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    module: {</div><div class=\"ql-code-block\">        rules: [</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.ts$/,</div><div class=\"ql-code-block\">                use: ['ts-loader', 'angular2-template-loader']</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.html$/,</div><div class=\"ql-code-block\">                use: 'html-loader'</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.less$/,</div><div class=\"ql-code-block\">                use: ['style-loader', 'css-loader', 'less-loader']</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            // workaround for warning: System.import() is deprecated and will be removed soon. Use import() instead.</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /[\\/\\\\]@angular[\\/\\\\].+\\.js$/,</div><div class=\"ql-code-block\">                parser: { system: true }</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">        ]</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    plugins: [</div><div class=\"ql-code-block\">        new HtmlWebpackPlugin({ template: './src/index.html' }),</div><div class=\"ql-code-block\">        new webpack.DefinePlugin({</div><div class=\"ql-code-block\">            // global app config object</div><div class=\"ql-code-block\">            config: JSON.stringify({</div><div class=\"ql-code-block\">                apiUrl: 'http://localhost:4000'</div><div class=\"ql-code-block\">            })</div><div class=\"ql-code-block\">        }),</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // workaround for warning: Critical dependency: the request of a dependency is an expression</div><div class=\"ql-code-block\">        new webpack.ContextReplacementPlugin(</div><div class=\"ql-code-block\">            /\\@angular(\\\\|\\/)core(\\\\|\\/)fesm5/,</div><div class=\"ql-code-block\">            path.resolve(__dirname, 'src')</div><div class=\"ql-code-block\">        )</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    optimization: {</div><div class=\"ql-code-block\">        splitChunks: {</div><div class=\"ql-code-block\">            chunks: 'all',</div><div class=\"ql-code-block\">        },</div><div class=\"ql-code-block\">        runtimeChunk: true</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    devServer: {</div><div class=\"ql-code-block\">        historyApiFallback: true</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"}],"NodeDescription":"<p>///t</p><p>B. Add routing &amp; multiple pages</p><p>This part is to add ‘home, login, and register’ into the top banner of the page. </p><p>Tutorial of this part is available at https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages</p><p>t///</p>"},{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663","name":"C. Login Form, Authentication Service & Route Guard","custparents":[{"idx":"MY1ea63709-b934-4652-acbb-d856455e0014"}],"NodeDescription":"<p>///t</p><p>This part is to create the login form. With the link to the register form (the register form is not developed yet).</p><p>The tutorial of this part can be found at https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard.</p><p><br></p><p>[_L] failed to compile</p><p><strong>Analyses:</strong></p><p><strong>the folder _services should be in src/app, not in src/</strong></p><p><br></p><p>ERROR in ./src/app/_helpers/jwt.interceptor.ts</p><p>Module not found: Error: Can't resolve '../_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers'</p><p>@ ./src/app/_helpers/jwt.interceptor.ts 13:18-41</p><p>@ ./src/app/_helpers/index.ts</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p>ERROR in ./src/app/_helpers/auth.guard.ts</p><p>Module not found: Error: Can't resolve '../_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers'</p><p>@ ./src/app/_helpers/auth.guard.ts 14:18-41</p><p>@ ./src/app/_helpers/index.ts</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p><br></p><p>ERROR in ./src/app/_helpers/error.interceptor.ts</p><p>Module not found: Error: Can't resolve '../_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers'</p><p>@ ./src/app/_helpers/error.interceptor.ts 15:18-41</p><p>@ ./src/app/_helpers/index.ts</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p><br></p><p>ERROR in ./src/app/login/login.component.ts</p><p>Module not found: Error: Can't resolve '../_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\login'</p><p>@ ./src/app/login/login.component.ts 16:18-41</p><p>@ ./src/app/login/index.ts</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p><br></p><p>ERROR in ./src/app/app.component.ts</p><p>Module not found: Error: Can't resolve './_services' in 'C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app'</p><p>@ ./src/app/app.component.ts 18:18-40</p><p>@ ./src/app/app.module.ts</p><p>@ ./src/main.ts</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\app.component.ts</p><p>./src/app/app.component.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\app.component.ts(9,39)</p><p>TS2307: Cannot find module './_services'.</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\auth.guard.ts</p><p>./src/app/_helpers/auth.guard.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\auth.guard.ts(4,39)</p><p>TS2307: Cannot find module '../_services'.</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\error.interceptor.ts</p><p>./src/app/_helpers/error.interceptor.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\error.interceptor.ts(6,39)</p><p>TS2307: Cannot find module '../_services'.</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\jwt.interceptor.ts</p><p>./src/app/_helpers/jwt.interceptor.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\_helpers\\jwt.interceptor.ts(5,39)</p><p>TS2307: Cannot find module '../_services'.</p><p><br></p><p>ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\login\\login.component.ts</p><p>./src/app/login/login.component.ts</p><p>[tsl] ERROR in C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep\\src\\app\\login\\login.component.ts(6,39)</p><p>TS2307: Cannot find module '../_services'.</p><p><br></p><p><br></p><p>t///</p>","children":[{"idx":"MYeda14da4-0516-41e3-ab82-5027cfcf193f","name":"1. Create Fake Backend","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"children":[{"idx":"MY44a48e71-007e-4a2f-8844-51729553ba74","name":"1.1 Create Helpers Folder","custparents":[{"idx":"MYeda14da4-0516-41e3-ab82-5027cfcf193f"}],"NodeDescription":"<p>///t</p><p>1.1 Create Helpers Folder</p><p>•\tIn VSCode, and under app, create a folder ‘_helpers’.</p><p>[_Q] Why it is called _helpers</p><p>t///</p>"},{"idx":"MY85bca4e7-7c16-4e96-a6a1-f372e280e3ef","name":"1.2 Create Fake Backend Http Interceptor","custparents":[{"idx":"MYeda14da4-0516-41e3-ab82-5027cfcf193f"}],"NodeDescription":"<p>///t</p><p>•\tIn _helpers, create a file ‘fake-backend.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><p>t///</p>"},{"idx":"MYcc44c24b-3b75-4974-bc6a-a36ee7f787c9","name":"1.3 Create Barrel File index.ts","custparents":[{"idx":"MYeda14da4-0516-41e3-ab82-5027cfcf193f"}],"NodeDescription":"<p>///t</p><p>1.3 Create Barrel File in Helpers Folder</p><p>•\tIn _helpers, create a file ‘index.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './fake-backend';</div></div><p>t///</p>"},{"idx":"MY8d4c32dc-cd96-4204-a436-1166ca495f72","name":"1.4 Add Fake Backend to App Module","custparents":[{"idx":"MYeda14da4-0516-41e3-ab82-5027cfcf193f"}],"NodeDescription":"<p>///t</p><p>1.4 Add Fake Backend to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// used to create fake backend</div><div class=\"ql-code-block\">import { fakeBackendProvider } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    providers: [</div><div class=\"ql-code-block\">        // provider used to create fake backend</div><div class=\"ql-code-block\">        fakeBackendProvider</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div></div><p>t///</p>"}]},{"idx":"MY6c90c1a6-8128-41e5-90c9-d5c90a7d35e8","name":"2. Create Global Config Object","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"children":[{"idx":"MY207284db-a444-4cc7-b39a-f7baec4ed5e4","name":"2.1 Add contents to webpack.config.js","custparents":[{"idx":"MY6c90c1a6-8128-41e5-90c9-d5c90a7d35e8"}],"NodeDescription":"<p>///t</p><p>2.1</p><p>•\tAdd code to webpack.config.js from the corresponding part from https://jasonwatmore.com/post/2019/04/29/angular-7-tutorial-part-3-add-routing-multiple-pages. </p><p>•\tNote that this part is different from the above source, the correct code can be found in https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial#tsconfig-json</p><p><strong>Nothing to change here, as the code has been injected in early steps.</strong></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">//Basically the webpack config is to setup how to compile ts to js, and how to run js programs/plug-ins properly.</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// the function require is to load modules. see https://www.quora.com/What-is-the-use-of-require-function-in-Javascript</div><div class=\"ql-code-block\">const webpack = require('webpack');</div><div class=\"ql-code-block\">const HtmlWebpackPlugin = require('html-webpack-plugin');</div><div class=\"ql-code-block\">const path = require('path');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">module.exports = {</div><div class=\"ql-code-block\">    entry: './src/main.ts',</div><div class=\"ql-code-block\">    resolve: {</div><div class=\"ql-code-block\">        extensions: ['.ts', '.js'],</div><div class=\"ql-code-block\">        alias: {</div><div class=\"ql-code-block\">            '@': path.resolve(__dirname, 'src/app/'),</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    module: {</div><div class=\"ql-code-block\">        rules: [</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.ts$/,</div><div class=\"ql-code-block\">                use: ['ts-loader', 'angular2-template-loader']</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.html$/,</div><div class=\"ql-code-block\">                use: 'html-loader'</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /\\.less$/,</div><div class=\"ql-code-block\">                use: ['style-loader', 'css-loader', 'less-loader']</div><div class=\"ql-code-block\">            },</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            // workaround for warning: System.import() is deprecated and will be removed soon. Use import() instead.</div><div class=\"ql-code-block\">            {</div><div class=\"ql-code-block\">                test: /[\\/\\\\]@angular[\\/\\\\].+\\.js$/,</div><div class=\"ql-code-block\">                parser: { system: true }</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">        ]</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    plugins: [</div><div class=\"ql-code-block\">        new HtmlWebpackPlugin({ template: './src/index.html' }),</div><div class=\"ql-code-block\">        new webpack.DefinePlugin({</div><div class=\"ql-code-block\">            // global app config object</div><div class=\"ql-code-block\">            config: JSON.stringify({</div><div class=\"ql-code-block\">                apiUrl: 'http://localhost:4000'</div><div class=\"ql-code-block\">            })</div><div class=\"ql-code-block\">        }),</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // workaround for warning: Critical dependency: the request of a dependency is an expression</div><div class=\"ql-code-block\">        new webpack.ContextReplacementPlugin(</div><div class=\"ql-code-block\">            /\\@angular(\\\\|\\/)core(\\\\|\\/)fesm5/,</div><div class=\"ql-code-block\">            path.resolve(__dirname, 'src')</div><div class=\"ql-code-block\">        )</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    optimization: {</div><div class=\"ql-code-block\">        splitChunks: {</div><div class=\"ql-code-block\">            chunks: 'all',</div><div class=\"ql-code-block\">        },</div><div class=\"ql-code-block\">        runtimeChunk: true</div><div class=\"ql-code-block\">    },</div><div class=\"ql-code-block\">    devServer: {</div><div class=\"ql-code-block\">        historyApiFallback: true</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p><br></p><p>t///</p>"},{"idx":"MY299d0d2c-fb12-4d0b-ade4-1cb61b6998e3","name":"2.2 Create Custom Typings File","custparents":[{"idx":"MY6c90c1a6-8128-41e5-90c9-d5c90a7d35e8"}],"NodeDescription":"<p>///t</p><p>2.2 Create Custom Typings File</p><p>•\tIn _/src, create a file ‘typings.d.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><p>[_Q] what is this file for?</p><p>\"A custom typings file is used to declare TypeScript types that are created outside of the Angular application, so the TypeScript compiler is aware of them and doesn't give you compile errors about unknown types. This typings file contains a declaration for the global config object created by webpack above.\"</p><p>Not know the meanings of the above paragraph.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// so the typescript compiler doesn't complain about the global config object</div><div class=\"ql-code-block\">declare var config: any;</div></div><p>t///</p>"}]},{"idx":"MY6a11be63-5dd9-492e-8615-14f79ceb15f1","name":"3. Create Authentication Service","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"children":[{"idx":"MY681d45eb-1ef2-4b32-990a-f54506cab9a6","name":"3.1 Create Services Folder","custparents":[{"idx":"MY6a11be63-5dd9-492e-8615-14f79ceb15f1"}],"NodeDescription":"<p>///t</p><p>3.1 Create Services Folder</p><p>•\tIn VSCode, and under app, create a folder ‘_services’.</p><p>[_Q] What is this folder for?</p><p>\"The authentication service is used to login &amp; logout of the Angular app, it notifies other components when the user logs in &amp; out, and allows access the currently logged in user.\"</p><p>t///</p>"},{"idx":"MY10c20b6a-a570-4056-bebb-4fa790e4bd20","name":"3.2 Create Authentication Service","custparents":[{"idx":"MY6a11be63-5dd9-492e-8615-14f79ceb15f1"}],"NodeDescription":"<p>///t</p><p>3.2 Create Authentication Service</p><p>•\tIn _services, create a file ‘authentication.service.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpClient } from '@angular/common/http';</div><div class=\"ql-code-block\">import { BehaviorSubject, Observable } from 'rxjs';</div><div class=\"ql-code-block\">import { map } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class AuthenticationService {</div><div class=\"ql-code-block\">    private currentUserSubject: BehaviorSubject&lt;any&gt;;</div><div class=\"ql-code-block\">    public currentUser: Observable&lt;any&gt;;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(private http: HttpClient) {</div><div class=\"ql-code-block\">        this.currentUserSubject = new BehaviorSubject&lt;any&gt;(JSON.parse(localStorage.getItem('currentUser')));</div><div class=\"ql-code-block\">        this.currentUser = this.currentUserSubject.asObservable();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    public get currentUserValue() {</div><div class=\"ql-code-block\">        return this.currentUserSubject.value;</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    login(username, password) {</div><div class=\"ql-code-block\">        return this.http.post&lt;any&gt;(`${config.apiUrl}/users/authenticate`, { username, password })</div><div class=\"ql-code-block\">            .pipe(map(user =&gt; {</div><div class=\"ql-code-block\">                // store user details and jwt token in local storage to keep user logged in between page refreshes</div><div class=\"ql-code-block\">                localStorage.setItem('currentUser', JSON.stringify(user));</div><div class=\"ql-code-block\">                this.currentUserSubject.next(user);</div><div class=\"ql-code-block\">                return user;</div><div class=\"ql-code-block\">            }));</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    logout() {</div><div class=\"ql-code-block\">        // remove user from local storage and set current user to null</div><div class=\"ql-code-block\">        localStorage.removeItem('currentUser');</div><div class=\"ql-code-block\">        this.currentUserSubject.next(null);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MYa91b6812-466f-4022-a60f-92605e3f02c5","name":"3.3 Create Barrel File in Services Folder","custparents":[{"idx":"MY6a11be63-5dd9-492e-8615-14f79ceb15f1"}],"NodeDescription":"<p>///t</p><p>3.3 Create Barrel File in Services Folder</p><p>•\tIn _ services, create a file ‘index.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './authentication.service';</div></div><p>t///</p>"}]},{"idx":"MY05ed9560-4030-48b7-8475-ce483c64a1bf","name":"4. Import ReactiveFormsModule and HttpClientModule into App Module","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"NodeDescription":"<p>///t</p><p>4. Import ReactiveFormsModule and HttpClientModule into app.module.ts</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { ReactiveFormsModule } from '@angular/forms';</div><div class=\"ql-code-block\">import { HttpClientModule } from '@angular/common/http';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// used to create fake backend</div><div class=\"ql-code-block\">import { fakeBackendProvider } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        ReactiveFormsModule,</div><div class=\"ql-code-block\">        HttpClientModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    providers: [</div><div class=\"ql-code-block\">        // provider used to create fake backend</div><div class=\"ql-code-block\">        fakeBackendProvider</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div></div><p><br></p><p>t///</p>"},{"idx":"MY188a159e-0604-482f-ab3a-563842fc75b8","name":"5. Add Form Logic to Login Component","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"NodeDescription":"<p>///t</p><p>5. Add Form Logic to Login Component</p><p>[_Q] the line has error (Cannot find module '../_services'.):</p><p>\"import { AuthenticationService } from '../_services'\"</p><p><strong>the folder _services should be in src/app, not in src/</strong></p><p><br></p><p>•\tIn /src/app/login/login.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\">import { Router, ActivatedRoute } from '@angular/router';</div><div class=\"ql-code-block\" data-language=\"plain\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\" data-language=\"plain\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { AuthenticationService } from '../_services'</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({templateUrl: 'login.component.html'})</div><div class=\"ql-code-block\" data-language=\"plain\">export class LoginComponent implements OnInit {</div><div class=\"ql-code-block\" data-language=\"plain\">loginForm: FormGroup;</div><div class=\"ql-code-block\" data-language=\"plain\">loading = false;</div><div class=\"ql-code-block\" data-language=\"plain\">submitted = false;</div><div class=\"ql-code-block\" data-language=\"plain\">returnUrl: string;</div><div class=\"ql-code-block\" data-language=\"plain\">error: string;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">constructor(</div><div class=\"ql-code-block\" data-language=\"plain\">private formBuilder: FormBuilder,</div><div class=\"ql-code-block\" data-language=\"plain\">private route: ActivatedRoute,</div><div class=\"ql-code-block\" data-language=\"plain\">private router: Router,</div><div class=\"ql-code-block\" data-language=\"plain\">private authenticationService: AuthenticationService</div><div class=\"ql-code-block\" data-language=\"plain\">) {</div><div class=\"ql-code-block\" data-language=\"plain\">// redirect to home if already logged in</div><div class=\"ql-code-block\" data-language=\"plain\">if (this.authenticationService.currentUserValue) {</div><div class=\"ql-code-block\" data-language=\"plain\">this.router.navigate(['/']);</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">ngOnInit() {</div><div class=\"ql-code-block\" data-language=\"plain\">this.loginForm = this.formBuilder.group({</div><div class=\"ql-code-block\" data-language=\"plain\">username: ['', Validators.required],</div><div class=\"ql-code-block\" data-language=\"plain\">password: ['', Validators.required]</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// get return url from route parameters or default to '/'</div><div class=\"ql-code-block\" data-language=\"plain\">this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// convenience getter for easy access to form fields</div><div class=\"ql-code-block\" data-language=\"plain\">get f() { return this.loginForm.controls; }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">onSubmit() {</div><div class=\"ql-code-block\" data-language=\"plain\">this.submitted = true;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// stop here if form is invalid</div><div class=\"ql-code-block\" data-language=\"plain\">if (this.loginForm.invalid) {</div><div class=\"ql-code-block\" data-language=\"plain\">return;</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">this.loading = true;</div><div class=\"ql-code-block\" data-language=\"plain\">this.authenticationService.login(this.f.username.value, this.f.password.value)</div><div class=\"ql-code-block\" data-language=\"plain\">.pipe(first())</div><div class=\"ql-code-block\" data-language=\"plain\">.subscribe(</div><div class=\"ql-code-block\" data-language=\"plain\">data =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">this.router.navigate([this.returnUrl]);</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">error =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">this.error = error;</div><div class=\"ql-code-block\" data-language=\"plain\">this.loading = false;</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>t///</p>"},{"idx":"MY92389081-a8fc-4089-8a41-4f353d071c96","name":"6. Add Form HTML to Login Component Template","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"NodeDescription":"<p>///t</p><p>6. Add Form HTML to Login Component Template</p><p>•\tIn /src/app/login/login.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;div *ngIf=\"error\" class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;</div><div class=\"ql-code-block\">&lt;h2&gt;Login&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Login</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/register\" class=\"btn btn-link\"&gt;Register&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"},{"idx":"MY81af5ddb-d1e8-4b9d-8f8a-d05d00b40028","name":"7. Add Logout and Show/Hide Nav to App Component","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"children":[{"idx":"MY0a8b9b39-6ae1-4377-aae2-1926b8164bd8","name":"7.1 Add Logic to App Component","custparents":[{"idx":"MY81af5ddb-d1e8-4b9d-8f8a-d05d00b40028"}],"NodeDescription":"<p>///t</p><p>7.1 Add Logic to App Component</p><p>•\tIn /src/app/app.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// this file is to 1) load build-in modules (Component)</div><div class=\"ql-code-block\">// 2) specify the web components to obtain (in which html file, within what tag) by decorating Component</div><div class=\"ql-code-block\">// best explained here: https://www.youtube.com/watch?v=16rQyEQtpyQ</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">//import the module 'Component' from angular's core modules 9under the folder /node_modules/@angular/core</div><div class=\"ql-code-block\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\">import { Router } from '@angular/router';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from './_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">//The following is to run the module 'component', i.e., to get components/contents in the tag &lt;app&gt;&lt;/app&gt; from the file 'app.component.html'</div><div class=\"ql-code-block\">//The actions to assign values (selector = 'app', temlateUrl = 'app.component.html') is called decorate. </div><div class=\"ql-code-block\">@Component({ selector: 'app', templateUrl: 'app.component.html' })</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// define a module AppComponent (instead of script), and get it ready to be imported by other ts (e.g., app.module.ts)</div><div class=\"ql-code-block\">export class AppComponent {</div><div class=\"ql-code-block\">    currentUser: any;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        this.authenticationService.currentUser.subscribe(x =&gt; this.currentUser = x);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    logout() {</div><div class=\"ql-code-block\">        this.authenticationService.logout();</div><div class=\"ql-code-block\">        this.router.navigate(['/login']);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MYfe00acc9-7d3d-44cc-a318-6c7accd4a085","name":"7.2 Update Nav in App Component Template","custparents":[{"idx":"MY81af5ddb-d1e8-4b9d-8f8a-d05d00b40028"}],"NodeDescription":"<p>///t</p><p>7.2 Update Nav in App Component Template</p><p>•\tIn /src/app/app.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;!-- nav --&gt;</div><div class=\"ql-code-block\">&lt;nav class=\"navbar navbar-expand navbar-dark bg-dark\" *ngIf=\"currentUser\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"navbar-nav\"&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/\"&gt;Home&lt;/a&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" (click)=\"logout()\"&gt;Logout&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/nav&gt;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">&lt;!-- main content container --&gt;</div><div class=\"ql-code-block\">&lt;div class=\"jumbotron\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"container\"&gt;</div><div class=\"ql-code-block\">        &lt;div class=\"row\"&gt;</div><div class=\"ql-code-block\">            &lt;div class=\"col-sm-8 offset-sm-2\"&gt;</div><div class=\"ql-code-block\">                &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"ql-code-block\">            &lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/div&gt;</div></div><p>t///</p>"}]},{"idx":"MY0ca3f103-6dc2-4557-934f-e53ee0b4ddd0","name":"8. Create Route Guard","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"children":[{"idx":"MYd5512a2f-5f40-4613-a38c-e3a8d0121940","name":"8.1 Create Auth Guard","custparents":[{"idx":"MY0ca3f103-6dc2-4557-934f-e53ee0b4ddd0"}],"NodeDescription":"<p>///t</p><p>8.1 Create Auth Guard</p><p>•\tIn _helpers, create a file ‘auth.guard.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class AuthGuard implements CanActivate {</div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService</div><div class=\"ql-code-block\">    ) {}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {</div><div class=\"ql-code-block\">        const currentUser = this.authenticationService.currentUserValue;</div><div class=\"ql-code-block\">        if (currentUser) {</div><div class=\"ql-code-block\">            // authorised so return true</div><div class=\"ql-code-block\">            return true;</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // not logged in so redirect to login page with the return url</div><div class=\"ql-code-block\">        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});</div><div class=\"ql-code-block\">        return false;</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MY001342cc-3494-4504-9940-c2ff3e33f497","name":"8.2 Add Auth Guard to Helpers Barrel File","custparents":[{"idx":"MY0ca3f103-6dc2-4557-934f-e53ee0b4ddd0"}],"NodeDescription":"<p>///t</p><p>8.2 Add Auth Guard to Helpers Barrel File</p><p>•\tIn /src/app/_helpers/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './fake-backend';</div><div class=\"ql-code-block\">export * from './auth.guard';</div></div><p>t///</p>"},{"idx":"MYce4461c4-6b40-4815-963e-e8e29d371663","name":"8.3 Add Auth Guard to Home Page Route","custparents":[{"idx":"MY0ca3f103-6dc2-4557-934f-e53ee0b4ddd0"}],"NodeDescription":"<p>///t</p><p>8.3 Add Auth Guard to Home Page Route</p><p>•\tIn /src/app/app.routing.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Routes, RouterModule } from '@angular/router';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\" data-language=\"plain\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\" data-language=\"plain\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\" data-language=\"plain\">import { AuthGuard } from './_helpers';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">const routes: Routes = [</div><div class=\"ql-code-block\" data-language=\"plain\">    { path: '', component: HomeComponent, canActivate: [AuthGuard] },</div><div class=\"ql-code-block\" data-language=\"plain\">{ path: 'login', component: LoginComponent },</div><div class=\"ql-code-block\" data-language=\"plain\">{ path: 'register', component: RegisterComponent },</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// otherwise redirect to home</div><div class=\"ql-code-block\" data-language=\"plain\">{ path: '**', redirectTo: '' }</div><div class=\"ql-code-block\" data-language=\"plain\">];</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">export const appRoutingModule = RouterModule.forRoot(routes);</div></div><p>t///</p>"}]},{"idx":"MYf8d9350a-0566-49ed-8f0a-7a7620e09817","name":"9. Create JWT Interceptor","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"children":[{"idx":"MY6d90881e-8fed-4fbc-89da-f11a8181e91b","name":"9.1 Create Angular 8 JWT Interceptor","custparents":[{"idx":"MYf8d9350a-0566-49ed-8f0a-7a7620e09817"}],"NodeDescription":"<p>///t</p><p>9.1 Create Angular 8 JWT Interceptor (Note that the tutorial said Create Angular 7 JWT Interceptor)</p><p>•\tIn _helpers, create a file ‘jwt.interceptor.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';</div><div class=\"ql-code-block\">import { Observable } from 'rxjs';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable()</div><div class=\"ql-code-block\">export class JwtInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\">    constructor(private authenticationService: AuthenticationService) {}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\">        // add authorization header with jwt token if available</div><div class=\"ql-code-block\">        let currentUser = this.authenticationService.currentUserValue;</div><div class=\"ql-code-block\">        if (currentUser &amp;&amp; currentUser.token) {</div><div class=\"ql-code-block\">            request = request.clone({</div><div class=\"ql-code-block\">                setHeaders: { </div><div class=\"ql-code-block\">                    Authorization: `Bearer ${currentUser.token}`</div><div class=\"ql-code-block\">                }</div><div class=\"ql-code-block\">            });</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        return next.handle(request);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MYe25fb368-62ef-4bc2-b346-bce1190e6648","name":"9.2 Add JWT Interceptor to Barrel File","custparents":[{"idx":"MYf8d9350a-0566-49ed-8f0a-7a7620e09817"}],"NodeDescription":"<p>///t</p><p>9.2 Add JWT Interceptor to Barrel File</p><p>•\tIn /src/app/_helpers/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './fake-backend';</div><div class=\"ql-code-block\">export * from './auth.guard';</div><div class=\"ql-code-block\">export * from './jwt.interceptor';</div></div><p>t///</p>"}]},{"idx":"MY08b72deb-fd52-4cba-86c5-2a002acb0813","name":"10. Create Error Interceptor","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"children":[{"idx":"MYbf266d1c-8938-412e-8a49-ad7af5e68721","name":"10.1 Create Angular 8 Error Interceptor","custparents":[{"idx":"MY08b72deb-fd52-4cba-86c5-2a002acb0813"}],"NodeDescription":"<p>///t</p><p>10.1 Create Angular 8 Error Interceptor</p><p>•\tIn _helpers, create a file ‘error.interceptor.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';</div><div class=\"ql-code-block\">import { Observable, throwError } from 'rxjs';</div><div class=\"ql-code-block\">import { catchError } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable()</div><div class=\"ql-code-block\">export class ErrorInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\">    constructor(private authenticationService: AuthenticationService) {}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\">        return next.handle(request).pipe(catchError(err =&gt; {</div><div class=\"ql-code-block\">            if (err.status === 401) {</div><div class=\"ql-code-block\">                // auto logout if 401 response returned from api</div><div class=\"ql-code-block\">                this.authenticationService.logout();</div><div class=\"ql-code-block\">                location.reload(true);</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">            </div><div class=\"ql-code-block\">            const error = err.error.message || err.statusText;</div><div class=\"ql-code-block\">            return throwError(error);</div><div class=\"ql-code-block\">        }))</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MY7cec41c9-67af-4d72-aa65-74ea90baedb6","name":"10.2 Add Error Interceptor to Barrel File","custparents":[{"idx":"MY08b72deb-fd52-4cba-86c5-2a002acb0813"}],"NodeDescription":"<p>///t</p><p>10.2 Add Error Interceptor to Barrel File</p><p>•\tIn /src/app/_helpers/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './fake-backend';</div><div class=\"ql-code-block\">export * from './auth.guard';</div><div class=\"ql-code-block\">export * from './jwt.interceptor';</div><div class=\"ql-code-block\">export * from './error.interceptor';</div></div><p>t///</p>"}]},{"idx":"MYce840ed0-7742-4c45-a566-fc4bcd45d902","name":"11. Add HTTP Interceptors to App Module","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"NodeDescription":"<p>///t</p><p>11. Add HTTP Interceptors to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/17/angular-7-tutorial-part-4-login-form-authentication-service-route-guard</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { ReactiveFormsModule } from '@angular/forms';</div><div class=\"ql-code-block\">import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// used to create fake backend</div><div class=\"ql-code-block\">import { fakeBackendProvider } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\">import { JwtInterceptor, ErrorInterceptor } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        ReactiveFormsModule,</div><div class=\"ql-code-block\">        HttpClientModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    providers: [</div><div class=\"ql-code-block\">        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },</div><div class=\"ql-code-block\">        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },</div><div class=\"ql-code-block\">        // provider used to create fake backend</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        fakeBackendProvider</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div><div class=\"ql-code-block\"><br></div></div><p>t///</p>"},{"idx":"MYe84ebf9f-1dca-45a5-af3e-c33baffd5876","name":"12. In node.js command window","custparents":[{"idx":"MY3b3c3c84-1c2d-41a2-b2ab-5365ea4da663"}],"NodeDescription":"<p>///t</p><p>12. In node.js command window, under the folder C:\\Users\\Z70\\Angular 8 projects\\mya8login, type nmp start to launch the application.</p><p><br></p><p>t///</p>"}]},{"idx":"MY4d53bda4-f010-40ea-b531-d1dde1be51ac","name":"D. Registration Form & User Service","custparents":[{"idx":"MY1ea63709-b934-4652-acbb-d856455e0014"}],"NodeDescription":"<p>///t</p><p>D. Registration Form &amp; User Service</p><p>***********************************</p><p>This part is to make the registration form</p><p>The tutorial of this part can be found at https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><p>t///</p>","children":[{"idx":"MY0ef0de46-d6a7-4b72-a98c-add3bba3c66f","name":"1. Add Register Route to Fake Backend","custparents":[{"idx":"MY4d53bda4-f010-40ea-b531-d1dde1be51ac"}],"NodeDescription":"<p>///t</p><p>1. Add Register Route to Fake Backend</p><p>1.1 Update Fake Backend</p><p>•\tIn /src/app/_helpers/fake-backend.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\">import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\" data-language=\"plain\">import { Observable, of, throwError } from 'rxjs';</div><div class=\"ql-code-block\" data-language=\"plain\">import { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// array in local storage for registered users</div><div class=\"ql-code-block\" data-language=\"plain\">let users = JSON.parse(localStorage.getItem('users')) || [];</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Injectable()</div><div class=\"ql-code-block\" data-language=\"plain\">export class FakeBackendInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\" data-language=\"plain\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">        const { url, method, headers, body } = request;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        // wrap in delayed observable to simulate server api call</div><div class=\"ql-code-block\" data-language=\"plain\">        return of(null)</div><div class=\"ql-code-block\" data-language=\"plain\">            .pipe(mergeMap(handleRoute))</div><div class=\"ql-code-block\" data-language=\"plain\">            .pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)</div><div class=\"ql-code-block\" data-language=\"plain\">            .pipe(delay(500))</div><div class=\"ql-code-block\" data-language=\"plain\">            .pipe(dematerialize());</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function handleRoute() {</div><div class=\"ql-code-block\" data-language=\"plain\">            switch (true) {</div><div class=\"ql-code-block\" data-language=\"plain\">                case url.endsWith('/users/authenticate') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\" data-language=\"plain\">                    return authenticate();</div><div class=\"ql-code-block\" data-language=\"plain\">                case url.endsWith('/users/register') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\" data-language=\"plain\">                    return register();</div><div class=\"ql-code-block\" data-language=\"plain\">                default:</div><div class=\"ql-code-block\" data-language=\"plain\">                    // pass through any requests not handled above</div><div class=\"ql-code-block\" data-language=\"plain\">                    return next.handle(request);</div><div class=\"ql-code-block\" data-language=\"plain\">            }    </div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        // route functions</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function authenticate() {</div><div class=\"ql-code-block\" data-language=\"plain\">            const { username, password } = body;</div><div class=\"ql-code-block\" data-language=\"plain\">            const user = users.find(x =&gt; x.username === username &amp;&amp; x.password === password);</div><div class=\"ql-code-block\" data-language=\"plain\">            if (!user) return error('Username or password is incorrect');</div><div class=\"ql-code-block\" data-language=\"plain\">            return ok({</div><div class=\"ql-code-block\" data-language=\"plain\">                id: user.id,</div><div class=\"ql-code-block\" data-language=\"plain\">                username: user.username,</div><div class=\"ql-code-block\" data-language=\"plain\">                firstName: user.firstName,</div><div class=\"ql-code-block\" data-language=\"plain\">                lastName: user.lastName,</div><div class=\"ql-code-block\" data-language=\"plain\">                token: 'fake-jwt-token'</div><div class=\"ql-code-block\" data-language=\"plain\">            })</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function register() {</div><div class=\"ql-code-block\" data-language=\"plain\">            const user = body</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            if (users.find(x =&gt; x.username === user.username)) {</div><div class=\"ql-code-block\" data-language=\"plain\">                return error('Username \"' + user.username + '\" is already taken')</div><div class=\"ql-code-block\" data-language=\"plain\">            }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            user.id = users.length ? Math.max(...users.map(x =&gt; x.id)) + 1 : 1;</div><div class=\"ql-code-block\" data-language=\"plain\">            users.push(user);</div><div class=\"ql-code-block\" data-language=\"plain\">            localStorage.setItem('users', JSON.stringify(users));</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            return ok();</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\">        </div><div class=\"ql-code-block\" data-language=\"plain\">        // helper functions</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function ok(body?) {</div><div class=\"ql-code-block\" data-language=\"plain\">            return of(new HttpResponse({ status: 200, body }))</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        function error(message) {</div><div class=\"ql-code-block\" data-language=\"plain\">            return throwError({ error: { message } });</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\">    }</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">export const fakeBackendProvider = {</div><div class=\"ql-code-block\" data-language=\"plain\">    // use fake backend in place of Http service for backend-less development</div><div class=\"ql-code-block\" data-language=\"plain\">    provide: HTTP_INTERCEPTORS,</div><div class=\"ql-code-block\" data-language=\"plain\">    useClass: FakeBackendInterceptor,</div><div class=\"ql-code-block\" data-language=\"plain\">    multi: true</div><div class=\"ql-code-block\" data-language=\"plain\">};</div></div><p>t///</p>"},{"idx":"MYdb358255-da8f-40b9-b421-0e946e18671d","name":"2. Create User Service","custparents":[{"idx":"MY4d53bda4-f010-40ea-b531-d1dde1be51ac"}],"children":[{"idx":"MY18df91d4-26e4-4455-a8dc-3ad488093471","name":"2.1 Create User Service","custparents":[{"idx":"MYdb358255-da8f-40b9-b421-0e946e18671d"}],"NodeDescription":"<p>///t</p><p>2.1 Create User Service</p><p>•\tIn _ services, create a file ‘user.service.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpClient } from '@angular/common/http';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class UserService {</div><div class=\"ql-code-block\">    constructor(private http: HttpClient) { }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    getAll() {</div><div class=\"ql-code-block\">        return this.http.get&lt;any[]&gt;(`${config.apiUrl}/users`);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    register(user) {</div><div class=\"ql-code-block\">        return this.http.post(`${config.apiUrl}/users/register`, user);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    delete(id) {</div><div class=\"ql-code-block\">        return this.http.delete(`${config.apiUrl}/users/${id}`);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MY08be1d9e-3ead-4d23-80f8-51ee7ab99695","name":"2.2 Add User Service to Services Barrel File","custparents":[{"idx":"MYdb358255-da8f-40b9-b421-0e946e18671d"}],"NodeDescription":"<p>///t</p><p>2.2 Add User Service to Services Barrel File</p><p>•\tIn /src/app/_services/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './authentication.service';</div><div class=\"ql-code-block\">export * from './user.service';</div></div><p>t///</p>"}]},{"idx":"MYdb124bf3-fa24-46ff-8eff-24cd5dac23ac","name":"3. Add Form Logic to Register Component","custparents":[{"idx":"MY4d53bda4-f010-40ea-b531-d1dde1be51ac"}],"NodeDescription":"<p>///t</p><p>3. Add Form Logic to Register Component</p><p>3.1 Update Register Component</p><p>•\tIn /src/app/register/register.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component } from '@angular/core';</div><div class=\"ql-code-block\">import { Router } from '@angular/router';</div><div class=\"ql-code-block\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { UserService, AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({ templateUrl: 'register.component.html' })</div><div class=\"ql-code-block\">export class RegisterComponent implements OnInit {</div><div class=\"ql-code-block\">    registerForm: FormGroup;</div><div class=\"ql-code-block\">    loading = false;</div><div class=\"ql-code-block\">    submitted = false;</div><div class=\"ql-code-block\">    error: string;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private formBuilder: FormBuilder,</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService,</div><div class=\"ql-code-block\">        private userService: UserService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        // redirect to home if already logged in</div><div class=\"ql-code-block\">        if (this.authenticationService.currentUserValue) {</div><div class=\"ql-code-block\">            this.router.navigate(['/']);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.registerForm = this.formBuilder.group({</div><div class=\"ql-code-block\">            firstName: ['', Validators.required],</div><div class=\"ql-code-block\">            lastName: ['', Validators.required],</div><div class=\"ql-code-block\">            username: ['', Validators.required],</div><div class=\"ql-code-block\">            password: ['', [Validators.required, Validators.minLength(6)]]</div><div class=\"ql-code-block\">        });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // convenience getter for easy access to form fields</div><div class=\"ql-code-block\">    get f() { return this.registerForm.controls; }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    onSubmit() {</div><div class=\"ql-code-block\">        this.submitted = true;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // stop here if form is invalid</div><div class=\"ql-code-block\">        if (this.registerForm.invalid) {</div><div class=\"ql-code-block\">            return;</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        this.loading = true;</div><div class=\"ql-code-block\">        this.userService.register(this.registerForm.value)</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(</div><div class=\"ql-code-block\">                data =&gt; {</div><div class=\"ql-code-block\">                    this.router.navigate(['/login'], { queryParams: { registered: true }});</div><div class=\"ql-code-block\">                },</div><div class=\"ql-code-block\">                error =&gt; {</div><div class=\"ql-code-block\">                    this.error = error;</div><div class=\"ql-code-block\">                    this.loading = false;</div><div class=\"ql-code-block\">                });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MY6b10c4fc-8682-414d-b1b5-7e2652f1ad4b","name":"4. Add Form HTML to Register Component Template","custparents":[{"idx":"MY4d53bda4-f010-40ea-b531-d1dde1be51ac"}],"NodeDescription":"<p>///t</p><p>4. Add Form HTML to Register Component Template</p><p>4.1 Update Register Component Template</p><p>•\tIn /src/app/register/register.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;div *ngIf=\"error\" class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;</div><div class=\"ql-code-block\">&lt;h2&gt;Register&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"firstName\"&gt;First Name&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.firstName.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.firstName.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.firstName.errors.required\"&gt;First Name is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"lastName\"&gt;Last Name&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.lastName.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.lastName.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.lastName.errors.required\"&gt;Last Name is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.minlength\"&gt;Password must be at least 6 characters&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Register</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/login\" class=\"btn btn-link\"&gt;Cancel&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"},{"idx":"MY98fd47c5-d495-467c-9d38-5396eecad813","name":"5. Add Success Alert To Login Component","custparents":[{"idx":"MY4d53bda4-f010-40ea-b531-d1dde1be51ac"}],"children":[{"idx":"MY493dddf9-7a50-40cc-9499-7328a5bced0f","name":"5.1 Update Login Component","custparents":[{"idx":"MY98fd47c5-d495-467c-9d38-5396eecad813"}],"NodeDescription":"<p>///t</p><p>5.1 Update Login Component</p><p>•\tIn /src/app/login/login.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\">import { Router, ActivatedRoute } from '@angular/router';</div><div class=\"ql-code-block\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService } from '../_services'</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({templateUrl: 'login.component.html'})</div><div class=\"ql-code-block\">export class LoginComponent implements OnInit {</div><div class=\"ql-code-block\">    loginForm: FormGroup;</div><div class=\"ql-code-block\">    loading = false;</div><div class=\"ql-code-block\">    submitted = false;</div><div class=\"ql-code-block\">    returnUrl: string;</div><div class=\"ql-code-block\">    error: string;</div><div class=\"ql-code-block\">    success: string</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private formBuilder: FormBuilder,</div><div class=\"ql-code-block\">        private route: ActivatedRoute,</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        // redirect to home if already logged in</div><div class=\"ql-code-block\">        if (this.authenticationService.currentUserValue) { </div><div class=\"ql-code-block\">            this.router.navigate(['/']);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.loginForm = this.formBuilder.group({</div><div class=\"ql-code-block\">            username: ['', Validators.required],</div><div class=\"ql-code-block\">            password: ['', Validators.required]</div><div class=\"ql-code-block\">        });</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // get return url from route parameters or default to '/'</div><div class=\"ql-code-block\">        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // show success message on registration</div><div class=\"ql-code-block\">        if (this.route.snapshot.queryParams['registered']) {</div><div class=\"ql-code-block\">            this.success = 'Registration successful';</div><div class=\"ql-code-block\">        }        </div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // convenience getter for easy access to form fields</div><div class=\"ql-code-block\">    get f() { return this.loginForm.controls; }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    onSubmit() {</div><div class=\"ql-code-block\">        this.submitted = true;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // reset alerts on submit</div><div class=\"ql-code-block\">        this.error = null;</div><div class=\"ql-code-block\">        this.success = null;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // stop here if form is invalid</div><div class=\"ql-code-block\">        if (this.loginForm.invalid) {</div><div class=\"ql-code-block\">            return;</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        this.loading = true;</div><div class=\"ql-code-block\">        this.authenticationService.login(this.f.username.value, this.f.password.value)</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(</div><div class=\"ql-code-block\">                data =&gt; {</div><div class=\"ql-code-block\">                    this.router.navigate([this.returnUrl]);</div><div class=\"ql-code-block\">                },</div><div class=\"ql-code-block\">                error =&gt; {</div><div class=\"ql-code-block\">                    this.error = error;</div><div class=\"ql-code-block\">                    this.loading = false;</div><div class=\"ql-code-block\">                });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MY77ddb257-406b-4278-820b-d5cc5167fcab","name":"5.2 Update Login Component Template","custparents":[{"idx":"MY98fd47c5-d495-467c-9d38-5396eecad813"}],"NodeDescription":"<p>///t</p><p>5.2 Update Login Component Template</p><p>•\tIn /src/app/login/login.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/22/angular-7-tutorial-part-5-registration-form-user-service</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;div *ngIf=\"error\" class=\"alert alert-danger\"&gt;{{error}}&lt;/div&gt;</div><div class=\"ql-code-block\">&lt;div *ngIf=\"success\" class=\"alert alert-success\"&gt;{{success}}&lt;/div&gt;</div><div class=\"ql-code-block\">&lt;h2&gt;Login&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Login</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/register\" class=\"btn btn-link\"&gt;Register&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"}]},{"idx":"MY9ee2a7d7-f5eb-47f2-9d1c-aabb5ec24470","name":"6. start the app","custparents":[{"idx":"MY4d53bda4-f010-40ea-b531-d1dde1be51ac"}],"NodeDescription":"<p>///t</p><p>6. In node.js command window, under the folder C:\\Users\\Z70\\Angular 8 projects\\mya8login, type nmp start to launch the application.</p><p>t///</p>"}]},{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a","name":"E. Home Page & Alert Component","custparents":[{"idx":"MY1ea63709-b934-4652-acbb-d856455e0014"}],"children":[{"idx":"MYf27fa9b9-c0f9-4eb5-946b-986a57ec40ec","name":"1. Add \"Get Users\" and \"Delete User\" Routes to Fake Backend","custparents":[{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a"}],"NodeDescription":"<p>///t</p><p>1. Add \"Get Users\" and \"Delete User\" Routes to Fake Backend</p><p>1.1 Update Fake Backend</p><p>•\tIn /src/app/_helpers/fake-backend.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\">import { Observable, of, throwError } from 'rxjs';</div><div class=\"ql-code-block\">import { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// array in local storage for registered users</div><div class=\"ql-code-block\">let users = JSON.parse(localStorage.getItem('users')) || [];</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable()</div><div class=\"ql-code-block\">export class FakeBackendInterceptor implements HttpInterceptor {</div><div class=\"ql-code-block\">    intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {</div><div class=\"ql-code-block\">        const { url, method, headers, body } = request;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // wrap in delayed observable to simulate server api call</div><div class=\"ql-code-block\">        return of(null)</div><div class=\"ql-code-block\">            .pipe(mergeMap(handleRoute))</div><div class=\"ql-code-block\">            .pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)</div><div class=\"ql-code-block\">            .pipe(delay(500))</div><div class=\"ql-code-block\">            .pipe(dematerialize());</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function handleRoute() {</div><div class=\"ql-code-block\">            switch (true) {</div><div class=\"ql-code-block\">                case url.endsWith('/users/authenticate') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\">                    return authenticate();</div><div class=\"ql-code-block\">                case url.endsWith('/users/register') &amp;&amp; method === 'POST':</div><div class=\"ql-code-block\">                    return register();</div><div class=\"ql-code-block\">                case url.endsWith('/users') &amp;&amp; method === 'GET':</div><div class=\"ql-code-block\">                    return getUsers();</div><div class=\"ql-code-block\">                case url.match(/\\/users\\/\\d+$/) &amp;&amp; method === 'DELETE':</div><div class=\"ql-code-block\">                    return deleteUser();</div><div class=\"ql-code-block\">                default:</div><div class=\"ql-code-block\">                    // pass through any requests not handled above</div><div class=\"ql-code-block\">                    return next.handle(request);</div><div class=\"ql-code-block\">            }    </div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // route functions</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function authenticate() {</div><div class=\"ql-code-block\">            const { username, password } = body;</div><div class=\"ql-code-block\">            const user = users.find(x =&gt; x.username === username &amp;&amp; x.password === password);</div><div class=\"ql-code-block\">            if (!user) return error('Username or password is incorrect');</div><div class=\"ql-code-block\">            return ok({</div><div class=\"ql-code-block\">                id: user.id,</div><div class=\"ql-code-block\">                username: user.username,</div><div class=\"ql-code-block\">                firstName: user.firstName,</div><div class=\"ql-code-block\">                lastName: user.lastName,</div><div class=\"ql-code-block\">                token: 'fake-jwt-token'</div><div class=\"ql-code-block\">            })</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function register() {</div><div class=\"ql-code-block\">            const user = body</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            if (users.find(x =&gt; x.username === user.username)) {</div><div class=\"ql-code-block\">                return error('Username \"' + user.username + '\" is already taken')</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            user.id = users.length ? Math.max(...users.map(x =&gt; x.id)) + 1 : 1;</div><div class=\"ql-code-block\">            users.push(user);</div><div class=\"ql-code-block\">            localStorage.setItem('users', JSON.stringify(users));</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            return ok();</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function getUsers() {</div><div class=\"ql-code-block\">            if (!isLoggedIn()) return unauthorized();</div><div class=\"ql-code-block\">            return ok(users);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function deleteUser() {</div><div class=\"ql-code-block\">            if (!isLoggedIn()) return unauthorized();</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            users = users.filter(x =&gt; x.id !== idFromUrl());</div><div class=\"ql-code-block\">            localStorage.setItem('users', JSON.stringify(users));</div><div class=\"ql-code-block\">            return ok();</div><div class=\"ql-code-block\">        }        </div><div class=\"ql-code-block\">        </div><div class=\"ql-code-block\">        // helper functions</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function ok(body?) {</div><div class=\"ql-code-block\">            return of(new HttpResponse({ status: 200, body }))</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function error(message) {</div><div class=\"ql-code-block\">            return throwError({ error: { message } });</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">        </div><div class=\"ql-code-block\">        function unauthorized() {</div><div class=\"ql-code-block\">            return throwError({ status: 401, error: { message: 'Unauthorised' } });</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function isLoggedIn() {</div><div class=\"ql-code-block\">            return headers.get('Authorization') === 'Bearer fake-jwt-token';</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        function idFromUrl() {</div><div class=\"ql-code-block\">            const urlParts = url.split('/');</div><div class=\"ql-code-block\">            return parseInt(urlParts[urlParts.length - 1]);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">export const fakeBackendProvider = {</div><div class=\"ql-code-block\">    // use fake backend in place of Http service for backend-less development</div><div class=\"ql-code-block\">    provide: HTTP_INTERCEPTORS,</div><div class=\"ql-code-block\">    useClass: FakeBackendInterceptor,</div><div class=\"ql-code-block\">    multi: true</div><div class=\"ql-code-block\">};</div></div><p>t///</p>"},{"idx":"MYc257304f-3313-4c19-afc5-54232981c7bc","name":"2. Add Logic to Home Component","custparents":[{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a"}],"NodeDescription":"<p>///t</p><p>2. Add Logic to Home Component</p><p>2.1 Update Home Component</p><p>•\tIn /src/app/home/home.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { UserService, AuthenticationService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({ templateUrl: 'home.component.html' })</div><div class=\"ql-code-block\">export class HomeComponent implements OnInit {</div><div class=\"ql-code-block\">    currentUser: any;</div><div class=\"ql-code-block\">    users = [];</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService,</div><div class=\"ql-code-block\">        private userService: UserService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        this.currentUser = this.authenticationService.currentUserValue;</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.loadAllUsers();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    deleteUser(id: number) {</div><div class=\"ql-code-block\">        this.userService.delete(id)</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(() =&gt; this.loadAllUsers());</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    private loadAllUsers() {</div><div class=\"ql-code-block\">        this.userService.getAll()</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(users =&gt; this.users = users);</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MY1e36c449-113a-4eda-9e69-8ef13f0b986d","name":"3. Add HTML to Home Component Template","custparents":[{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a"}],"NodeDescription":"<p>///t</p><p>3. Add HTML to Home Component Template</p><p>•\tIn /src/app/home/home.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;h1&gt;Hi {{currentUser.firstName}}!&lt;/h1&gt;</div><div class=\"ql-code-block\">&lt;p&gt;You're logged in with Angular 8!!&lt;/p&gt;</div><div class=\"ql-code-block\">&lt;h3&gt;All registered users:&lt;/h3&gt;</div><div class=\"ql-code-block\">&lt;ul&gt;</div><div class=\"ql-code-block\">    &lt;li *ngFor=\"let user of users\"&gt;</div><div class=\"ql-code-block\">        {{user.username}} ({{user.firstName}} {{user.lastName}})</div><div class=\"ql-code-block\">        - &lt;a (click)=\"deleteUser(user.id)\" class=\"text-danger\"&gt;Delete&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/li&gt;</div><div class=\"ql-code-block\">&lt;/ul&gt;</div></div><p>t///</p>"},{"idx":"MY43cb9a60-0365-4a80-bef9-0605a5bbd9eb","name":"4. Create Alert Service","custparents":[{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a"}],"children":[{"idx":"MY9f3b516d-5e31-4290-b519-252dcd528200","name":"4.1 Create Alert Service","custparents":[{"idx":"MY43cb9a60-0365-4a80-bef9-0605a5bbd9eb"}],"NodeDescription":"<p>///t</p><p>4.1 Create Alert Service</p><p>•\tIn _services, create a file ‘alert.service.ts.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><p><br></p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Injectable } from '@angular/core';</div><div class=\"ql-code-block\">import { Router, NavigationStart } from '@angular/router';</div><div class=\"ql-code-block\">import { Observable, Subject } from 'rxjs';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Injectable({ providedIn: 'root' })</div><div class=\"ql-code-block\">export class AlertService {</div><div class=\"ql-code-block\">    private subject = new Subject&lt;any&gt;();</div><div class=\"ql-code-block\">    private keepAfterRouteChange = false;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(private router: Router) {</div><div class=\"ql-code-block\">        // clear alert messages on route change unless 'keepAfterRouteChange' flag is true</div><div class=\"ql-code-block\">        this.router.events.subscribe(event =&gt; {</div><div class=\"ql-code-block\">            if (event instanceof NavigationStart) {</div><div class=\"ql-code-block\">                if (this.keepAfterRouteChange) {</div><div class=\"ql-code-block\">                    // only keep for a single route change</div><div class=\"ql-code-block\">                    this.keepAfterRouteChange = false;</div><div class=\"ql-code-block\">                } else {</div><div class=\"ql-code-block\">                    // clear alert message</div><div class=\"ql-code-block\">                    this.clear();</div><div class=\"ql-code-block\">                }</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">        });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    getAlert(): Observable&lt;any&gt; {</div><div class=\"ql-code-block\">        return this.subject.asObservable();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    success(message: string, keepAfterRouteChange = false) {</div><div class=\"ql-code-block\">        this.keepAfterRouteChange = keepAfterRouteChange;</div><div class=\"ql-code-block\">        this.subject.next({ type: 'success', text: message });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    error(message: string, keepAfterRouteChange = false) {</div><div class=\"ql-code-block\">        this.keepAfterRouteChange = keepAfterRouteChange;</div><div class=\"ql-code-block\">        this.subject.next({ type: 'error', text: message });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    clear() {</div><div class=\"ql-code-block\">        // clear by calling subject.next() without parameters</div><div class=\"ql-code-block\">        this.subject.next();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MYad47c1b0-0cf9-493c-8cdf-50c9ee276db3","name":"4.2 Add Alert Service to Services Barrel File","custparents":[{"idx":"MY43cb9a60-0365-4a80-bef9-0605a5bbd9eb"}],"NodeDescription":"<p>///t</p><p>4.2 Add Alert Service to Services Barrel File</p><p>•\tIn /src/app/_services/index.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './authentication.service';</div><div class=\"ql-code-block\">export * from './user.service';</div><div class=\"ql-code-block\">export * from './alert.service';</div></div><p>t///</p>"}]},{"idx":"MY82ec4b84-34e9-4fdc-8695-b1b303a3ac8e","name":"5. Create Alert Component & Template","custparents":[{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a"}],"children":[{"idx":"MY1411c400-07be-4c86-a94d-8b99aca23e90","name":"5.1 Create Components Folder","custparents":[{"idx":"MY82ec4b84-34e9-4fdc-8695-b1b303a3ac8e"}],"NodeDescription":"<p>///t</p><p>5.1 Create Components Folder</p><p>•\tIn /src/app, create a folder named _components.</p><p>t///</p>"},{"idx":"MYe48cd2c2-1ec4-4847-ae63-232d16547e5b","name":"5.2 Create Alert Component","custparents":[{"idx":"MY82ec4b84-34e9-4fdc-8695-b1b303a3ac8e"}],"NodeDescription":"<p>///t</p><p>5.2 Create Alert Component</p><p>•\tIn _components, create a file ‘alert.component.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component, OnInit, OnDestroy } from '@angular/core';</div><div class=\"ql-code-block\">import { Subscription } from 'rxjs';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AlertService } from '../_services';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({ selector: 'alert', templateUrl: 'alert.component.html' })</div><div class=\"ql-code-block\">export class AlertComponent implements OnInit, OnDestroy {</div><div class=\"ql-code-block\">    private subscription: Subscription;</div><div class=\"ql-code-block\">    message: any;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(private alertService: AlertService) { }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.subscription = this.alertService.getAlert()</div><div class=\"ql-code-block\">            .subscribe(message =&gt; {</div><div class=\"ql-code-block\">                switch (message &amp;&amp; message.type) {</div><div class=\"ql-code-block\">                    case 'success':</div><div class=\"ql-code-block\">                        message.cssClass = 'alert alert-success';</div><div class=\"ql-code-block\">                        break;</div><div class=\"ql-code-block\">                    case 'error':</div><div class=\"ql-code-block\">                        message.cssClass = 'alert alert-danger';</div><div class=\"ql-code-block\">                        break;</div><div class=\"ql-code-block\">                }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">                this.message = message;</div><div class=\"ql-code-block\">            });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnDestroy() {</div><div class=\"ql-code-block\">        this.subscription.unsubscribe();</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MY8dc1ee74-370a-4075-902f-9dac112bfa55","name":"5.3 Create Alert Component Template","custparents":[{"idx":"MY82ec4b84-34e9-4fdc-8695-b1b303a3ac8e"}],"NodeDescription":"<p>///t</p><p>5.3 Create Alert Component Template</p><p>•\tIn _components, create a file ‘alert.component.html’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;div *ngIf=\"message\" [ngClass]=\"message.cssClass\"&gt;{{message.text}}&lt;/div&gt;</div></div><p>t///</p>"},{"idx":"MY8da1b23c-5c8c-4b9a-926f-06fd54cdede8","name":"5.4 Create Barrel File in Components Folder","custparents":[{"idx":"MY82ec4b84-34e9-4fdc-8695-b1b303a3ac8e"}],"NodeDescription":"<p>///t</p><p>5.4 Create Barrel File in Components Folder</p><p>•\tIn _components, create a file ‘index.ts’.</p><p>•\tIn this file, paste the code from the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">export * from './alert.component';</div></div><p>t///</p>"},{"idx":"MYfc50fade-e296-4e98-9da0-996fe46e36ea","name":"5.5 Add Alert Component to App Module","custparents":[{"idx":"MY82ec4b84-34e9-4fdc-8695-b1b303a3ac8e"}],"NodeDescription":"<p>///t</p><p>5.5 Add Alert Component to App Module</p><p>•\tIn /src/app/app.module.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* this file is to </div><div class=\"ql-code-block\"> 1) load build-in modules (NgModule,BrowserModule)</div><div class=\"ql-code-block\"> 2) run the customized module AppComponent (which is to specify the web components to obtain, and how to display it)</div><div class=\"ql-code-block\">*/</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// import the angular modules</div><div class=\"ql-code-block\">import { NgModule } from '@angular/core';</div><div class=\"ql-code-block\">import { BrowserModule } from '@angular/platform-browser';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { ReactiveFormsModule } from '@angular/forms';</div><div class=\"ql-code-block\">import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// used to create fake backend</div><div class=\"ql-code-block\">import { fakeBackendProvider } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { appRoutingModule } from './app.routing';</div><div class=\"ql-code-block\">import { JwtInterceptor, ErrorInterceptor } from './_helpers';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// check app.component.ts, in which there is a class 'AppComponent' that is ready to be imported here.</div><div class=\"ql-code-block\">import { AppComponent } from './app.component';</div><div class=\"ql-code-block\">import { HomeComponent } from './home';</div><div class=\"ql-code-block\">import { LoginComponent } from './login';</div><div class=\"ql-code-block\">import { RegisterComponent } from './register';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AlertComponent } from './_components';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">/* decorate @NgModule, import the broswermodule (enable browsing in different browers like Chrome, firefox, etc), </div><div class=\"ql-code-block\"> and declare AppComponent so that it can be used by all components and templates, </div><div class=\"ql-code-block\"> and bootstrap the AppComponent (what the heck is that? bootstrap is a pack of solution for CSS formating...</div><div class=\"ql-code-block\"> https://angular.io/guide/bootstrapping, and  https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)</div><div class=\"ql-code-block\"> */</div><div class=\"ql-code-block\">@NgModule({</div><div class=\"ql-code-block\">    imports: [</div><div class=\"ql-code-block\">        BrowserModule,</div><div class=\"ql-code-block\">        ReactiveFormsModule,</div><div class=\"ql-code-block\">        HttpClientModule,</div><div class=\"ql-code-block\">        appRoutingModule</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    declarations: [</div><div class=\"ql-code-block\">        AppComponent,</div><div class=\"ql-code-block\">        HomeComponent,</div><div class=\"ql-code-block\">        LoginComponent,</div><div class=\"ql-code-block\">        RegisterComponent,</div><div class=\"ql-code-block\">        AlertComponent    </div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    providers: [</div><div class=\"ql-code-block\">        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },</div><div class=\"ql-code-block\">        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },</div><div class=\"ql-code-block\">        // provider used to create fake backend</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        fakeBackendProvider</div><div class=\"ql-code-block\">    ],</div><div class=\"ql-code-block\">    bootstrap: [AppComponent]</div><div class=\"ql-code-block\">})</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// make the class AppModule ready to be imported by other modules</div><div class=\"ql-code-block\">export class AppModule { }</div><div class=\"ql-code-block\"><br></div></div><p>t///</p>"},{"idx":"MY766fc5d7-df0f-47c1-888b-00e4160e4cae","name":"5.6 Add Alert Component to App Component Template","custparents":[{"idx":"MY82ec4b84-34e9-4fdc-8695-b1b303a3ac8e"}],"NodeDescription":"<p>///t</p><p>5.6 Add Alert Component to App Component Template</p><p>•\tIn /src/app/app.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;!-- nav --&gt;</div><div class=\"ql-code-block\">&lt;nav class=\"navbar navbar-expand navbar-dark bg-dark\" *ngIf=\"currentUser\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"navbar-nav\"&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" routerLink=\"/\"&gt;Home&lt;/a&gt;</div><div class=\"ql-code-block\">        &lt;a class=\"nav-item nav-link\" (click)=\"logout()\"&gt;Logout&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/nav&gt;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">&lt;!-- main content container --&gt;</div><div class=\"ql-code-block\">&lt;div class=\"jumbotron\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"container\"&gt;</div><div class=\"ql-code-block\">        &lt;div class=\"row\"&gt;</div><div class=\"ql-code-block\">            &lt;div class=\"col-sm-8 offset-sm-2\"&gt;</div><div class=\"ql-code-block\">                &lt;alert&gt;&lt;/alert&gt;</div><div class=\"ql-code-block\">                &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"ql-code-block\">            &lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/div&gt;</div></div><p>t///</p>"}]},{"idx":"MY07fd0fe7-bb0c-4bf6-99e3-d68bef7ae8cc","name":"6. Refactor Login Component to use Alert Service","custparents":[{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a"}],"children":[{"idx":"MYdb24ebef-a9b8-4de4-8608-0165b5192324","name":"6.1 Refactor Login Component Logic","custparents":[{"idx":"MY07fd0fe7-bb0c-4bf6-99e3-d68bef7ae8cc"}],"NodeDescription":"<p>///t</p><p>6.1 Refactor Login Component Logic</p><p>•\tIn /src/app/login/login.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\">import { Router, ActivatedRoute } from '@angular/router';</div><div class=\"ql-code-block\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">import { AuthenticationService, AlertService  } from '../_services'</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">@Component({templateUrl: 'login.component.html'})</div><div class=\"ql-code-block\">export class LoginComponent implements OnInit {</div><div class=\"ql-code-block\">    loginForm: FormGroup;</div><div class=\"ql-code-block\">    loading = false;</div><div class=\"ql-code-block\">    submitted = false;</div><div class=\"ql-code-block\">    returnUrl: string;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    constructor(</div><div class=\"ql-code-block\">        private formBuilder: FormBuilder,</div><div class=\"ql-code-block\">        private route: ActivatedRoute,</div><div class=\"ql-code-block\">        private router: Router,</div><div class=\"ql-code-block\">        private authenticationService: AuthenticationService,</div><div class=\"ql-code-block\">        private alertService: AlertService</div><div class=\"ql-code-block\">    ) {</div><div class=\"ql-code-block\">        // redirect to home if already logged in</div><div class=\"ql-code-block\">        if (this.authenticationService.currentUserValue) { </div><div class=\"ql-code-block\">            this.router.navigate(['/']);</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    ngOnInit() {</div><div class=\"ql-code-block\">        this.loginForm = this.formBuilder.group({</div><div class=\"ql-code-block\">            username: ['', Validators.required],</div><div class=\"ql-code-block\">            password: ['', Validators.required]</div><div class=\"ql-code-block\">        });</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // get return url from route parameters or default to '/'</div><div class=\"ql-code-block\">        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';</div><div class=\"ql-code-block\">    </div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // convenience getter for easy access to form fields</div><div class=\"ql-code-block\">    get f() { return this.loginForm.controls; }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    onSubmit() {</div><div class=\"ql-code-block\">        this.submitted = true;</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // reset alerts on submit</div><div class=\"ql-code-block\">        this.alertService.clear();</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // stop here if form is invalid</div><div class=\"ql-code-block\">        if (this.loginForm.invalid) {</div><div class=\"ql-code-block\">            return;</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        this.loading = true;</div><div class=\"ql-code-block\">        this.authenticationService.login(this.f.username.value, this.f.password.value)</div><div class=\"ql-code-block\">            .pipe(first())</div><div class=\"ql-code-block\">            .subscribe(</div><div class=\"ql-code-block\">                data =&gt; {</div><div class=\"ql-code-block\">                    this.router.navigate([this.returnUrl]);</div><div class=\"ql-code-block\">                },</div><div class=\"ql-code-block\">                error =&gt; {</div><div class=\"ql-code-block\">                    this.alertService.error(error);</div><div class=\"ql-code-block\">                    this.loading = false;</div><div class=\"ql-code-block\">                });</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">}</div></div><p>t///</p>"},{"idx":"MY828b8601-e227-45b3-b962-b359938526fa","name":"6.2 Remove Alert HTML from Login Component Template","custparents":[{"idx":"MY07fd0fe7-bb0c-4bf6-99e3-d68bef7ae8cc"}],"NodeDescription":"<p>///t</p><p>6.2 Remove Alert HTML from Login Component Template</p><p>•\tIn /src/app/login/login.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;h2&gt;Login&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Login</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/register\" class=\"btn btn-link\"&gt;Register&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"}]},{"idx":"MYeeb4517b-4d16-4a05-9bf6-36b3bc231131","name":"7. Refactor Register Component to use Alert Service","custparents":[{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a"}],"children":[{"idx":"MY16c3e19b-b42b-4308-a800-7fac0e52611b","name":"7.1 Refactor Register Component Logic","custparents":[{"idx":"MYeeb4517b-4d16-4a05-9bf6-36b3bc231131"}],"NodeDescription":"<p>///t</p><p>7.1 Refactor Register Component Logic</p><p>•\tIn /src/app/register/register.component.ts, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import { Component, OnInit } from '@angular/core';</div><div class=\"ql-code-block\" data-language=\"plain\">import { Router } from '@angular/router';</div><div class=\"ql-code-block\" data-language=\"plain\">import { FormBuilder, FormGroup, Validators } from '@angular/forms';</div><div class=\"ql-code-block\" data-language=\"plain\">import { first } from 'rxjs/operators';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">import { UserService, AuthenticationService, AlertService } from '../_services';</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@Component({ templateUrl: 'register.component.html' })</div><div class=\"ql-code-block\" data-language=\"plain\">export class RegisterComponent implements OnInit {</div><div class=\"ql-code-block\" data-language=\"plain\">registerForm: FormGroup;</div><div class=\"ql-code-block\" data-language=\"plain\">loading = false;</div><div class=\"ql-code-block\" data-language=\"plain\">submitted = false;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">constructor(</div><div class=\"ql-code-block\" data-language=\"plain\">private formBuilder: FormBuilder,</div><div class=\"ql-code-block\" data-language=\"plain\">private router: Router,</div><div class=\"ql-code-block\" data-language=\"plain\">private authenticationService: AuthenticationService,</div><div class=\"ql-code-block\" data-language=\"plain\">private userService: UserService,</div><div class=\"ql-code-block\" data-language=\"plain\">private alertService: AlertService</div><div class=\"ql-code-block\" data-language=\"plain\">) {</div><div class=\"ql-code-block\" data-language=\"plain\">// redirect to home if already logged in</div><div class=\"ql-code-block\" data-language=\"plain\">if (this.authenticationService.currentUserValue) {</div><div class=\"ql-code-block\" data-language=\"plain\">this.router.navigate(['/']);</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">ngOnInit() {</div><div class=\"ql-code-block\" data-language=\"plain\">this.registerForm = this.formBuilder.group({</div><div class=\"ql-code-block\" data-language=\"plain\">firstName: ['', Validators.required],</div><div class=\"ql-code-block\" data-language=\"plain\">lastName: ['', Validators.required],</div><div class=\"ql-code-block\" data-language=\"plain\">username: ['', Validators.required],</div><div class=\"ql-code-block\" data-language=\"plain\">password: ['', [Validators.required, Validators.minLength(6)]]</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// convenience getter for easy access to form fields</div><div class=\"ql-code-block\" data-language=\"plain\">get f() { return this.registerForm.controls; }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">onSubmit() {</div><div class=\"ql-code-block\" data-language=\"plain\">this.submitted = true;</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// reset alerts on submit</div><div class=\"ql-code-block\" data-language=\"plain\">this.alertService.clear();</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">// stop here if form is invalid</div><div class=\"ql-code-block\" data-language=\"plain\">if (this.registerForm.invalid) {</div><div class=\"ql-code-block\" data-language=\"plain\">return;</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">this.loading = true;</div><div class=\"ql-code-block\" data-language=\"plain\">this.userService.register(this.registerForm.value)</div><div class=\"ql-code-block\" data-language=\"plain\">.pipe(first())</div><div class=\"ql-code-block\" data-language=\"plain\">.subscribe(</div><div class=\"ql-code-block\" data-language=\"plain\">data =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">this.alertService.success('Registration successful', true);/**added by E.7.1 */</div><div class=\"ql-code-block\" data-language=\"plain\">this.router.navigate(['/login'], { queryParams: { registered: true }});</div><div class=\"ql-code-block\" data-language=\"plain\">},</div><div class=\"ql-code-block\" data-language=\"plain\">error =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">this.alertService.error(error);</div><div class=\"ql-code-block\" data-language=\"plain\">this.loading = false;</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></div><p>t///</p>"},{"idx":"MYdd91008a-5d27-43b2-a5f7-018bb6a13a64","name":"7.2 Remove Alert HTML from Register Component Template","custparents":[{"idx":"MYeeb4517b-4d16-4a05-9bf6-36b3bc231131"}],"NodeDescription":"<p>///t</p><p>7.2 Remove Alert HTML from Register Component Template</p><p>•\tIn /src/app/register/register.component.html, make changes according to the corresponding part from https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">&lt;h2&gt;Register&lt;/h2&gt;</div><div class=\"ql-code-block\">&lt;form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\"&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"firstName\"&gt;First Name&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.firstName.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.firstName.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.firstName.errors.required\"&gt;First Name is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"lastName\"&gt;Last Name&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.lastName.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.lastName.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.lastName.errors.required\"&gt;Last Name is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"username\"&gt;Username&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.username.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.username.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.username.errors.required\"&gt;Username is required&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;label for=\"password\"&gt;Password&lt;/label&gt;</div><div class=\"ql-code-block\">        &lt;input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; f.password.errors }\" /&gt;</div><div class=\"ql-code-block\">        &lt;div *ngIf=\"submitted &amp;&amp; f.password.errors\" class=\"invalid-feedback\"&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.required\"&gt;Password is required&lt;/div&gt;</div><div class=\"ql-code-block\">            &lt;div *ngIf=\"f.password.errors.minlength\"&gt;Password must be at least 6 characters&lt;/div&gt;</div><div class=\"ql-code-block\">        &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">    &lt;div class=\"form-group\"&gt;</div><div class=\"ql-code-block\">        &lt;button [disabled]=\"loading\" class=\"btn btn-primary\"&gt;</div><div class=\"ql-code-block\">            &lt;span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"&gt;&lt;/span&gt;</div><div class=\"ql-code-block\">            Register</div><div class=\"ql-code-block\">        &lt;/button&gt;</div><div class=\"ql-code-block\">        &lt;a routerLink=\"/login\" class=\"btn btn-link\"&gt;Cancel&lt;/a&gt;</div><div class=\"ql-code-block\">    &lt;/div&gt;</div><div class=\"ql-code-block\">&lt;/form&gt;</div></div><p>t///</p>"}]},{"idx":"MY253e46e4-6788-42fe-b096-a384d4527b48","name":"8. Start the app","custparents":[{"idx":"MYd7d7b13e-e618-431c-95ec-5d039b7bb52a"}],"NodeDescription":"<p>///t</p><p>8. In node.js command window, under the folder C:\\Users\\Z70\\Angular 8 projects\\mya8login, type nmp start to launch the application.</p><p>t///</p>"}],"NodeDescription":"<p>///t</p><p>This part is to complete the homepage. After log  in, show the existing users, and allow to delete them.</p><p>The tutorial of this part can be found at https://jasonwatmore.com/post/2019/05/31/angular-7-tutorial-part-6-home-page-alert-component.</p><p>t///</p>"}]}],"NodeDescription":"<p>///t</p><p>F:\\Personal\\Dropbox\\English Writing\\MyBlog at wordpress\\Angular to set up a website with log in register.docx</p><p>Source: https://jasonwatmore.com/post/2019/06/10/angular-8-user-registration-and-login-example-tutorial</p><p>The project root:</p><p>C:\\Users\\Z70\\Angular 8 projects\\a8login_stepbystep</p><p>Github repository:</p><p><a href=\"https://github.com/ShenzhenYAO/a8login_stepbystep\" target=\"_blank\">https://github.com/ShenzhenYAO/a8login_stepbystep</a></p><p>https://github.com/ShenzhenYAO/a8login_stepbystep.git </p><p>t///</p>"}